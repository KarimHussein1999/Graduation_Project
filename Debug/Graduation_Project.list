
Graduation_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08004fc0  08004fc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc0  08004fc0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc0  08004fc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fc8  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08004fd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08004fd4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002238  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a54  00000000  00000000  0002226d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00022cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003f8  00000000  00000000  00023178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000182a  00000000  00000000  00023570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b4f  00000000  00000000  00024d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008530  00000000  00000000  000268e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ee19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011f8  00000000  00000000  0002ee94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08004fa8 	.word	0x08004fa8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08004fa8 	.word	0x08004fa8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <Bluetooth_Init>:

// Note That The Baud Rate For COMMAND Mode is 38400 bps (Program Using TeraTerminal + RST Button)
// Note	That The Baud Rate for DATA Mode is 9600 bps (You Can Change)

void Bluetooth_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	UART_Init(Bluetooth_UART);
 8000950:	2000      	movs	r0, #0
 8000952:	f003 fbf5 	bl	8004140 <UART_Init>
	UART_Direction(Bluetooth_UART,Tx_Rx);
 8000956:	2102      	movs	r1, #2
 8000958:	2000      	movs	r0, #0
 800095a:	f003 fcf7 	bl	800434c <UART_Direction>
	UART_ActivateInterrupt(Bluetooth_UART);
 800095e:	2000      	movs	r0, #0
 8000960:	f003 fda0 	bl	80044a4 <UART_ActivateInterrupt>
	UART_Enable(Bluetooth_UART);
 8000964:	2000      	movs	r0, #0
 8000966:	f003 fd6f 	bl	8004448 <UART_Enable>

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}

0800096e <Bluetooth_Read>:
void Bluetooth_Send(unsigned char data)
{
	UART_Send(Bluetooth_UART,data);
}
unsigned char Bluetooth_Read(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
	return(UART_Recieve(Bluetooth_UART));
 8000972:	2000      	movs	r0, #0
 8000974:	f003 fca6 	bl	80042c4 <UART_Recieve>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}

0800097e <Car_Init>:


// we use 8 MHz External Crystal & Prescaler 8

void Car_Init()
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
	Timer_Init (DC_MOTOR_TIMER,8); // 1 MHz
 8000982:	2108      	movs	r1, #8
 8000984:	2003      	movs	r0, #3
 8000986:	f001 ff2d 	bl	80027e4 <Timer_Init>
	Timer_ActivatePWM(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL1,PERIOD,DUTY_CYCLE);
 800098a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800098e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000992:	2100      	movs	r1, #0
 8000994:	2003      	movs	r0, #3
 8000996:	f002 fa27 	bl	8002de8 <Timer_ActivatePWM>
	Timer_ActivatePWM(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL2,PERIOD,GND);
 800099a:	2300      	movs	r3, #0
 800099c:	f242 7210 	movw	r2, #10000	; 0x2710
 80009a0:	2101      	movs	r1, #1
 80009a2:	2003      	movs	r0, #3
 80009a4:	f002 fa20 	bl	8002de8 <Timer_ActivatePWM>
	Timer_ActivatePWM(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL1,PERIOD,DUTY_CYCLE);
 80009a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80009b0:	2102      	movs	r1, #2
 80009b2:	2003      	movs	r0, #3
 80009b4:	f002 fa18 	bl	8002de8 <Timer_ActivatePWM>
	Timer_ActivatePWM(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,PERIOD,GND);
 80009b8:	2300      	movs	r3, #0
 80009ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80009be:	2103      	movs	r1, #3
 80009c0:	2003      	movs	r0, #3
 80009c2:	f002 fa11 	bl	8002de8 <Timer_ActivatePWM>
	if(!(Timer_Status(DC_MOTOR_TIMER)))
 80009c6:	2003      	movs	r0, #3
 80009c8:	f002 f89c 	bl	8002b04 <Timer_Status>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <Car_Init+0x5a>
		Timer_Enable(DC_MOTOR_TIMER);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f002 f8d4 	bl	8002b80 <Timer_Enable>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <Car_Drive>:

void Car_Drive(Car_State car_state,Car_Dir car_dir,unsigned short dutycycle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	460b      	mov	r3, r1
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	4613      	mov	r3, r2
 80009ec:	80bb      	strh	r3, [r7, #4]
	if(car_state == STOP)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d114      	bne.n	8000a1e <Car_Drive+0x42>
	{
		Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL1,GND);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2003      	movs	r0, #3
 80009fa:	f002 f931 	bl	8002c60 <Timer_PWMDutyCycle>
		Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL2,GND);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2101      	movs	r1, #1
 8000a02:	2003      	movs	r0, #3
 8000a04:	f002 f92c 	bl	8002c60 <Timer_PWMDutyCycle>
		Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL1,GND);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f002 f927 	bl	8002c60 <Timer_PWMDutyCycle>
		Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,GND);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2103      	movs	r1, #3
 8000a16:	2003      	movs	r0, #3
 8000a18:	f002 f922 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,GND);
				break;
			default:break;
		}
	}
}
 8000a1c:	e06d      	b.n	8000afa <Car_Drive+0x11e>
	else if (car_state == GO)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d167      	bne.n	8000af4 <Car_Drive+0x118>
		switch(car_dir)
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d866      	bhi.n	8000af8 <Car_Drive+0x11c>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <Car_Drive+0x54>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a6f 	.word	0x08000a6f
 8000a38:	08000a9d 	.word	0x08000a9d
 8000a3c:	08000ac9 	.word	0x08000ac9
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL1,dutycycle);
 8000a40:	88bb      	ldrh	r3, [r7, #4]
 8000a42:	461a      	mov	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	2003      	movs	r0, #3
 8000a48:	f002 f90a 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL2,GND);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2003      	movs	r0, #3
 8000a52:	f002 f905 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL1,dutycycle);
 8000a56:	88bb      	ldrh	r3, [r7, #4]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f002 f8ff 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,GND);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2103      	movs	r1, #3
 8000a66:	2003      	movs	r0, #3
 8000a68:	f002 f8fa 	bl	8002c60 <Timer_PWMDutyCycle>
				break;
 8000a6c:	e045      	b.n	8000afa <Car_Drive+0x11e>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL1,GND);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2003      	movs	r0, #3
 8000a74:	f002 f8f4 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL2,dutycycle);
 8000a78:	88bb      	ldrh	r3, [r7, #4]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f002 f8ee 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL1,GND);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2102      	movs	r1, #2
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f002 f8e9 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,dutycycle);
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	461a      	mov	r2, r3
 8000a92:	2103      	movs	r1, #3
 8000a94:	2003      	movs	r0, #3
 8000a96:	f002 f8e3 	bl	8002c60 <Timer_PWMDutyCycle>
				break;
 8000a9a:	e02e      	b.n	8000afa <Car_Drive+0x11e>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL1,dutycycle);
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f002 f8dc 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL2,GND);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2003      	movs	r0, #3
 8000aae:	f002 f8d7 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL1,GND);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f002 f8d2 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,GND);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2103      	movs	r1, #3
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f002 f8cd 	bl	8002c60 <Timer_PWMDutyCycle>
				break;
 8000ac6:	e018      	b.n	8000afa <Car_Drive+0x11e>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL1,GND);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	2003      	movs	r0, #3
 8000ace:	f002 f8c7 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR1_CHANNEL2,GND);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f002 f8c2 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL1,dutycycle);
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f002 f8bc 	bl	8002c60 <Timer_PWMDutyCycle>
				Timer_PWMDutyCycle(DC_MOTOR_TIMER,DC_MOTOR2_CHANNEL2,GND);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2103      	movs	r1, #3
 8000aec:	2003      	movs	r0, #3
 8000aee:	f002 f8b7 	bl	8002c60 <Timer_PWMDutyCycle>
				break;
 8000af2:	e002      	b.n	8000afa <Car_Drive+0x11e>
	}
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <Car_Drive+0x11e>
			default:break;
 8000af8:	bf00      	nop
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop

08000b04 <DMA1_Channel1_IRQHandler>:
}

// ISR Section //

void DMA1_Channel1_IRQHandler (void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,0);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <DMA1_Channel1_IRQHandler+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <DMA1_Channel1_IRQHandler+0x1c>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]
	DMA_CH1_ISR();
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <DMA1_Channel1_IRQHandler+0x20>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4798      	blx	r3
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020004 	.word	0x40020004
 8000b24:	20000028 	.word	0x20000028

08000b28 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler (void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,4);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <DMA1_Channel2_IRQHandler+0x1c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <DMA1_Channel2_IRQHandler+0x1c>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
	DMA_CH2_ISR();
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <DMA1_Channel2_IRQHandler+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4798      	blx	r3
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40020004 	.word	0x40020004
 8000b48:	2000002c 	.word	0x2000002c

08000b4c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler (void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,8);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <DMA1_Channel3_IRQHandler+0x1c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <DMA1_Channel3_IRQHandler+0x1c>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
	DMA_CH3_ISR();
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <DMA1_Channel3_IRQHandler+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4798      	blx	r3
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020004 	.word	0x40020004
 8000b6c:	20000030 	.word	0x20000030

08000b70 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler (void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,12);
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <DMA1_Channel4_IRQHandler+0x1c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <DMA1_Channel4_IRQHandler+0x1c>)
 8000b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7e:	6013      	str	r3, [r2, #0]
	DMA_CH4_ISR();
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <DMA1_Channel4_IRQHandler+0x20>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4798      	blx	r3
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020004 	.word	0x40020004
 8000b90:	20000034 	.word	0x20000034

08000b94 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler (void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,16);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <DMA1_Channel5_IRQHandler+0x1c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <DMA1_Channel5_IRQHandler+0x1c>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	6013      	str	r3, [r2, #0]
	DMA_CH5_ISR();
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <DMA1_Channel5_IRQHandler+0x20>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4798      	blx	r3
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020004 	.word	0x40020004
 8000bb4:	20000038 	.word	0x20000038

08000bb8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler (void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,20);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <DMA1_Channel6_IRQHandler+0x1c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <DMA1_Channel6_IRQHandler+0x1c>)
 8000bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bc6:	6013      	str	r3, [r2, #0]
	DMA_CH6_ISR();
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <DMA1_Channel6_IRQHandler+0x20>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4798      	blx	r3
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40020004 	.word	0x40020004
 8000bd8:	2000003c 	.word	0x2000003c

08000bdc <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler (void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	SetBit(DMA1_IFCR,24);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <DMA1_Channel7_IRQHandler+0x1c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <DMA1_Channel7_IRQHandler+0x1c>)
 8000be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bea:	6013      	str	r3, [r2, #0]
	DMA_CH7_ISR();
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <DMA1_Channel7_IRQHandler+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4798      	blx	r3
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40020004 	.word	0x40020004
 8000bfc:	20000040 	.word	0x20000040

08000c00 <EXTI0_IRQHandler>:

// Clear interrupt flag bit first then execute your code
// to avoid the problem (interrupt come while you are executing the current ISR

void EXTI0_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	SetBit(EXTI_PR,0);//clear pending bit
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <EXTI0_IRQHandler+0x1c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <EXTI0_IRQHandler+0x1c>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6013      	str	r3, [r2, #0]

	EXTI0_PTR();
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <EXTI0_IRQHandler+0x20>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4798      	blx	r3
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40010414 	.word	0x40010414
 8000c20:	20000044 	.word	0x20000044

08000c24 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	SetBit(EXTI_PR,1);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <EXTI1_IRQHandler+0x1c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <EXTI1_IRQHandler+0x1c>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	6013      	str	r3, [r2, #0]

	EXTI1_PTR();
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <EXTI1_IRQHandler+0x20>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4798      	blx	r3
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010414 	.word	0x40010414
 8000c44:	20000048 	.word	0x20000048

08000c48 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    SetBit(EXTI_PR,2);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <EXTI2_IRQHandler+0x1c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <EXTI2_IRQHandler+0x1c>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6013      	str	r3, [r2, #0]

    EXTI2_PTR();
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <EXTI2_IRQHandler+0x20>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4798      	blx	r3
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010414 	.word	0x40010414
 8000c68:	2000004c 	.word	0x2000004c

08000c6c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	SetBit(EXTI_PR,3);
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <EXTI3_IRQHandler+0x1c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <EXTI3_IRQHandler+0x1c>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6013      	str	r3, [r2, #0]

	EXTI3_PTR();
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <EXTI3_IRQHandler+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4798      	blx	r3
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010414 	.word	0x40010414
 8000c8c:	20000050 	.word	0x20000050

08000c90 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	SetBit(EXTI_PR,4);
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <EXTI4_IRQHandler+0x1c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <EXTI4_IRQHandler+0x1c>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6013      	str	r3, [r2, #0]

	EXTI4_PTR();
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <EXTI4_IRQHandler+0x20>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4798      	blx	r3
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010414 	.word	0x40010414
 8000cb0:	20000054 	.word	0x20000054

08000cb4 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	if(GetBit(EXTI_PR,5))
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	095b      	lsrs	r3, r3, #5
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <EXTI9_5_IRQHandler+0x1e>
		SetBit(EXTI_PR,5);
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,6))
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	099b      	lsrs	r3, r3, #6
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <EXTI9_5_IRQHandler+0x38>
		SetBit(EXTI_PR,6);
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cea:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,7))
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	09db      	lsrs	r3, r3, #7
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <EXTI9_5_IRQHandler+0x52>
		SetBit(EXTI_PR,7);
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,8))
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <EXTI9_5_IRQHandler+0x6c>
		SetBit(EXTI_PR,8);
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,9))
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0a5b      	lsrs	r3, r3, #9
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <EXTI9_5_IRQHandler+0x86>
		SetBit(EXTI_PR,9);
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <EXTI9_5_IRQHandler+0x90>)
 8000d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d38:	6013      	str	r3, [r2, #0]

	EXTI5_PTR();
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <EXTI9_5_IRQHandler+0x94>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4798      	blx	r3
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40010414 	.word	0x40010414
 8000d48:	20000058 	.word	0x20000058

08000d4c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	if(GetBit(EXTI_PR,10))
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	0a9b      	lsrs	r3, r3, #10
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <EXTI15_10_IRQHandler+0x1e>
		SetBit(EXTI_PR,10);
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d68:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,11))
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0adb      	lsrs	r3, r3, #11
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <EXTI15_10_IRQHandler+0x38>
		SetBit(EXTI_PR,11);
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d82:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,12))
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0b1b      	lsrs	r3, r3, #12
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <EXTI15_10_IRQHandler+0x52>
		SetBit(EXTI_PR,12);
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9c:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,13))
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	0b5b      	lsrs	r3, r3, #13
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d005      	beq.n	8000db8 <EXTI15_10_IRQHandler+0x6c>
		SetBit(EXTI_PR,13);
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000db2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000db6:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,14))
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0b9b      	lsrs	r3, r3, #14
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <EXTI15_10_IRQHandler+0x86>
		SetBit(EXTI_PR,14);
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6013      	str	r3, [r2, #0]
	if(GetBit(EXTI_PR,15))
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0bdb      	lsrs	r3, r3, #15
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d005      	beq.n	8000dec <EXTI15_10_IRQHandler+0xa0>
		SetBit(EXTI_PR,15);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <EXTI15_10_IRQHandler+0xac>)
 8000de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dea:	6013      	str	r3, [r2, #0]

	EXTI10_PTR();
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <EXTI15_10_IRQHandler+0xb0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4798      	blx	r3
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010414 	.word	0x40010414
 8000dfc:	2000005c 	.word	0x2000005c

08000e00 <GPIO_Init>:
#include "util.h"
#include "Regmap.h"


void GPIO_Init(PORT port)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	switch(port)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d843      	bhi.n	8000e98 <GPIO_Init+0x98>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <GPIO_Init+0x18>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e45 	.word	0x08000e45
 8000e20:	08000e61 	.word	0x08000e61
 8000e24:	08000e7d 	.word	0x08000e7d
	{
		case PORTA:
			if(!GetBit(RCC_APB2ENR,2))
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d132      	bne.n	8000e9c <GPIO_Init+0x9c>
				SetBit(RCC_APB2ENR,2);
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6013      	str	r3, [r2, #0]
			break;
 8000e42:	e02b      	b.n	8000e9c <GPIO_Init+0x9c>
		case PORTB:
			if(!GetBit(RCC_APB2ENR,3))
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d126      	bne.n	8000ea0 <GPIO_Init+0xa0>
				SetBit(RCC_APB2ENR,3);
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6013      	str	r3, [r2, #0]
			break;
 8000e5e:	e01f      	b.n	8000ea0 <GPIO_Init+0xa0>
		case PORTC:
			if(!GetBit(RCC_APB2ENR,4))
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11a      	bne.n	8000ea4 <GPIO_Init+0xa4>
				SetBit(RCC_APB2ENR,4);
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6013      	str	r3, [r2, #0]
			break;
 8000e7a:	e013      	b.n	8000ea4 <GPIO_Init+0xa4>
		case PORTD:
			if(!GetBit(RCC_APB2ENR,5))
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	095b      	lsrs	r3, r3, #5
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10e      	bne.n	8000ea8 <GPIO_Init+0xa8>
				SetBit(RCC_APB2ENR,5);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <GPIO_Init+0xb4>)
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	6013      	str	r3, [r2, #0]
			break;
 8000e96:	e007      	b.n	8000ea8 <GPIO_Init+0xa8>
 		default:break;
 8000e98:	bf00      	nop
 8000e9a:	e006      	b.n	8000eaa <GPIO_Init+0xaa>
			break;
 8000e9c:	bf00      	nop
 8000e9e:	e004      	b.n	8000eaa <GPIO_Init+0xaa>
			break;
 8000ea0:	bf00      	nop
 8000ea2:	e002      	b.n	8000eaa <GPIO_Init+0xaa>
			break;
 8000ea4:	bf00      	nop
 8000ea6:	e000      	b.n	8000eaa <GPIO_Init+0xaa>
			break;
 8000ea8:	bf00      	nop
	}
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021018 	.word	0x40021018

08000eb8 <GPIO_PinDirection>:
void GPIO_PinDirection(PORT port,PIN pin,PIN_DIR pin_dir,PIN_MODE pin_mode)
{
 8000eb8:	b490      	push	{r4, r7}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	460b      	mov	r3, r1
 8000ed0:	717b      	strb	r3, [r7, #5]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	713b      	strb	r3, [r7, #4]
   switch(port)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	f000 83da 	beq.w	8001692 <GPIO_PinDirection+0x7da>
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	f000 87aa 	beq.w	8001e38 <GPIO_PinDirection+0xf80>
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <GPIO_PinDirection+0x34>
   	         				ClrBit(GPIOC_CRH,((4*(pin-8))+3));
   	   					   break;
   	   				   }
   		   }
   		   break;
   	   default:break;
 8000ee8:	f001 bb7e 	b.w	80025e8 <GPIO_PinDirection+0x1730>
   		   if(pin_dir == INPUT_PIN)
 8000eec:	797b      	ldrb	r3, [r7, #5]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 819c 	bne.w	800122c <GPIO_PinDirection+0x374>
   			   if(pin <= 7)
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	f200 80c3 	bhi.w	8001082 <GPIO_PinDirection+0x1ca>
   				   ClrBit(GPIOA_CRL,4*pin);
 8000efc:	4bab      	ldr	r3, [pc, #684]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	0092      	lsls	r2, r2, #2
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4aa7      	ldr	r2, [pc, #668]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f10:	400b      	ands	r3, r1
 8000f12:	6013      	str	r3, [r2, #0]
   				   ClrBit(GPIOA_CRL,((4*pin)+1));
 8000f14:	4ba5      	ldr	r3, [pc, #660]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	3201      	adds	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4aa0      	ldr	r2, [pc, #640]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	6013      	str	r3, [r2, #0]
   				   switch(pin_mode)
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	3b04      	subs	r3, #4
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	f200 808a 	bhi.w	800104c <GPIO_PinDirection+0x194>
 8000f38:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <GPIO_PinDirection+0x88>)
 8000f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3e:	bf00      	nop
 8000f40:	08001017 	.word	0x08001017
 8000f44:	08000f51 	.word	0x08000f51
 8000f48:	08000f85 	.word	0x08000f85
 8000f4c:	08000fcd 	.word	0x08000fcd
   						SetBit(GPIOA_CRL,((4*pin)+2));
 8000f50:	4b96      	ldr	r3, [pc, #600]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	3202      	adds	r2, #2
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4611      	mov	r1, r2
 8000f62:	4a92      	ldr	r2, [pc, #584]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_CRL,((4*pin)+3));
 8000f68:	4b90      	ldr	r3, [pc, #576]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	79ba      	ldrb	r2, [r7, #6]
 8000f6e:	0092      	lsls	r2, r2, #2
 8000f70:	3203      	adds	r2, #3
 8000f72:	2101      	movs	r1, #1
 8000f74:	fa01 f202 	lsl.w	r2, r1, r2
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a8b      	ldr	r2, [pc, #556]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	6013      	str	r3, [r2, #0]
   					   break;
 8000f82:	e384      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						ClrBit(GPIOA_CRL,((4*pin)+2));
 8000f84:	4b89      	ldr	r3, [pc, #548]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	79ba      	ldrb	r2, [r7, #6]
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	3202      	adds	r2, #2
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	4611      	mov	r1, r2
 8000f98:	4a84      	ldr	r2, [pc, #528]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOA_CRL,((4*pin)+3));
 8000f9e:	4b83      	ldr	r3, [pc, #524]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	79ba      	ldrb	r2, [r7, #6]
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	3203      	adds	r2, #3
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOA_ODR,pin);
 8000fb6:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4a7a      	ldr	r2, [pc, #488]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8000fc6:	430b      	orrs	r3, r1
 8000fc8:	6013      	str	r3, [r2, #0]
   					   break;
 8000fca:	e360      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						ClrBit(GPIOA_CRL,((4*pin)+2));
 8000fcc:	4b77      	ldr	r3, [pc, #476]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	79ba      	ldrb	r2, [r7, #6]
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	3202      	adds	r2, #2
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	43d2      	mvns	r2, r2
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4a72      	ldr	r2, [pc, #456]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOA_CRL,((4*pin)+3));
 8000fe6:	4b71      	ldr	r3, [pc, #452]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	3203      	adds	r2, #3
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4a6c      	ldr	r2, [pc, #432]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_ODR,pin);
 8000ffe:	4b6c      	ldr	r3, [pc, #432]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	79ba      	ldrb	r2, [r7, #6]
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	43d2      	mvns	r2, r2
 800100c:	4611      	mov	r1, r2
 800100e:	4a68      	ldr	r2, [pc, #416]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8001010:	400b      	ands	r3, r1
 8001012:	6013      	str	r3, [r2, #0]
   					   break;
 8001014:	e33b      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						ClrBit(GPIOA_CRL,((4*pin)+2));
 8001016:	4b65      	ldr	r3, [pc, #404]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	79ba      	ldrb	r2, [r7, #6]
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	3202      	adds	r2, #2
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	43d2      	mvns	r2, r2
 8001028:	4611      	mov	r1, r2
 800102a:	4a60      	ldr	r2, [pc, #384]	; (80011ac <GPIO_PinDirection+0x2f4>)
 800102c:	400b      	ands	r3, r1
 800102e:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_CRL,((4*pin)+3));
 8001030:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	3203      	adds	r2, #3
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	43d2      	mvns	r2, r2
 8001042:	4611      	mov	r1, r2
 8001044:	4a59      	ldr	r2, [pc, #356]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8001046:	400b      	ands	r3, r1
 8001048:	6013      	str	r3, [r2, #0]
   					   break;
 800104a:	e320      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						SetBit(GPIOA_CRL,((4*pin)+2));
 800104c:	4b57      	ldr	r3, [pc, #348]	; (80011ac <GPIO_PinDirection+0x2f4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	79ba      	ldrb	r2, [r7, #6]
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	3202      	adds	r2, #2
 8001056:	2101      	movs	r1, #1
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	4611      	mov	r1, r2
 800105e:	4a53      	ldr	r2, [pc, #332]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8001060:	430b      	orrs	r3, r1
 8001062:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_CRL,((4*pin)+3));
 8001064:	4b51      	ldr	r3, [pc, #324]	; (80011ac <GPIO_PinDirection+0x2f4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	79ba      	ldrb	r2, [r7, #6]
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	3203      	adds	r2, #3
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	43d2      	mvns	r2, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4a4c      	ldr	r2, [pc, #304]	; (80011ac <GPIO_PinDirection+0x2f4>)
 800107a:	400b      	ands	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
   					   break;
 800107e:	bf00      	nop
 8001080:	e305      	b.n	800168e <GPIO_PinDirection+0x7d6>
   				    ClrBit(GPIOA_CRH,(4*(pin-8)));
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	79ba      	ldrb	r2, [r7, #6]
 8001088:	3a08      	subs	r2, #8
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	2101      	movs	r1, #1
 800108e:	fa01 f202 	lsl.w	r2, r1, r2
 8001092:	43d2      	mvns	r2, r2
 8001094:	4611      	mov	r1, r2
 8001096:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 8001098:	400b      	ands	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
   				    ClrBit(GPIOA_CRH,((4*(pin-8))+1));
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	3a08      	subs	r2, #8
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	3201      	adds	r2, #1
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	43d2      	mvns	r2, r2
 80010b0:	4611      	mov	r1, r2
 80010b2:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 80010b4:	400b      	ands	r3, r1
 80010b6:	6013      	str	r3, [r2, #0]
   				   switch(pin_mode)
 80010b8:	793b      	ldrb	r3, [r7, #4]
 80010ba:	3b04      	subs	r3, #4
 80010bc:	2b03      	cmp	r3, #3
 80010be:	f200 8098 	bhi.w	80011f2 <GPIO_PinDirection+0x33a>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <GPIO_PinDirection+0x210>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080011b9 	.word	0x080011b9
 80010cc:	080010d9 	.word	0x080010d9
 80010d0:	08001111 	.word	0x08001111
 80010d4:	0800115d 	.word	0x0800115d
   						SetBit(GPIOA_CRH,((4*(pin-8))+2));
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	79ba      	ldrb	r2, [r7, #6]
 80010de:	3a08      	subs	r2, #8
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	3202      	adds	r2, #2
 80010e4:	2101      	movs	r1, #1
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	4611      	mov	r1, r2
 80010ec:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 80010ee:	430b      	orrs	r3, r1
 80010f0:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_CRH,((4*(pin-8))+3));
 80010f2:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	79ba      	ldrb	r2, [r7, #6]
 80010f8:	3a08      	subs	r2, #8
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	3203      	adds	r2, #3
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	43d2      	mvns	r2, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 800110a:	400b      	ands	r3, r1
 800110c:	6013      	str	r3, [r2, #0]
   					   break;
 800110e:	e2be      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						ClrBit(GPIOA_CRH,((4*(pin-8))+2));
 8001110:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	3a08      	subs	r2, #8
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	3202      	adds	r2, #2
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	43d2      	mvns	r2, r2
 8001124:	4611      	mov	r1, r2
 8001126:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 8001128:	400b      	ands	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOA_CRH,((4*(pin-8))+3));
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	79ba      	ldrb	r2, [r7, #6]
 8001132:	3a08      	subs	r2, #8
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	3203      	adds	r2, #3
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4611      	mov	r1, r2
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 8001142:	430b      	orrs	r3, r1
 8001144:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOA_ODR,pin);
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	79ba      	ldrb	r2, [r7, #6]
 800114c:	2101      	movs	r1, #1
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	4611      	mov	r1, r2
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8001156:	430b      	orrs	r3, r1
 8001158:	6013      	str	r3, [r2, #0]
   					   break;
 800115a:	e298      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						ClrBit(GPIOA_CRH,((4*(pin-8))+2));
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	3a08      	subs	r2, #8
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	3202      	adds	r2, #2
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	43d2      	mvns	r2, r2
 8001170:	4611      	mov	r1, r2
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 8001174:	400b      	ands	r3, r1
 8001176:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOA_CRH,((4*(pin-8))+3));
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	3a08      	subs	r2, #8
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	3203      	adds	r2, #3
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4611      	mov	r1, r2
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <GPIO_PinDirection+0x2fc>)
 800118e:	430b      	orrs	r3, r1
 8001190:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_ODR,pin);
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	79ba      	ldrb	r2, [r7, #6]
 8001198:	2101      	movs	r1, #1
 800119a:	fa01 f202 	lsl.w	r2, r1, r2
 800119e:	43d2      	mvns	r2, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <GPIO_PinDirection+0x2f8>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
   					   break;
 80011a8:	e271      	b.n	800168e <GPIO_PinDirection+0x7d6>
 80011aa:	bf00      	nop
 80011ac:	40010800 	.word	0x40010800
 80011b0:	4001080c 	.word	0x4001080c
 80011b4:	40010804 	.word	0x40010804
   						ClrBit(GPIOA_CRH,((4*(pin-8))+2));
 80011b8:	4bac      	ldr	r3, [pc, #688]	; (800146c <GPIO_PinDirection+0x5b4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	79ba      	ldrb	r2, [r7, #6]
 80011be:	3a08      	subs	r2, #8
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	3202      	adds	r2, #2
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	43d2      	mvns	r2, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4aa7      	ldr	r2, [pc, #668]	; (800146c <GPIO_PinDirection+0x5b4>)
 80011d0:	400b      	ands	r3, r1
 80011d2:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_CRH,((4*(pin-8))+3));
 80011d4:	4ba5      	ldr	r3, [pc, #660]	; (800146c <GPIO_PinDirection+0x5b4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	3a08      	subs	r2, #8
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	3203      	adds	r2, #3
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	43d2      	mvns	r2, r2
 80011e8:	4611      	mov	r1, r2
 80011ea:	4aa0      	ldr	r2, [pc, #640]	; (800146c <GPIO_PinDirection+0x5b4>)
 80011ec:	400b      	ands	r3, r1
 80011ee:	6013      	str	r3, [r2, #0]
   					   break;
 80011f0:	e24d      	b.n	800168e <GPIO_PinDirection+0x7d6>
   						SetBit(GPIOA_CRH,((4*(pin-8))+2));
 80011f2:	4b9e      	ldr	r3, [pc, #632]	; (800146c <GPIO_PinDirection+0x5b4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	79ba      	ldrb	r2, [r7, #6]
 80011f8:	3a08      	subs	r2, #8
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	3202      	adds	r2, #2
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4611      	mov	r1, r2
 8001206:	4a99      	ldr	r2, [pc, #612]	; (800146c <GPIO_PinDirection+0x5b4>)
 8001208:	430b      	orrs	r3, r1
 800120a:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOA_CRH,((4*(pin-8))+3));
 800120c:	4b97      	ldr	r3, [pc, #604]	; (800146c <GPIO_PinDirection+0x5b4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	79ba      	ldrb	r2, [r7, #6]
 8001212:	3a08      	subs	r2, #8
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	3203      	adds	r2, #3
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	43d2      	mvns	r2, r2
 8001220:	4611      	mov	r1, r2
 8001222:	4a92      	ldr	r2, [pc, #584]	; (800146c <GPIO_PinDirection+0x5b4>)
 8001224:	400b      	ands	r3, r1
 8001226:	6013      	str	r3, [r2, #0]
   					   break;
 8001228:	bf00      	nop
 800122a:	e230      	b.n	800168e <GPIO_PinDirection+0x7d6>
   		   else if (pin_dir == OUTPUT_PIN)
 800122c:	797b      	ldrb	r3, [r7, #5]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f040 822c 	bne.w	800168c <GPIO_PinDirection+0x7d4>
   			   if(pin <= 7)
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b07      	cmp	r3, #7
 8001238:	f200 8109 	bhi.w	800144e <GPIO_PinDirection+0x596>
   				   switch(pin_mode)
 800123c:	793b      	ldrb	r3, [r7, #4]
 800123e:	2b03      	cmp	r3, #3
 8001240:	f200 80d2 	bhi.w	80013e8 <GPIO_PinDirection+0x530>
 8001244:	a201      	add	r2, pc, #4	; (adr r2, 800124c <GPIO_PinDirection+0x394>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	08001389 	.word	0x08001389
 8001250:	08001327 	.word	0x08001327
 8001254:	0800125d 	.word	0x0800125d
 8001258:	080012c1 	.word	0x080012c1
      				ClrBit(GPIOA_CRL,4*pin);
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	79ba      	ldrb	r2, [r7, #6]
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	43d2      	mvns	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	4a80      	ldr	r2, [pc, #512]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001270:	400b      	ands	r3, r1
 8001272:	6013      	str	r3, [r2, #0]
      				SetBit(GPIOA_CRL,((4*pin)+1));
 8001274:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	79ba      	ldrb	r2, [r7, #6]
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	3201      	adds	r2, #1
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	4611      	mov	r1, r2
 8001286:	4a7a      	ldr	r2, [pc, #488]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001288:	430b      	orrs	r3, r1
 800128a:	6013      	str	r3, [r2, #0]
      				SetBit(GPIOA_CRL,((4*pin)+2));
 800128c:	4b78      	ldr	r3, [pc, #480]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	79ba      	ldrb	r2, [r7, #6]
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	3202      	adds	r2, #2
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	4611      	mov	r1, r2
 800129e:	4a74      	ldr	r2, [pc, #464]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012a0:	430b      	orrs	r3, r1
 80012a2:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOA_CRL,((4*pin)+3));
 80012a4:	4b72      	ldr	r3, [pc, #456]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	3203      	adds	r2, #3
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	43d2      	mvns	r2, r2
 80012b6:	4611      	mov	r1, r2
 80012b8:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012ba:	400b      	ands	r3, r1
 80012bc:	6013      	str	r3, [r2, #0]
   					   break;
 80012be:	e1e6      	b.n	800168e <GPIO_PinDirection+0x7d6>
   					SetBit(GPIOA_CRL,4*pin);
 80012c0:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	79ba      	ldrb	r2, [r7, #6]
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	2101      	movs	r1, #1
 80012ca:	fa01 f202 	lsl.w	r2, r1, r2
 80012ce:	4611      	mov	r1, r2
 80012d0:	4a67      	ldr	r2, [pc, #412]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012d2:	430b      	orrs	r3, r1
 80012d4:	6013      	str	r3, [r2, #0]
   					ClrBit(GPIOA_CRL,((4*pin)+1));
 80012d6:	4b66      	ldr	r3, [pc, #408]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	79ba      	ldrb	r2, [r7, #6]
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	3201      	adds	r2, #1
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	43d2      	mvns	r2, r2
 80012e8:	4611      	mov	r1, r2
 80012ea:	4a61      	ldr	r2, [pc, #388]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012ec:	400b      	ands	r3, r1
 80012ee:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOA_CRL,((4*pin)+2));
 80012f0:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	79ba      	ldrb	r2, [r7, #6]
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	3202      	adds	r2, #2
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	43d2      	mvns	r2, r2
 8001302:	4611      	mov	r1, r2
 8001304:	4a5a      	ldr	r2, [pc, #360]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001306:	400b      	ands	r3, r1
 8001308:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOA_CRL,((4*pin)+3));
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	3203      	adds	r2, #3
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	43d2      	mvns	r2, r2
 800131c:	4611      	mov	r1, r2
 800131e:	4a54      	ldr	r2, [pc, #336]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001320:	400b      	ands	r3, r1
 8001322:	6013      	str	r3, [r2, #0]
   					   break;
 8001324:	e1b3      	b.n	800168e <GPIO_PinDirection+0x7d6>
        				SetBit(GPIOA_CRL,4*pin);
 8001326:	4b52      	ldr	r3, [pc, #328]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f202 	lsl.w	r2, r1, r2
 8001334:	4611      	mov	r1, r2
 8001336:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001338:	430b      	orrs	r3, r1
 800133a:	6013      	str	r3, [r2, #0]
        				SetBit(GPIOA_CRL,((4*pin)+1));
 800133c:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	3201      	adds	r2, #1
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	4611      	mov	r1, r2
 800134e:	4a48      	ldr	r2, [pc, #288]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001350:	430b      	orrs	r3, r1
 8001352:	6013      	str	r3, [r2, #0]
        				ClrBit(GPIOA_CRL,((4*pin)+2));
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	3202      	adds	r2, #2
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	43d2      	mvns	r2, r2
 8001366:	4611      	mov	r1, r2
 8001368:	4a41      	ldr	r2, [pc, #260]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800136a:	400b      	ands	r3, r1
 800136c:	6013      	str	r3, [r2, #0]
        				SetBit(GPIOA_CRL,((4*pin)+3));
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	79ba      	ldrb	r2, [r7, #6]
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	3203      	adds	r2, #3
 8001378:	2101      	movs	r1, #1
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	4611      	mov	r1, r2
 8001380:	4a3b      	ldr	r2, [pc, #236]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001382:	430b      	orrs	r3, r1
 8001384:	6013      	str	r3, [r2, #0]
   					   break;
 8001386:	e182      	b.n	800168e <GPIO_PinDirection+0x7d6>
       				SetBit(GPIOA_CRL,4*pin);
 8001388:	4b39      	ldr	r3, [pc, #228]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	79ba      	ldrb	r2, [r7, #6]
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	4611      	mov	r1, r2
 8001398:	4a35      	ldr	r2, [pc, #212]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800139a:	430b      	orrs	r3, r1
 800139c:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOA_CRL,((4*pin)+1));
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	79ba      	ldrb	r2, [r7, #6]
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	3201      	adds	r2, #1
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4611      	mov	r1, r2
 80013b0:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013b2:	430b      	orrs	r3, r1
 80013b4:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOA_CRL,((4*pin)+2));
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	79ba      	ldrb	r2, [r7, #6]
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	3202      	adds	r2, #2
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	4611      	mov	r1, r2
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013ca:	430b      	orrs	r3, r1
 80013cc:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOA_CRL,((4*pin)+3));
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	79ba      	ldrb	r2, [r7, #6]
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	3203      	adds	r2, #3
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4611      	mov	r1, r2
 80013e0:	4a23      	ldr	r2, [pc, #140]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6013      	str	r3, [r2, #0]
   					   break;
 80013e6:	e152      	b.n	800168e <GPIO_PinDirection+0x7d6>
         				ClrBit(GPIOA_CRL,4*pin);
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	43d2      	mvns	r2, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <GPIO_PinDirection+0x5b8>)
 80013fc:	400b      	ands	r3, r1
 80013fe:	6013      	str	r3, [r2, #0]
         				SetBit(GPIOA_CRL,((4*pin)+1));
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	79ba      	ldrb	r2, [r7, #6]
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	3201      	adds	r2, #1
 800140a:	2101      	movs	r1, #1
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	4611      	mov	r1, r2
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001414:	430b      	orrs	r3, r1
 8001416:	6013      	str	r3, [r2, #0]
         				SetBit(GPIOA_CRL,((4*pin)+2));
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	79ba      	ldrb	r2, [r7, #6]
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	3202      	adds	r2, #2
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f202 	lsl.w	r2, r1, r2
 8001428:	4611      	mov	r1, r2
 800142a:	4a11      	ldr	r2, [pc, #68]	; (8001470 <GPIO_PinDirection+0x5b8>)
 800142c:	430b      	orrs	r3, r1
 800142e:	6013      	str	r3, [r2, #0]
         				ClrBit(GPIOA_CRL,((4*pin)+3));
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	79ba      	ldrb	r2, [r7, #6]
 8001436:	0092      	lsls	r2, r2, #2
 8001438:	3203      	adds	r2, #3
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	43d2      	mvns	r2, r2
 8001442:	4611      	mov	r1, r2
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <GPIO_PinDirection+0x5b8>)
 8001446:	400b      	ands	r3, r1
 8001448:	6013      	str	r3, [r2, #0]
   					   break;
 800144a:	bf00      	nop
 800144c:	e11f      	b.n	800168e <GPIO_PinDirection+0x7d6>
   	   				   switch(pin_mode)
 800144e:	793b      	ldrb	r3, [r7, #4]
 8001450:	2b03      	cmp	r3, #3
 8001452:	f200 80e5 	bhi.w	8001620 <GPIO_PinDirection+0x768>
 8001456:	a201      	add	r2, pc, #4	; (adr r2, 800145c <GPIO_PinDirection+0x5a4>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	080015b9 	.word	0x080015b9
 8001460:	0800154f 	.word	0x0800154f
 8001464:	08001475 	.word	0x08001475
 8001468:	080014e1 	.word	0x080014e1
 800146c:	40010804 	.word	0x40010804
 8001470:	40010800 	.word	0x40010800
   	      				ClrBit(GPIOA_CRH,4*(pin-8));
 8001474:	4bac      	ldr	r3, [pc, #688]	; (8001728 <GPIO_PinDirection+0x870>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	79ba      	ldrb	r2, [r7, #6]
 800147a:	3a08      	subs	r2, #8
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	43d2      	mvns	r2, r2
 8001486:	4611      	mov	r1, r2
 8001488:	4aa7      	ldr	r2, [pc, #668]	; (8001728 <GPIO_PinDirection+0x870>)
 800148a:	400b      	ands	r3, r1
 800148c:	6013      	str	r3, [r2, #0]
   	      				SetBit(GPIOA_CRH,((4*(pin-8))+1));
 800148e:	4ba6      	ldr	r3, [pc, #664]	; (8001728 <GPIO_PinDirection+0x870>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	79ba      	ldrb	r2, [r7, #6]
 8001494:	3a08      	subs	r2, #8
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	3201      	adds	r2, #1
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4611      	mov	r1, r2
 80014a2:	4aa1      	ldr	r2, [pc, #644]	; (8001728 <GPIO_PinDirection+0x870>)
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6013      	str	r3, [r2, #0]
   	      				SetBit(GPIOA_CRH,((4*(pin-8))+2));
 80014a8:	4b9f      	ldr	r3, [pc, #636]	; (8001728 <GPIO_PinDirection+0x870>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	79ba      	ldrb	r2, [r7, #6]
 80014ae:	3a08      	subs	r2, #8
 80014b0:	0092      	lsls	r2, r2, #2
 80014b2:	3202      	adds	r2, #2
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	4611      	mov	r1, r2
 80014bc:	4a9a      	ldr	r2, [pc, #616]	; (8001728 <GPIO_PinDirection+0x870>)
 80014be:	430b      	orrs	r3, r1
 80014c0:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOA_CRH,((4*(pin-8))+3));
 80014c2:	4b99      	ldr	r3, [pc, #612]	; (8001728 <GPIO_PinDirection+0x870>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	79ba      	ldrb	r2, [r7, #6]
 80014c8:	3a08      	subs	r2, #8
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	3203      	adds	r2, #3
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	43d2      	mvns	r2, r2
 80014d6:	4611      	mov	r1, r2
 80014d8:	4a93      	ldr	r2, [pc, #588]	; (8001728 <GPIO_PinDirection+0x870>)
 80014da:	400b      	ands	r3, r1
 80014dc:	6013      	str	r3, [r2, #0]
   	   					   break;
 80014de:	e0d6      	b.n	800168e <GPIO_PinDirection+0x7d6>
   	   					SetBit(GPIOA_CRH,(4*(pin-8)));
 80014e0:	4b91      	ldr	r3, [pc, #580]	; (8001728 <GPIO_PinDirection+0x870>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	79ba      	ldrb	r2, [r7, #6]
 80014e6:	3a08      	subs	r2, #8
 80014e8:	0092      	lsls	r2, r2, #2
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4611      	mov	r1, r2
 80014f2:	4a8d      	ldr	r2, [pc, #564]	; (8001728 <GPIO_PinDirection+0x870>)
 80014f4:	430b      	orrs	r3, r1
 80014f6:	6013      	str	r3, [r2, #0]
   	   					ClrBit(GPIOA_CRH,((4*(pin-8))+1));
 80014f8:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <GPIO_PinDirection+0x870>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	79ba      	ldrb	r2, [r7, #6]
 80014fe:	3a08      	subs	r2, #8
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	3201      	adds	r2, #1
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	43d2      	mvns	r2, r2
 800150c:	4611      	mov	r1, r2
 800150e:	4a86      	ldr	r2, [pc, #536]	; (8001728 <GPIO_PinDirection+0x870>)
 8001510:	400b      	ands	r3, r1
 8001512:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOA_CRH,((4*(pin-8))+2));
 8001514:	4b84      	ldr	r3, [pc, #528]	; (8001728 <GPIO_PinDirection+0x870>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	79ba      	ldrb	r2, [r7, #6]
 800151a:	3a08      	subs	r2, #8
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	3202      	adds	r2, #2
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	43d2      	mvns	r2, r2
 8001528:	4611      	mov	r1, r2
 800152a:	4a7f      	ldr	r2, [pc, #508]	; (8001728 <GPIO_PinDirection+0x870>)
 800152c:	400b      	ands	r3, r1
 800152e:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOA_CRH,((4*(pin-8))+3));
 8001530:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <GPIO_PinDirection+0x870>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	79ba      	ldrb	r2, [r7, #6]
 8001536:	3a08      	subs	r2, #8
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	3203      	adds	r2, #3
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	43d2      	mvns	r2, r2
 8001544:	4611      	mov	r1, r2
 8001546:	4a78      	ldr	r2, [pc, #480]	; (8001728 <GPIO_PinDirection+0x870>)
 8001548:	400b      	ands	r3, r1
 800154a:	6013      	str	r3, [r2, #0]
   	   					   break;
 800154c:	e09f      	b.n	800168e <GPIO_PinDirection+0x7d6>
   	        				SetBit(GPIOA_CRH,4*(pin-8));
 800154e:	4b76      	ldr	r3, [pc, #472]	; (8001728 <GPIO_PinDirection+0x870>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	79ba      	ldrb	r2, [r7, #6]
 8001554:	3a08      	subs	r2, #8
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	4611      	mov	r1, r2
 8001560:	4a71      	ldr	r2, [pc, #452]	; (8001728 <GPIO_PinDirection+0x870>)
 8001562:	430b      	orrs	r3, r1
 8001564:	6013      	str	r3, [r2, #0]
   	        				SetBit(GPIOA_CRH,((4*(pin-8))+1));
 8001566:	4b70      	ldr	r3, [pc, #448]	; (8001728 <GPIO_PinDirection+0x870>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	79ba      	ldrb	r2, [r7, #6]
 800156c:	3a08      	subs	r2, #8
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	3201      	adds	r2, #1
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4611      	mov	r1, r2
 800157a:	4a6b      	ldr	r2, [pc, #428]	; (8001728 <GPIO_PinDirection+0x870>)
 800157c:	430b      	orrs	r3, r1
 800157e:	6013      	str	r3, [r2, #0]
   	        				ClrBit(GPIOA_CRH,((4*(pin-8))+2));
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <GPIO_PinDirection+0x870>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	79ba      	ldrb	r2, [r7, #6]
 8001586:	3a08      	subs	r2, #8
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	3202      	adds	r2, #2
 800158c:	2101      	movs	r1, #1
 800158e:	fa01 f202 	lsl.w	r2, r1, r2
 8001592:	43d2      	mvns	r2, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4a64      	ldr	r2, [pc, #400]	; (8001728 <GPIO_PinDirection+0x870>)
 8001598:	400b      	ands	r3, r1
 800159a:	6013      	str	r3, [r2, #0]
   	        				SetBit(GPIOA_CRH,((4*(pin-8))+3));
 800159c:	4b62      	ldr	r3, [pc, #392]	; (8001728 <GPIO_PinDirection+0x870>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	79ba      	ldrb	r2, [r7, #6]
 80015a2:	3a08      	subs	r2, #8
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	3203      	adds	r2, #3
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	4611      	mov	r1, r2
 80015b0:	4a5d      	ldr	r2, [pc, #372]	; (8001728 <GPIO_PinDirection+0x870>)
 80015b2:	430b      	orrs	r3, r1
 80015b4:	6013      	str	r3, [r2, #0]
   	   					   break;
 80015b6:	e06a      	b.n	800168e <GPIO_PinDirection+0x7d6>
   	       				SetBit(GPIOA_CRH,4*(pin-8));
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <GPIO_PinDirection+0x870>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	79ba      	ldrb	r2, [r7, #6]
 80015be:	3a08      	subs	r2, #8
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	4611      	mov	r1, r2
 80015ca:	4a57      	ldr	r2, [pc, #348]	; (8001728 <GPIO_PinDirection+0x870>)
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOA_CRH,((4*(pin-8))+1));
 80015d0:	4b55      	ldr	r3, [pc, #340]	; (8001728 <GPIO_PinDirection+0x870>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	79ba      	ldrb	r2, [r7, #6]
 80015d6:	3a08      	subs	r2, #8
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	3201      	adds	r2, #1
 80015dc:	2101      	movs	r1, #1
 80015de:	fa01 f202 	lsl.w	r2, r1, r2
 80015e2:	4611      	mov	r1, r2
 80015e4:	4a50      	ldr	r2, [pc, #320]	; (8001728 <GPIO_PinDirection+0x870>)
 80015e6:	430b      	orrs	r3, r1
 80015e8:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOA_CRH,((4*(pin-8))+2));
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <GPIO_PinDirection+0x870>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	79ba      	ldrb	r2, [r7, #6]
 80015f0:	3a08      	subs	r2, #8
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	3202      	adds	r2, #2
 80015f6:	2101      	movs	r1, #1
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	4611      	mov	r1, r2
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <GPIO_PinDirection+0x870>)
 8001600:	430b      	orrs	r3, r1
 8001602:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOA_CRH,((4*(pin-8))+3));
 8001604:	4b48      	ldr	r3, [pc, #288]	; (8001728 <GPIO_PinDirection+0x870>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	79ba      	ldrb	r2, [r7, #6]
 800160a:	3a08      	subs	r2, #8
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	3203      	adds	r2, #3
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4a43      	ldr	r2, [pc, #268]	; (8001728 <GPIO_PinDirection+0x870>)
 800161a:	430b      	orrs	r3, r1
 800161c:	6013      	str	r3, [r2, #0]
   	   					   break;
 800161e:	e036      	b.n	800168e <GPIO_PinDirection+0x7d6>
   	         				ClrBit(GPIOA_CRH,4*(pin-8));
 8001620:	4b41      	ldr	r3, [pc, #260]	; (8001728 <GPIO_PinDirection+0x870>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	3a08      	subs	r2, #8
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	43d2      	mvns	r2, r2
 8001632:	4611      	mov	r1, r2
 8001634:	4a3c      	ldr	r2, [pc, #240]	; (8001728 <GPIO_PinDirection+0x870>)
 8001636:	400b      	ands	r3, r1
 8001638:	6013      	str	r3, [r2, #0]
   	         				SetBit(GPIOA_CRH,((4*(pin-8))+1));
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <GPIO_PinDirection+0x870>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	79ba      	ldrb	r2, [r7, #6]
 8001640:	3a08      	subs	r2, #8
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	3201      	adds	r2, #1
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4611      	mov	r1, r2
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <GPIO_PinDirection+0x870>)
 8001650:	430b      	orrs	r3, r1
 8001652:	6013      	str	r3, [r2, #0]
   	         				SetBit(GPIOA_CRH,((4*(pin-8))+2));
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <GPIO_PinDirection+0x870>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	79ba      	ldrb	r2, [r7, #6]
 800165a:	3a08      	subs	r2, #8
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	3202      	adds	r2, #2
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f202 	lsl.w	r2, r1, r2
 8001666:	4611      	mov	r1, r2
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <GPIO_PinDirection+0x870>)
 800166a:	430b      	orrs	r3, r1
 800166c:	6013      	str	r3, [r2, #0]
   	         				ClrBit(GPIOA_CRH,((4*(pin-8))+3));
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <GPIO_PinDirection+0x870>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	79ba      	ldrb	r2, [r7, #6]
 8001674:	3a08      	subs	r2, #8
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	3203      	adds	r2, #3
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	43d2      	mvns	r2, r2
 8001682:	4611      	mov	r1, r2
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <GPIO_PinDirection+0x870>)
 8001686:	400b      	ands	r3, r1
 8001688:	6013      	str	r3, [r2, #0]
   	   					   break;
 800168a:	e000      	b.n	800168e <GPIO_PinDirection+0x7d6>
   		   }
 800168c:	bf00      	nop
   		   break;
 800168e:	f000 bfab 	b.w	80025e8 <GPIO_PinDirection+0x1730>
   		   if(pin_dir == INPUT_PIN)
 8001692:	797b      	ldrb	r3, [r7, #5]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f040 8198 	bne.w	80019ca <GPIO_PinDirection+0xb12>
   			   if(pin <= 7)
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	2b07      	cmp	r3, #7
 800169e:	f200 80c6 	bhi.w	800182e <GPIO_PinDirection+0x976>
   				   ClrBit(GPIOB_CRL,4*pin);
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <GPIO_PinDirection+0x874>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	79ba      	ldrb	r2, [r7, #6]
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	43d2      	mvns	r2, r2
 80016b2:	4611      	mov	r1, r2
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <GPIO_PinDirection+0x874>)
 80016b6:	400b      	ands	r3, r1
 80016b8:	6013      	str	r3, [r2, #0]
   				   ClrBit(GPIOB_CRL,((4*pin)+1));
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <GPIO_PinDirection+0x874>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	79ba      	ldrb	r2, [r7, #6]
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	3201      	adds	r2, #1
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	43d2      	mvns	r2, r2
 80016cc:	4611      	mov	r1, r2
 80016ce:	4a17      	ldr	r2, [pc, #92]	; (800172c <GPIO_PinDirection+0x874>)
 80016d0:	400b      	ands	r3, r1
 80016d2:	6013      	str	r3, [r2, #0]
   				   switch(pin_mode)
 80016d4:	793b      	ldrb	r3, [r7, #4]
 80016d6:	3b04      	subs	r3, #4
 80016d8:	2b03      	cmp	r3, #3
 80016da:	f200 808d 	bhi.w	80017f8 <GPIO_PinDirection+0x940>
 80016de:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <GPIO_PinDirection+0x82c>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	080017c3 	.word	0x080017c3
 80016e8:	080016f5 	.word	0x080016f5
 80016ec:	08001731 	.word	0x08001731
 80016f0:	08001779 	.word	0x08001779
   						SetBit(GPIOB_CRL,((4*pin)+2));
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <GPIO_PinDirection+0x874>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	79ba      	ldrb	r2, [r7, #6]
 80016fa:	0092      	lsls	r2, r2, #2
 80016fc:	3202      	adds	r2, #2
 80016fe:	2101      	movs	r1, #1
 8001700:	fa01 f202 	lsl.w	r2, r1, r2
 8001704:	4611      	mov	r1, r2
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <GPIO_PinDirection+0x874>)
 8001708:	430b      	orrs	r3, r1
 800170a:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_CRL,((4*pin)+3));
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <GPIO_PinDirection+0x874>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	79ba      	ldrb	r2, [r7, #6]
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	3203      	adds	r2, #3
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f202 	lsl.w	r2, r1, r2
 800171c:	43d2      	mvns	r2, r2
 800171e:	4611      	mov	r1, r2
 8001720:	4a02      	ldr	r2, [pc, #8]	; (800172c <GPIO_PinDirection+0x874>)
 8001722:	400b      	ands	r3, r1
 8001724:	6013      	str	r3, [r2, #0]
   					   break;
 8001726:	e386      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
 8001728:	40010804 	.word	0x40010804
 800172c:	40010c00 	.word	0x40010c00
   						ClrBit(GPIOB_CRL,((4*pin)+2));
 8001730:	4bb1      	ldr	r3, [pc, #708]	; (80019f8 <GPIO_PinDirection+0xb40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	79ba      	ldrb	r2, [r7, #6]
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	3202      	adds	r2, #2
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	43d2      	mvns	r2, r2
 8001742:	4611      	mov	r1, r2
 8001744:	4aac      	ldr	r2, [pc, #688]	; (80019f8 <GPIO_PinDirection+0xb40>)
 8001746:	400b      	ands	r3, r1
 8001748:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOB_CRL,((4*pin)+3));
 800174a:	4bab      	ldr	r3, [pc, #684]	; (80019f8 <GPIO_PinDirection+0xb40>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	79ba      	ldrb	r2, [r7, #6]
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	3203      	adds	r2, #3
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	4611      	mov	r1, r2
 800175c:	4aa6      	ldr	r2, [pc, #664]	; (80019f8 <GPIO_PinDirection+0xb40>)
 800175e:	430b      	orrs	r3, r1
 8001760:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOB_ODR,pin);
 8001762:	4ba6      	ldr	r3, [pc, #664]	; (80019fc <GPIO_PinDirection+0xb44>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	79ba      	ldrb	r2, [r7, #6]
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4611      	mov	r1, r2
 8001770:	4aa2      	ldr	r2, [pc, #648]	; (80019fc <GPIO_PinDirection+0xb44>)
 8001772:	430b      	orrs	r3, r1
 8001774:	6013      	str	r3, [r2, #0]
   					   break;
 8001776:	e35e      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						ClrBit(GPIOB_CRL,((4*pin)+2));
 8001778:	4b9f      	ldr	r3, [pc, #636]	; (80019f8 <GPIO_PinDirection+0xb40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	79ba      	ldrb	r2, [r7, #6]
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	3202      	adds	r2, #2
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	43d2      	mvns	r2, r2
 800178a:	4611      	mov	r1, r2
 800178c:	4a9a      	ldr	r2, [pc, #616]	; (80019f8 <GPIO_PinDirection+0xb40>)
 800178e:	400b      	ands	r3, r1
 8001790:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOB_CRL,((4*pin)+3));
 8001792:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <GPIO_PinDirection+0xb40>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	79ba      	ldrb	r2, [r7, #6]
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	3203      	adds	r2, #3
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4611      	mov	r1, r2
 80017a4:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <GPIO_PinDirection+0xb40>)
 80017a6:	430b      	orrs	r3, r1
 80017a8:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_ODR,pin);
 80017aa:	4b94      	ldr	r3, [pc, #592]	; (80019fc <GPIO_PinDirection+0xb44>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	79ba      	ldrb	r2, [r7, #6]
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	43d2      	mvns	r2, r2
 80017b8:	4611      	mov	r1, r2
 80017ba:	4a90      	ldr	r2, [pc, #576]	; (80019fc <GPIO_PinDirection+0xb44>)
 80017bc:	400b      	ands	r3, r1
 80017be:	6013      	str	r3, [r2, #0]
   					   break;
 80017c0:	e339      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						ClrBit(GPIOB_CRL,((4*pin)+2));
 80017c2:	4b8d      	ldr	r3, [pc, #564]	; (80019f8 <GPIO_PinDirection+0xb40>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	79ba      	ldrb	r2, [r7, #6]
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	3202      	adds	r2, #2
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f202 	lsl.w	r2, r1, r2
 80017d2:	43d2      	mvns	r2, r2
 80017d4:	4611      	mov	r1, r2
 80017d6:	4a88      	ldr	r2, [pc, #544]	; (80019f8 <GPIO_PinDirection+0xb40>)
 80017d8:	400b      	ands	r3, r1
 80017da:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_CRL,((4*pin)+3));
 80017dc:	4b86      	ldr	r3, [pc, #536]	; (80019f8 <GPIO_PinDirection+0xb40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	79ba      	ldrb	r2, [r7, #6]
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	3203      	adds	r2, #3
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	43d2      	mvns	r2, r2
 80017ee:	4611      	mov	r1, r2
 80017f0:	4a81      	ldr	r2, [pc, #516]	; (80019f8 <GPIO_PinDirection+0xb40>)
 80017f2:	400b      	ands	r3, r1
 80017f4:	6013      	str	r3, [r2, #0]
   					   break;
 80017f6:	e31e      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						SetBit(GPIOB_CRL,((4*pin)+2));
 80017f8:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <GPIO_PinDirection+0xb40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	79ba      	ldrb	r2, [r7, #6]
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	3202      	adds	r2, #2
 8001802:	2101      	movs	r1, #1
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	4611      	mov	r1, r2
 800180a:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <GPIO_PinDirection+0xb40>)
 800180c:	430b      	orrs	r3, r1
 800180e:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_CRL,((4*pin)+3));
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <GPIO_PinDirection+0xb40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	79ba      	ldrb	r2, [r7, #6]
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	3203      	adds	r2, #3
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	43d2      	mvns	r2, r2
 8001822:	4611      	mov	r1, r2
 8001824:	4a74      	ldr	r2, [pc, #464]	; (80019f8 <GPIO_PinDirection+0xb40>)
 8001826:	400b      	ands	r3, r1
 8001828:	6013      	str	r3, [r2, #0]
   					   break;
 800182a:	bf00      	nop
 800182c:	e303      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   				    ClrBit(GPIOB_CRH,4*(pin-8));
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	79ba      	ldrb	r2, [r7, #6]
 8001834:	3a08      	subs	r2, #8
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	43d2      	mvns	r2, r2
 8001840:	4611      	mov	r1, r2
 8001842:	4a6f      	ldr	r2, [pc, #444]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001844:	400b      	ands	r3, r1
 8001846:	6013      	str	r3, [r2, #0]
   				    ClrBit(GPIOB_CRH,((4*(pin-8))+1));
 8001848:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <GPIO_PinDirection+0xb48>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	79ba      	ldrb	r2, [r7, #6]
 800184e:	3a08      	subs	r2, #8
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	3201      	adds	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	43d2      	mvns	r2, r2
 800185c:	4611      	mov	r1, r2
 800185e:	4a68      	ldr	r2, [pc, #416]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001860:	400b      	ands	r3, r1
 8001862:	6013      	str	r3, [r2, #0]
   				   switch(pin_mode)
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	3b04      	subs	r3, #4
 8001868:	2b03      	cmp	r3, #3
 800186a:	f200 8091 	bhi.w	8001990 <GPIO_PinDirection+0xad8>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <GPIO_PinDirection+0x9bc>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	08001957 	.word	0x08001957
 8001878:	08001885 	.word	0x08001885
 800187c:	080018bd 	.word	0x080018bd
 8001880:	08001909 	.word	0x08001909
   						SetBit(GPIOB_CRH,((4*(pin-8))+2));
 8001884:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	79ba      	ldrb	r2, [r7, #6]
 800188a:	3a08      	subs	r2, #8
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	3202      	adds	r2, #2
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4611      	mov	r1, r2
 8001898:	4a59      	ldr	r2, [pc, #356]	; (8001a00 <GPIO_PinDirection+0xb48>)
 800189a:	430b      	orrs	r3, r1
 800189c:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_CRH,((4*(pin-8))+3));
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	79ba      	ldrb	r2, [r7, #6]
 80018a4:	3a08      	subs	r2, #8
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	3203      	adds	r2, #3
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	43d2      	mvns	r2, r2
 80018b2:	4611      	mov	r1, r2
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80018b6:	400b      	ands	r3, r1
 80018b8:	6013      	str	r3, [r2, #0]
   					   break;
 80018ba:	e2bc      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						ClrBit(GPIOB_CRH,((4*(pin-8))+2));
 80018bc:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	3a08      	subs	r2, #8
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	3202      	adds	r2, #2
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	43d2      	mvns	r2, r2
 80018d0:	4611      	mov	r1, r2
 80018d2:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80018d4:	400b      	ands	r3, r1
 80018d6:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOB_CRH,((4*(pin-8))+3));
 80018d8:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	79ba      	ldrb	r2, [r7, #6]
 80018de:	3a08      	subs	r2, #8
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	3203      	adds	r2, #3
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	4611      	mov	r1, r2
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80018ee:	430b      	orrs	r3, r1
 80018f0:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOB_ODR,pin);
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <GPIO_PinDirection+0xb44>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	79ba      	ldrb	r2, [r7, #6]
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4611      	mov	r1, r2
 8001900:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <GPIO_PinDirection+0xb44>)
 8001902:	430b      	orrs	r3, r1
 8001904:	6013      	str	r3, [r2, #0]
   					   break;
 8001906:	e296      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						ClrBit(GPIOB_CRH,((4*(pin-8))+2));
 8001908:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <GPIO_PinDirection+0xb48>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	79ba      	ldrb	r2, [r7, #6]
 800190e:	3a08      	subs	r2, #8
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	3202      	adds	r2, #2
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	43d2      	mvns	r2, r2
 800191c:	4611      	mov	r1, r2
 800191e:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001920:	400b      	ands	r3, r1
 8001922:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOB_CRH,((4*(pin-8))+3));
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	79ba      	ldrb	r2, [r7, #6]
 800192a:	3a08      	subs	r2, #8
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	3203      	adds	r2, #3
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4611      	mov	r1, r2
 8001938:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <GPIO_PinDirection+0xb48>)
 800193a:	430b      	orrs	r3, r1
 800193c:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_ODR,pin);
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <GPIO_PinDirection+0xb44>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	79ba      	ldrb	r2, [r7, #6]
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	43d2      	mvns	r2, r2
 800194c:	4611      	mov	r1, r2
 800194e:	4a2b      	ldr	r2, [pc, #172]	; (80019fc <GPIO_PinDirection+0xb44>)
 8001950:	400b      	ands	r3, r1
 8001952:	6013      	str	r3, [r2, #0]
   					   break;
 8001954:	e26f      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						ClrBit(GPIOB_CRH,((4*(pin-8))+2));
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	79ba      	ldrb	r2, [r7, #6]
 800195c:	3a08      	subs	r2, #8
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	3202      	adds	r2, #2
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	43d2      	mvns	r2, r2
 800196a:	4611      	mov	r1, r2
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <GPIO_PinDirection+0xb48>)
 800196e:	400b      	ands	r3, r1
 8001970:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_CRH,((4*(pin-8))+3));
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	79ba      	ldrb	r2, [r7, #6]
 8001978:	3a08      	subs	r2, #8
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	3203      	adds	r2, #3
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	43d2      	mvns	r2, r2
 8001986:	4611      	mov	r1, r2
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <GPIO_PinDirection+0xb48>)
 800198a:	400b      	ands	r3, r1
 800198c:	6013      	str	r3, [r2, #0]
   					   break;
 800198e:	e252      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   						SetBit(GPIOB_CRH,((4*(pin-8))+2));
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <GPIO_PinDirection+0xb48>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	79ba      	ldrb	r2, [r7, #6]
 8001996:	3a08      	subs	r2, #8
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	3202      	adds	r2, #2
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	4611      	mov	r1, r2
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80019a6:	430b      	orrs	r3, r1
 80019a8:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOB_CRH,((4*(pin-8))+3));
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	79ba      	ldrb	r2, [r7, #6]
 80019b0:	3a08      	subs	r2, #8
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	3203      	adds	r2, #3
 80019b6:	2101      	movs	r1, #1
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	43d2      	mvns	r2, r2
 80019be:	4611      	mov	r1, r2
 80019c0:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <GPIO_PinDirection+0xb48>)
 80019c2:	400b      	ands	r3, r1
 80019c4:	6013      	str	r3, [r2, #0]
   					   break;
 80019c6:	bf00      	nop
 80019c8:	e235      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   		   else if (pin_dir == OUTPUT_PIN)
 80019ca:	797b      	ldrb	r3, [r7, #5]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	f040 8231 	bne.w	8001e34 <GPIO_PinDirection+0xf7c>
   			   if(pin <= 7)
 80019d2:	79bb      	ldrb	r3, [r7, #6]
 80019d4:	2b07      	cmp	r3, #7
 80019d6:	f200 810e 	bhi.w	8001bf6 <GPIO_PinDirection+0xd3e>
   				   switch(pin_mode)
 80019da:	793b      	ldrb	r3, [r7, #4]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	f200 80d7 	bhi.w	8001b90 <GPIO_PinDirection+0xcd8>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <GPIO_PinDirection+0xb30>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	08001b31 	.word	0x08001b31
 80019ec:	08001acf 	.word	0x08001acf
 80019f0:	08001a05 	.word	0x08001a05
 80019f4:	08001a69 	.word	0x08001a69
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40010c0c 	.word	0x40010c0c
 8001a00:	40010c04 	.word	0x40010c04
      				ClrBit(GPIOB_CRL,4*pin);
 8001a04:	4b9e      	ldr	r3, [pc, #632]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	79ba      	ldrb	r2, [r7, #6]
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	43d2      	mvns	r2, r2
 8001a14:	4611      	mov	r1, r2
 8001a16:	4a9a      	ldr	r2, [pc, #616]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a18:	400b      	ands	r3, r1
 8001a1a:	6013      	str	r3, [r2, #0]
      				SetBit(GPIOB_CRL,((4*pin)+1));
 8001a1c:	4b98      	ldr	r3, [pc, #608]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	79ba      	ldrb	r2, [r7, #6]
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	3201      	adds	r2, #1
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4a94      	ldr	r2, [pc, #592]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6013      	str	r3, [r2, #0]
      				SetBit(GPIOB_CRL,((4*pin)+2));
 8001a34:	4b92      	ldr	r3, [pc, #584]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	79ba      	ldrb	r2, [r7, #6]
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	3202      	adds	r2, #2
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	4611      	mov	r1, r2
 8001a46:	4a8e      	ldr	r2, [pc, #568]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOB_CRL,((4*pin)+3));
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	79ba      	ldrb	r2, [r7, #6]
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	3203      	adds	r2, #3
 8001a56:	2101      	movs	r1, #1
 8001a58:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5c:	43d2      	mvns	r2, r2
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4a87      	ldr	r2, [pc, #540]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a62:	400b      	ands	r3, r1
 8001a64:	6013      	str	r3, [r2, #0]
   					   break;
 8001a66:	e1e6      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   					SetBit(GPIOB_CRL,4*pin);
 8001a68:	4b85      	ldr	r3, [pc, #532]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	79ba      	ldrb	r2, [r7, #6]
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4611      	mov	r1, r2
 8001a78:	4a81      	ldr	r2, [pc, #516]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6013      	str	r3, [r2, #0]
   					ClrBit(GPIOB_CRL,((4*pin)+1));
 8001a7e:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	79ba      	ldrb	r2, [r7, #6]
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	3201      	adds	r2, #1
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	43d2      	mvns	r2, r2
 8001a90:	4611      	mov	r1, r2
 8001a92:	4a7b      	ldr	r2, [pc, #492]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a94:	400b      	ands	r3, r1
 8001a96:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOB_CRL,((4*pin)+2));
 8001a98:	4b79      	ldr	r3, [pc, #484]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	79ba      	ldrb	r2, [r7, #6]
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	3202      	adds	r2, #2
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	43d2      	mvns	r2, r2
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4a74      	ldr	r2, [pc, #464]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001aae:	400b      	ands	r3, r1
 8001ab0:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOB_CRL,((4*pin)+3));
 8001ab2:	4b73      	ldr	r3, [pc, #460]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	79ba      	ldrb	r2, [r7, #6]
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	3203      	adds	r2, #3
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac2:	43d2      	mvns	r2, r2
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001ac8:	400b      	ands	r3, r1
 8001aca:	6013      	str	r3, [r2, #0]
   					   break;
 8001acc:	e1b3      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
        				SetBit(GPIOB_CRL,4*pin);
 8001ace:	4b6c      	ldr	r3, [pc, #432]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	79ba      	ldrb	r2, [r7, #6]
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	4611      	mov	r1, r2
 8001ade:	4a68      	ldr	r2, [pc, #416]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6013      	str	r3, [r2, #0]
        				SetBit(GPIOB_CRL,((4*pin)+1));
 8001ae4:	4b66      	ldr	r3, [pc, #408]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	79ba      	ldrb	r2, [r7, #6]
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	3201      	adds	r2, #1
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4611      	mov	r1, r2
 8001af6:	4a62      	ldr	r2, [pc, #392]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6013      	str	r3, [r2, #0]
        				ClrBit(GPIOB_CRL,((4*pin)+2));
 8001afc:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	79ba      	ldrb	r2, [r7, #6]
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	3202      	adds	r2, #2
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	43d2      	mvns	r2, r2
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b12:	400b      	ands	r3, r1
 8001b14:	6013      	str	r3, [r2, #0]
        				SetBit(GPIOB_CRL,((4*pin)+3));
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	79ba      	ldrb	r2, [r7, #6]
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	3203      	adds	r2, #3
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4611      	mov	r1, r2
 8001b28:	4a55      	ldr	r2, [pc, #340]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6013      	str	r3, [r2, #0]
   					   break;
 8001b2e:	e182      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
       				SetBit(GPIOB_CRL,4*pin);
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	79ba      	ldrb	r2, [r7, #6]
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4a4f      	ldr	r2, [pc, #316]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOB_CRL,((4*pin)+1));
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	79ba      	ldrb	r2, [r7, #6]
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	3201      	adds	r2, #1
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f202 	lsl.w	r2, r1, r2
 8001b56:	4611      	mov	r1, r2
 8001b58:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOB_CRL,((4*pin)+2));
 8001b5e:	4b48      	ldr	r3, [pc, #288]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	79ba      	ldrb	r2, [r7, #6]
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	3202      	adds	r2, #2
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOB_CRL,((4*pin)+3));
 8001b76:	4b42      	ldr	r3, [pc, #264]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	79ba      	ldrb	r2, [r7, #6]
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	3203      	adds	r2, #3
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4611      	mov	r1, r2
 8001b88:	4a3d      	ldr	r2, [pc, #244]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6013      	str	r3, [r2, #0]
   					   break;
 8001b8e:	e152      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
         				ClrBit(GPIOB_CRL,4*pin);
 8001b90:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	79ba      	ldrb	r2, [r7, #6]
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	43d2      	mvns	r2, r2
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4a37      	ldr	r2, [pc, #220]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	6013      	str	r3, [r2, #0]
         				SetBit(GPIOB_CRL,((4*pin)+1));
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	79ba      	ldrb	r2, [r7, #6]
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	3201      	adds	r2, #1
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6013      	str	r3, [r2, #0]
         				SetBit(GPIOB_CRL,((4*pin)+2));
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	79ba      	ldrb	r2, [r7, #6]
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	3202      	adds	r2, #2
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4a2b      	ldr	r2, [pc, #172]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6013      	str	r3, [r2, #0]
         				ClrBit(GPIOB_CRL,((4*pin)+3));
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	79ba      	ldrb	r2, [r7, #6]
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	3203      	adds	r2, #3
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	43d2      	mvns	r2, r2
 8001bea:	4611      	mov	r1, r2
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <GPIO_PinDirection+0xdc8>)
 8001bee:	400b      	ands	r3, r1
 8001bf0:	6013      	str	r3, [r2, #0]
   					   break;
 8001bf2:	bf00      	nop
 8001bf4:	e11f      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   	   				   switch(pin_mode)
 8001bf6:	793b      	ldrb	r3, [r7, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	f200 80e5 	bhi.w	8001dc8 <GPIO_PinDirection+0xf10>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <GPIO_PinDirection+0xd4c>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001d61 	.word	0x08001d61
 8001c08:	08001cf7 	.word	0x08001cf7
 8001c0c:	08001c15 	.word	0x08001c15
 8001c10:	08001c89 	.word	0x08001c89
   	      				ClrBit(GPIOB_CRH,4*(pin-8));
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	79ba      	ldrb	r2, [r7, #6]
 8001c1a:	3a08      	subs	r2, #8
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	4611      	mov	r1, r2
 8001c28:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	6013      	str	r3, [r2, #0]
   	      				SetBit(GPIOB_CRH,((4*(pin-8))+1));
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	79ba      	ldrb	r2, [r7, #6]
 8001c34:	3a08      	subs	r2, #8
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	3201      	adds	r2, #1
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	4611      	mov	r1, r2
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6013      	str	r3, [r2, #0]
   	      				SetBit(GPIOB_CRH,((4*(pin-8))+2));
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	79ba      	ldrb	r2, [r7, #6]
 8001c4e:	3a08      	subs	r2, #8
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	3202      	adds	r2, #2
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c5e:	430b      	orrs	r3, r1
 8001c60:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOB_CRH,((4*(pin-8))+3));
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	79ba      	ldrb	r2, [r7, #6]
 8001c68:	3a08      	subs	r2, #8
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	3203      	adds	r2, #3
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	43d2      	mvns	r2, r2
 8001c76:	4611      	mov	r1, r2
 8001c78:	4a02      	ldr	r2, [pc, #8]	; (8001c84 <GPIO_PinDirection+0xdcc>)
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	6013      	str	r3, [r2, #0]
   	   					   break;
 8001c7e:	e0da      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40010c04 	.word	0x40010c04
   	   					SetBit(GPIOB_CRH,4*(pin-8));
 8001c88:	4bb6      	ldr	r3, [pc, #728]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	79ba      	ldrb	r2, [r7, #6]
 8001c8e:	3a08      	subs	r2, #8
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	2101      	movs	r1, #1
 8001c94:	fa01 f202 	lsl.w	r2, r1, r2
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4ab2      	ldr	r2, [pc, #712]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6013      	str	r3, [r2, #0]
   	   					ClrBit(GPIOB_CRH,((4*(pin-8))+1));
 8001ca0:	4bb0      	ldr	r3, [pc, #704]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	79ba      	ldrb	r2, [r7, #6]
 8001ca6:	3a08      	subs	r2, #8
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	3201      	adds	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	43d2      	mvns	r2, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4aab      	ldr	r2, [pc, #684]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001cb8:	400b      	ands	r3, r1
 8001cba:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOB_CRH,((4*(pin-8))+2));
 8001cbc:	4ba9      	ldr	r3, [pc, #676]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	79ba      	ldrb	r2, [r7, #6]
 8001cc2:	3a08      	subs	r2, #8
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	3202      	adds	r2, #2
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	43d2      	mvns	r2, r2
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4aa4      	ldr	r2, [pc, #656]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOB_CRH,((4*(pin-8))+3));
 8001cd8:	4ba2      	ldr	r3, [pc, #648]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	79ba      	ldrb	r2, [r7, #6]
 8001cde:	3a08      	subs	r2, #8
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	3203      	adds	r2, #3
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	43d2      	mvns	r2, r2
 8001cec:	4611      	mov	r1, r2
 8001cee:	4a9d      	ldr	r2, [pc, #628]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	6013      	str	r3, [r2, #0]
   	   					   break;
 8001cf4:	e09f      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   	        				SetBit(GPIOB_CRH,4*(pin-8));
 8001cf6:	4b9b      	ldr	r3, [pc, #620]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	79ba      	ldrb	r2, [r7, #6]
 8001cfc:	3a08      	subs	r2, #8
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4611      	mov	r1, r2
 8001d08:	4a96      	ldr	r2, [pc, #600]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	6013      	str	r3, [r2, #0]
   	        				SetBit(GPIOB_CRH,((4*(pin-8))+1));
 8001d0e:	4b95      	ldr	r3, [pc, #596]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	79ba      	ldrb	r2, [r7, #6]
 8001d14:	3a08      	subs	r2, #8
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	3201      	adds	r2, #1
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d20:	4611      	mov	r1, r2
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6013      	str	r3, [r2, #0]
   	        				ClrBit(GPIOB_CRH,((4*(pin-8))+2));
 8001d28:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	79ba      	ldrb	r2, [r7, #6]
 8001d2e:	3a08      	subs	r2, #8
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	3202      	adds	r2, #2
 8001d34:	2101      	movs	r1, #1
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	43d2      	mvns	r2, r2
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4a89      	ldr	r2, [pc, #548]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d40:	400b      	ands	r3, r1
 8001d42:	6013      	str	r3, [r2, #0]
   	        				SetBit(GPIOB_CRH,((4*(pin-8))+3));
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	79ba      	ldrb	r2, [r7, #6]
 8001d4a:	3a08      	subs	r2, #8
 8001d4c:	0092      	lsls	r2, r2, #2
 8001d4e:	3203      	adds	r2, #3
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	4a82      	ldr	r2, [pc, #520]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	6013      	str	r3, [r2, #0]
   	   					   break;
 8001d5e:	e06a      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   	       				SetBit(GPIOB_CRH,4*(pin-8));
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	79ba      	ldrb	r2, [r7, #6]
 8001d66:	3a08      	subs	r2, #8
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d70:	4611      	mov	r1, r2
 8001d72:	4a7c      	ldr	r2, [pc, #496]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOB_CRH,((4*(pin-8))+1));
 8001d78:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	79ba      	ldrb	r2, [r7, #6]
 8001d7e:	3a08      	subs	r2, #8
 8001d80:	0092      	lsls	r2, r2, #2
 8001d82:	3201      	adds	r2, #1
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOB_CRH,((4*(pin-8))+2));
 8001d92:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	79ba      	ldrb	r2, [r7, #6]
 8001d98:	3a08      	subs	r2, #8
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	3202      	adds	r2, #2
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	4611      	mov	r1, r2
 8001da6:	4a6f      	ldr	r2, [pc, #444]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOB_CRH,((4*(pin-8))+3));
 8001dac:	4b6d      	ldr	r3, [pc, #436]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	79ba      	ldrb	r2, [r7, #6]
 8001db2:	3a08      	subs	r2, #8
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	3203      	adds	r2, #3
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4a68      	ldr	r2, [pc, #416]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	6013      	str	r3, [r2, #0]
   	   					   break;
 8001dc6:	e036      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   	         				ClrBit(GPIOB_CRH,4*(pin-8));
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	79ba      	ldrb	r2, [r7, #6]
 8001dce:	3a08      	subs	r2, #8
 8001dd0:	0092      	lsls	r2, r2, #2
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd8:	43d2      	mvns	r2, r2
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4a61      	ldr	r2, [pc, #388]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001dde:	400b      	ands	r3, r1
 8001de0:	6013      	str	r3, [r2, #0]
   	         				SetBit(GPIOB_CRH,((4*(pin-8))+1));
 8001de2:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	79ba      	ldrb	r2, [r7, #6]
 8001de8:	3a08      	subs	r2, #8
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	3201      	adds	r2, #1
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	4611      	mov	r1, r2
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6013      	str	r3, [r2, #0]
   	         				SetBit(GPIOB_CRH,((4*(pin-8))+2));
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	79ba      	ldrb	r2, [r7, #6]
 8001e02:	3a08      	subs	r2, #8
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	3202      	adds	r2, #2
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4a54      	ldr	r2, [pc, #336]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001e12:	430b      	orrs	r3, r1
 8001e14:	6013      	str	r3, [r2, #0]
   	         				ClrBit(GPIOB_CRH,((4*(pin-8))+3));
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	79ba      	ldrb	r2, [r7, #6]
 8001e1c:	3a08      	subs	r2, #8
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	3203      	adds	r2, #3
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f202 	lsl.w	r2, r1, r2
 8001e28:	43d2      	mvns	r2, r2
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4a4d      	ldr	r2, [pc, #308]	; (8001f64 <GPIO_PinDirection+0x10ac>)
 8001e2e:	400b      	ands	r3, r1
 8001e30:	6013      	str	r3, [r2, #0]
   	   					   break;
 8001e32:	e000      	b.n	8001e36 <GPIO_PinDirection+0xf7e>
   		   }
 8001e34:	bf00      	nop
   		   break;
 8001e36:	e3d7      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   		   if(pin_dir == INPUT_PIN)
 8001e38:	797b      	ldrb	r3, [r7, #5]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f040 819d 	bne.w	800217a <GPIO_PinDirection+0x12c2>
   			   if(pin <= 7)
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	f200 80ca 	bhi.w	8001fdc <GPIO_PinDirection+0x1124>
   				   ClrBit(GPIOC_CRL,4*pin);
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	79ba      	ldrb	r2, [r7, #6]
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	43d2      	mvns	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4a43      	ldr	r2, [pc, #268]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	6013      	str	r3, [r2, #0]
   				   ClrBit(GPIOC_CRL,((4*pin)+1));
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	79ba      	ldrb	r2, [r7, #6]
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	3201      	adds	r2, #1
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	43d2      	mvns	r2, r2
 8001e72:	4611      	mov	r1, r2
 8001e74:	4a3c      	ldr	r2, [pc, #240]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001e76:	400b      	ands	r3, r1
 8001e78:	6013      	str	r3, [r2, #0]
   				   switch(pin_mode)
 8001e7a:	793b      	ldrb	r3, [r7, #4]
 8001e7c:	3b04      	subs	r3, #4
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 8091 	bhi.w	8001fa6 <GPIO_PinDirection+0x10ee>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <GPIO_PinDirection+0xfd4>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001f71 	.word	0x08001f71
 8001e90:	08001e9d 	.word	0x08001e9d
 8001e94:	08001ed1 	.word	0x08001ed1
 8001e98:	08001f19 	.word	0x08001f19
   						SetBit(GPIOC_CRL,((4*pin)+2));
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	79ba      	ldrb	r2, [r7, #6]
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	3202      	adds	r2, #2
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4a2e      	ldr	r2, [pc, #184]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_CRL,((4*pin)+3));
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	79ba      	ldrb	r2, [r7, #6]
 8001eba:	0092      	lsls	r2, r2, #2
 8001ebc:	3203      	adds	r2, #3
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	43d2      	mvns	r2, r2
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001eca:	400b      	ands	r3, r1
 8001ecc:	6013      	str	r3, [r2, #0]
   					   break;
 8001ece:	e38b      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						ClrBit(GPIOC_CRL,((4*pin)+2));
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	79ba      	ldrb	r2, [r7, #6]
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	3202      	adds	r2, #2
 8001eda:	2101      	movs	r1, #1
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	43d2      	mvns	r2, r2
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOC_CRL,((4*pin)+3));
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	79ba      	ldrb	r2, [r7, #6]
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	3203      	adds	r2, #3
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001efe:	430b      	orrs	r3, r1
 8001f00:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOC_ODR,pin);
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <GPIO_PinDirection+0x10b4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <GPIO_PinDirection+0x10b4>)
 8001f12:	430b      	orrs	r3, r1
 8001f14:	6013      	str	r3, [r2, #0]
   					   break;
 8001f16:	e367      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						ClrBit(GPIOC_CRL,((4*pin)+2));
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	79ba      	ldrb	r2, [r7, #6]
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	3202      	adds	r2, #2
 8001f22:	2101      	movs	r1, #1
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	43d2      	mvns	r2, r2
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOC_CRL,((4*pin)+3));
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	79ba      	ldrb	r2, [r7, #6]
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	3203      	adds	r2, #3
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	4611      	mov	r1, r2
 8001f44:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <GPIO_PinDirection+0x10b0>)
 8001f46:	430b      	orrs	r3, r1
 8001f48:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_ODR,pin);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <GPIO_PinDirection+0x10b4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	79ba      	ldrb	r2, [r7, #6]
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	43d2      	mvns	r2, r2
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <GPIO_PinDirection+0x10b4>)
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	6013      	str	r3, [r2, #0]
   					   break;
 8001f60:	e342      	b.n	80025e8 <GPIO_PinDirection+0x1730>
 8001f62:	bf00      	nop
 8001f64:	40010c04 	.word	0x40010c04
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	4001100c 	.word	0x4001100c
   						ClrBit(GPIOC_CRL,((4*pin)+2));
 8001f70:	4ba6      	ldr	r3, [pc, #664]	; (800220c <GPIO_PinDirection+0x1354>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	79ba      	ldrb	r2, [r7, #6]
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	3202      	adds	r2, #2
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f80:	43d2      	mvns	r2, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	4aa1      	ldr	r2, [pc, #644]	; (800220c <GPIO_PinDirection+0x1354>)
 8001f86:	400b      	ands	r3, r1
 8001f88:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_CRL,((4*pin)+3));
 8001f8a:	4ba0      	ldr	r3, [pc, #640]	; (800220c <GPIO_PinDirection+0x1354>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	79ba      	ldrb	r2, [r7, #6]
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	3203      	adds	r2, #3
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	43d2      	mvns	r2, r2
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4a9b      	ldr	r2, [pc, #620]	; (800220c <GPIO_PinDirection+0x1354>)
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	6013      	str	r3, [r2, #0]
   					   break;
 8001fa4:	e320      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						SetBit(GPIOC_CRL,((4*pin)+2));
 8001fa6:	4b99      	ldr	r3, [pc, #612]	; (800220c <GPIO_PinDirection+0x1354>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	79ba      	ldrb	r2, [r7, #6]
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	3202      	adds	r2, #2
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4a94      	ldr	r2, [pc, #592]	; (800220c <GPIO_PinDirection+0x1354>)
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_CRL,((4*pin)+3));
 8001fbe:	4b93      	ldr	r3, [pc, #588]	; (800220c <GPIO_PinDirection+0x1354>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	79ba      	ldrb	r2, [r7, #6]
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	3203      	adds	r2, #3
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	43d2      	mvns	r2, r2
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4a8e      	ldr	r2, [pc, #568]	; (800220c <GPIO_PinDirection+0x1354>)
 8001fd4:	400b      	ands	r3, r1
 8001fd6:	6013      	str	r3, [r2, #0]
   					   break;
 8001fd8:	bf00      	nop
 8001fda:	e305      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   				    ClrBit(GPIOC_CRH,4*(pin-8));
 8001fdc:	4b8c      	ldr	r3, [pc, #560]	; (8002210 <GPIO_PinDirection+0x1358>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	79ba      	ldrb	r2, [r7, #6]
 8001fe2:	3a08      	subs	r2, #8
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	43d2      	mvns	r2, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4a87      	ldr	r2, [pc, #540]	; (8002210 <GPIO_PinDirection+0x1358>)
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	6013      	str	r3, [r2, #0]
   				    ClrBit(GPIOC_CRH,((4*(pin-8))+1));
 8001ff6:	4b86      	ldr	r3, [pc, #536]	; (8002210 <GPIO_PinDirection+0x1358>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	79ba      	ldrb	r2, [r7, #6]
 8001ffc:	3a08      	subs	r2, #8
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	3201      	adds	r2, #1
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	43d2      	mvns	r2, r2
 800200a:	4611      	mov	r1, r2
 800200c:	4a80      	ldr	r2, [pc, #512]	; (8002210 <GPIO_PinDirection+0x1358>)
 800200e:	400b      	ands	r3, r1
 8002010:	6013      	str	r3, [r2, #0]
   				   switch(pin_mode)
 8002012:	793b      	ldrb	r3, [r7, #4]
 8002014:	3b04      	subs	r3, #4
 8002016:	2b03      	cmp	r3, #3
 8002018:	f200 8092 	bhi.w	8002140 <GPIO_PinDirection+0x1288>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <GPIO_PinDirection+0x116c>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002107 	.word	0x08002107
 8002028:	08002035 	.word	0x08002035
 800202c:	0800206d 	.word	0x0800206d
 8002030:	080020b9 	.word	0x080020b9
   						SetBit(GPIOC_CRH,((4*(pin-8))+2));
 8002034:	4b76      	ldr	r3, [pc, #472]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	79ba      	ldrb	r2, [r7, #6]
 800203a:	3a08      	subs	r2, #8
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	3202      	adds	r2, #2
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4611      	mov	r1, r2
 8002048:	4a71      	ldr	r2, [pc, #452]	; (8002210 <GPIO_PinDirection+0x1358>)
 800204a:	430b      	orrs	r3, r1
 800204c:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_CRH,((4*(pin-8))+3));
 800204e:	4b70      	ldr	r3, [pc, #448]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	79ba      	ldrb	r2, [r7, #6]
 8002054:	3a08      	subs	r2, #8
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	3203      	adds	r2, #3
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	43d2      	mvns	r2, r2
 8002062:	4611      	mov	r1, r2
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002066:	400b      	ands	r3, r1
 8002068:	6013      	str	r3, [r2, #0]
   					   break;
 800206a:	e2bd      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						ClrBit(GPIOC_CRH,((4*(pin-8))+2));
 800206c:	4b68      	ldr	r3, [pc, #416]	; (8002210 <GPIO_PinDirection+0x1358>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	79ba      	ldrb	r2, [r7, #6]
 8002072:	3a08      	subs	r2, #8
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	3202      	adds	r2, #2
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f202 	lsl.w	r2, r1, r2
 800207e:	43d2      	mvns	r2, r2
 8002080:	4611      	mov	r1, r2
 8002082:	4a63      	ldr	r2, [pc, #396]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002084:	400b      	ands	r3, r1
 8002086:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOC_CRH,((4*(pin-8))+3));
 8002088:	4b61      	ldr	r3, [pc, #388]	; (8002210 <GPIO_PinDirection+0x1358>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	79ba      	ldrb	r2, [r7, #6]
 800208e:	3a08      	subs	r2, #8
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	3203      	adds	r2, #3
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4611      	mov	r1, r2
 800209c:	4a5c      	ldr	r2, [pc, #368]	; (8002210 <GPIO_PinDirection+0x1358>)
 800209e:	430b      	orrs	r3, r1
 80020a0:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOC_ODR,pin);
 80020a2:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <GPIO_PinDirection+0x135c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	79ba      	ldrb	r2, [r7, #6]
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4611      	mov	r1, r2
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <GPIO_PinDirection+0x135c>)
 80020b2:	430b      	orrs	r3, r1
 80020b4:	6013      	str	r3, [r2, #0]
   					   break;
 80020b6:	e297      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						ClrBit(GPIOC_CRH,((4*(pin-8))+2));
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <GPIO_PinDirection+0x1358>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	79ba      	ldrb	r2, [r7, #6]
 80020be:	3a08      	subs	r2, #8
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	3202      	adds	r2, #2
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	43d2      	mvns	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4a50      	ldr	r2, [pc, #320]	; (8002210 <GPIO_PinDirection+0x1358>)
 80020d0:	400b      	ands	r3, r1
 80020d2:	6013      	str	r3, [r2, #0]
   						SetBit(GPIOC_CRH,((4*(pin-8))+3));
 80020d4:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <GPIO_PinDirection+0x1358>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	79ba      	ldrb	r2, [r7, #6]
 80020da:	3a08      	subs	r2, #8
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	3203      	adds	r2, #3
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4611      	mov	r1, r2
 80020e8:	4a49      	ldr	r2, [pc, #292]	; (8002210 <GPIO_PinDirection+0x1358>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_ODR,pin);
 80020ee:	4b49      	ldr	r3, [pc, #292]	; (8002214 <GPIO_PinDirection+0x135c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	79ba      	ldrb	r2, [r7, #6]
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f202 	lsl.w	r2, r1, r2
 80020fa:	43d2      	mvns	r2, r2
 80020fc:	4611      	mov	r1, r2
 80020fe:	4a45      	ldr	r2, [pc, #276]	; (8002214 <GPIO_PinDirection+0x135c>)
 8002100:	400b      	ands	r3, r1
 8002102:	6013      	str	r3, [r2, #0]
   					   break;
 8002104:	e270      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						ClrBit(GPIOC_CRH,((4*(pin-8))+2));
 8002106:	4b42      	ldr	r3, [pc, #264]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	79ba      	ldrb	r2, [r7, #6]
 800210c:	3a08      	subs	r2, #8
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	3202      	adds	r2, #2
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	43d2      	mvns	r2, r2
 800211a:	4611      	mov	r1, r2
 800211c:	4a3c      	ldr	r2, [pc, #240]	; (8002210 <GPIO_PinDirection+0x1358>)
 800211e:	400b      	ands	r3, r1
 8002120:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_CRH,((4*(pin-8))+3));
 8002122:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	79ba      	ldrb	r2, [r7, #6]
 8002128:	3a08      	subs	r2, #8
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	3203      	adds	r2, #3
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	43d2      	mvns	r2, r2
 8002136:	4611      	mov	r1, r2
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <GPIO_PinDirection+0x1358>)
 800213a:	400b      	ands	r3, r1
 800213c:	6013      	str	r3, [r2, #0]
   					   break;
 800213e:	e253      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   						SetBit(GPIOC_CRH,((4*(pin-8))+2));
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	3a08      	subs	r2, #8
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	3202      	adds	r2, #2
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f202 	lsl.w	r2, r1, r2
 8002152:	4611      	mov	r1, r2
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002156:	430b      	orrs	r3, r1
 8002158:	6013      	str	r3, [r2, #0]
   						ClrBit(GPIOC_CRH,((4*(pin-8))+3));
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <GPIO_PinDirection+0x1358>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	79ba      	ldrb	r2, [r7, #6]
 8002160:	3a08      	subs	r2, #8
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	3203      	adds	r2, #3
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	43d2      	mvns	r2, r2
 800216e:	4611      	mov	r1, r2
 8002170:	4a27      	ldr	r2, [pc, #156]	; (8002210 <GPIO_PinDirection+0x1358>)
 8002172:	400b      	ands	r3, r1
 8002174:	6013      	str	r3, [r2, #0]
   					   break;
 8002176:	bf00      	nop
 8002178:	e236      	b.n	80025e8 <GPIO_PinDirection+0x1730>
   		   else if (pin_dir == OUTPUT_PIN)
 800217a:	797b      	ldrb	r3, [r7, #5]
 800217c:	2b01      	cmp	r3, #1
 800217e:	f040 8233 	bne.w	80025e8 <GPIO_PinDirection+0x1730>
   			   if(pin <= 7)
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	2b07      	cmp	r3, #7
 8002186:	f200 810e 	bhi.w	80023a6 <GPIO_PinDirection+0x14ee>
   				   switch(pin_mode)
 800218a:	793b      	ldrb	r3, [r7, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	f200 80d7 	bhi.w	8002340 <GPIO_PinDirection+0x1488>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <GPIO_PinDirection+0x12e0>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080022e1 	.word	0x080022e1
 800219c:	0800227f 	.word	0x0800227f
 80021a0:	080021a9 	.word	0x080021a9
 80021a4:	08002219 	.word	0x08002219
      				ClrBit(GPIOC_CRL,4*pin);
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <GPIO_PinDirection+0x1354>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f202 	lsl.w	r2, r1, r2
 80021b6:	43d2      	mvns	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <GPIO_PinDirection+0x1354>)
 80021bc:	400b      	ands	r3, r1
 80021be:	6013      	str	r3, [r2, #0]
      				SetBit(GPIOC_CRL,((4*pin)+1));
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <GPIO_PinDirection+0x1354>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	79ba      	ldrb	r2, [r7, #6]
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	3201      	adds	r2, #1
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4611      	mov	r1, r2
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <GPIO_PinDirection+0x1354>)
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6013      	str	r3, [r2, #0]
      				SetBit(GPIOC_CRL,((4*pin)+2));
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <GPIO_PinDirection+0x1354>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	79ba      	ldrb	r2, [r7, #6]
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	3202      	adds	r2, #2
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4611      	mov	r1, r2
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <GPIO_PinDirection+0x1354>)
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOC_CRL,((4*pin)+3));
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <GPIO_PinDirection+0x1354>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	79ba      	ldrb	r2, [r7, #6]
 80021f6:	0092      	lsls	r2, r2, #2
 80021f8:	3203      	adds	r2, #3
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	43d2      	mvns	r2, r2
 8002202:	4611      	mov	r1, r2
 8002204:	4a01      	ldr	r2, [pc, #4]	; (800220c <GPIO_PinDirection+0x1354>)
 8002206:	400b      	ands	r3, r1
 8002208:	6013      	str	r3, [r2, #0]
   					   break;
 800220a:	e1ec      	b.n	80025e6 <GPIO_PinDirection+0x172e>
 800220c:	40011000 	.word	0x40011000
 8002210:	40011004 	.word	0x40011004
 8002214:	4001100c 	.word	0x4001100c
   					SetBit(GPIOC_CRL,4*pin);
 8002218:	4ba1      	ldr	r3, [pc, #644]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	79ba      	ldrb	r2, [r7, #6]
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	4611      	mov	r1, r2
 8002228:	4a9d      	ldr	r2, [pc, #628]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800222a:	430b      	orrs	r3, r1
 800222c:	6013      	str	r3, [r2, #0]
   					ClrBit(GPIOC_CRL,((4*pin)+1));
 800222e:	4b9c      	ldr	r3, [pc, #624]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	79ba      	ldrb	r2, [r7, #6]
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	3201      	adds	r2, #1
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	43d2      	mvns	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4a97      	ldr	r2, [pc, #604]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002244:	400b      	ands	r3, r1
 8002246:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOC_CRL,((4*pin)+2));
 8002248:	4b95      	ldr	r3, [pc, #596]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	79ba      	ldrb	r2, [r7, #6]
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	3202      	adds	r2, #2
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	43d2      	mvns	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4a90      	ldr	r2, [pc, #576]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800225e:	400b      	ands	r3, r1
 8002260:	6013      	str	r3, [r2, #0]
      				ClrBit(GPIOC_CRL,((4*pin)+3));
 8002262:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	79ba      	ldrb	r2, [r7, #6]
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	3203      	adds	r2, #3
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	43d2      	mvns	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4a8a      	ldr	r2, [pc, #552]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002278:	400b      	ands	r3, r1
 800227a:	6013      	str	r3, [r2, #0]
   					   break;
 800227c:	e1b3      	b.n	80025e6 <GPIO_PinDirection+0x172e>
        				SetBit(GPIOC_CRL,4*pin);
 800227e:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	79ba      	ldrb	r2, [r7, #6]
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	4611      	mov	r1, r2
 800228e:	4a84      	ldr	r2, [pc, #528]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002290:	430b      	orrs	r3, r1
 8002292:	6013      	str	r3, [r2, #0]
        				SetBit(GPIOC_CRL,((4*pin)+1));
 8002294:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	79ba      	ldrb	r2, [r7, #6]
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	3201      	adds	r2, #1
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4611      	mov	r1, r2
 80022a6:	4a7e      	ldr	r2, [pc, #504]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6013      	str	r3, [r2, #0]
        				ClrBit(GPIOC_CRL,((4*pin)+2));
 80022ac:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	79ba      	ldrb	r2, [r7, #6]
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	3202      	adds	r2, #2
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	43d2      	mvns	r2, r2
 80022be:	4611      	mov	r1, r2
 80022c0:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022c2:	400b      	ands	r3, r1
 80022c4:	6013      	str	r3, [r2, #0]
        				SetBit(GPIOC_CRL,((4*pin)+3));
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	79ba      	ldrb	r2, [r7, #6]
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	3203      	adds	r2, #3
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	4611      	mov	r1, r2
 80022d8:	4a71      	ldr	r2, [pc, #452]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022da:	430b      	orrs	r3, r1
 80022dc:	6013      	str	r3, [r2, #0]
   					   break;
 80022de:	e182      	b.n	80025e6 <GPIO_PinDirection+0x172e>
       				SetBit(GPIOC_CRL,4*pin);
 80022e0:	4b6f      	ldr	r3, [pc, #444]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	79ba      	ldrb	r2, [r7, #6]
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	4611      	mov	r1, r2
 80022f0:	4a6b      	ldr	r2, [pc, #428]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOC_CRL,((4*pin)+1));
 80022f6:	4b6a      	ldr	r3, [pc, #424]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	79ba      	ldrb	r2, [r7, #6]
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	3201      	adds	r2, #1
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f202 	lsl.w	r2, r1, r2
 8002306:	4611      	mov	r1, r2
 8002308:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800230a:	430b      	orrs	r3, r1
 800230c:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOC_CRL,((4*pin)+2));
 800230e:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	79ba      	ldrb	r2, [r7, #6]
 8002314:	0092      	lsls	r2, r2, #2
 8002316:	3202      	adds	r2, #2
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f202 	lsl.w	r2, r1, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4a5f      	ldr	r2, [pc, #380]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002322:	430b      	orrs	r3, r1
 8002324:	6013      	str	r3, [r2, #0]
       				SetBit(GPIOC_CRL,((4*pin)+3));
 8002326:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	79ba      	ldrb	r2, [r7, #6]
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	3203      	adds	r2, #3
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4611      	mov	r1, r2
 8002338:	4a59      	ldr	r2, [pc, #356]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800233a:	430b      	orrs	r3, r1
 800233c:	6013      	str	r3, [r2, #0]
   					   break;
 800233e:	e152      	b.n	80025e6 <GPIO_PinDirection+0x172e>
         				ClrBit(GPIOC_CRL,4*pin);
 8002340:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	79ba      	ldrb	r2, [r7, #6]
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	43d2      	mvns	r2, r2
 8002350:	4611      	mov	r1, r2
 8002352:	4a53      	ldr	r2, [pc, #332]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002354:	400b      	ands	r3, r1
 8002356:	6013      	str	r3, [r2, #0]
         				SetBit(GPIOC_CRL,((4*pin)+1));
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	79ba      	ldrb	r2, [r7, #6]
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	3201      	adds	r2, #1
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4611      	mov	r1, r2
 800236a:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800236c:	430b      	orrs	r3, r1
 800236e:	6013      	str	r3, [r2, #0]
         				SetBit(GPIOC_CRL,((4*pin)+2));
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	79ba      	ldrb	r2, [r7, #6]
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	3202      	adds	r2, #2
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	4611      	mov	r1, r2
 8002382:	4a47      	ldr	r2, [pc, #284]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 8002384:	430b      	orrs	r3, r1
 8002386:	6013      	str	r3, [r2, #0]
         				ClrBit(GPIOC_CRL,((4*pin)+3));
 8002388:	4b45      	ldr	r3, [pc, #276]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	79ba      	ldrb	r2, [r7, #6]
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	3203      	adds	r2, #3
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	43d2      	mvns	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <GPIO_PinDirection+0x15e8>)
 800239e:	400b      	ands	r3, r1
 80023a0:	6013      	str	r3, [r2, #0]
   					   break;
 80023a2:	bf00      	nop
 80023a4:	e11f      	b.n	80025e6 <GPIO_PinDirection+0x172e>
   	   				   switch(pin_mode)
 80023a6:	793b      	ldrb	r3, [r7, #4]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	f200 80e6 	bhi.w	800257a <GPIO_PinDirection+0x16c2>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <GPIO_PinDirection+0x14fc>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	08002513 	.word	0x08002513
 80023b8:	080024a9 	.word	0x080024a9
 80023bc:	080023c5 	.word	0x080023c5
 80023c0:	08002431 	.word	0x08002431
   	      				ClrBit(GPIOC_CRH,4*(pin-8));
 80023c4:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	79ba      	ldrb	r2, [r7, #6]
 80023ca:	3a08      	subs	r2, #8
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f202 	lsl.w	r2, r1, r2
 80023d4:	43d2      	mvns	r2, r2
 80023d6:	4611      	mov	r1, r2
 80023d8:	4a32      	ldr	r2, [pc, #200]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 80023da:	400b      	ands	r3, r1
 80023dc:	6013      	str	r3, [r2, #0]
   	      				SetBit(GPIOC_CRH,((4*(pin-8))+1));
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	79ba      	ldrb	r2, [r7, #6]
 80023e4:	3a08      	subs	r2, #8
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	3201      	adds	r2, #1
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4611      	mov	r1, r2
 80023f2:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6013      	str	r3, [r2, #0]
   	      				SetBit(GPIOC_CRH,((4*(pin-8))+2));
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	79ba      	ldrb	r2, [r7, #6]
 80023fe:	3a08      	subs	r2, #8
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	3202      	adds	r2, #2
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	4611      	mov	r1, r2
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 800240e:	430b      	orrs	r3, r1
 8002410:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOC_CRH,((4*(pin-8))+3));
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	79ba      	ldrb	r2, [r7, #6]
 8002418:	3a08      	subs	r2, #8
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	3203      	adds	r2, #3
 800241e:	2101      	movs	r1, #1
 8002420:	fa01 f202 	lsl.w	r2, r1, r2
 8002424:	43d2      	mvns	r2, r2
 8002426:	4611      	mov	r1, r2
 8002428:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 800242a:	400b      	ands	r3, r1
 800242c:	6013      	str	r3, [r2, #0]
   	   					   break;
 800242e:	e0da      	b.n	80025e6 <GPIO_PinDirection+0x172e>
   	   					SetBit(GPIOC_CRH,4*(pin-8));
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	79ba      	ldrb	r2, [r7, #6]
 8002436:	3a08      	subs	r2, #8
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4611      	mov	r1, r2
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002444:	430b      	orrs	r3, r1
 8002446:	6013      	str	r3, [r2, #0]
   	   					ClrBit(GPIOC_CRH,((4*(pin-8))+1));
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	79ba      	ldrb	r2, [r7, #6]
 800244e:	3a08      	subs	r2, #8
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	3201      	adds	r2, #1
 8002454:	2101      	movs	r1, #1
 8002456:	fa01 f202 	lsl.w	r2, r1, r2
 800245a:	43d2      	mvns	r2, r2
 800245c:	4611      	mov	r1, r2
 800245e:	4a11      	ldr	r2, [pc, #68]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002460:	400b      	ands	r3, r1
 8002462:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOC_CRH,((4*(pin-8))+2));
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	79ba      	ldrb	r2, [r7, #6]
 800246a:	3a08      	subs	r2, #8
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	3202      	adds	r2, #2
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	43d2      	mvns	r2, r2
 8002478:	4611      	mov	r1, r2
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 800247c:	400b      	ands	r3, r1
 800247e:	6013      	str	r3, [r2, #0]
   	      				ClrBit(GPIOC_CRH,((4*(pin-8))+3));
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	79ba      	ldrb	r2, [r7, #6]
 8002486:	3a08      	subs	r2, #8
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	3203      	adds	r2, #3
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	43d2      	mvns	r2, r2
 8002494:	4611      	mov	r1, r2
 8002496:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <GPIO_PinDirection+0x15ec>)
 8002498:	400b      	ands	r3, r1
 800249a:	6013      	str	r3, [r2, #0]
   	   					   break;
 800249c:	e0a3      	b.n	80025e6 <GPIO_PinDirection+0x172e>
 800249e:	bf00      	nop
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40011004 	.word	0x40011004
   	        				SetBit(GPIOC_CRH,4*(pin-8));
 80024a8:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	79ba      	ldrb	r2, [r7, #6]
 80024ae:	3a08      	subs	r2, #8
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	4611      	mov	r1, r2
 80024ba:	4a4e      	ldr	r2, [pc, #312]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024bc:	430b      	orrs	r3, r1
 80024be:	6013      	str	r3, [r2, #0]
   	        				SetBit(GPIOC_CRH,((4*(pin-8))+1));
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	79ba      	ldrb	r2, [r7, #6]
 80024c6:	3a08      	subs	r2, #8
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	3201      	adds	r2, #1
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	4611      	mov	r1, r2
 80024d4:	4a47      	ldr	r2, [pc, #284]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024d6:	430b      	orrs	r3, r1
 80024d8:	6013      	str	r3, [r2, #0]
   	        				ClrBit(GPIOC_CRH,((4*(pin-8))+2));
 80024da:	4b46      	ldr	r3, [pc, #280]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	79ba      	ldrb	r2, [r7, #6]
 80024e0:	3a08      	subs	r2, #8
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	3202      	adds	r2, #2
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	43d2      	mvns	r2, r2
 80024ee:	4611      	mov	r1, r2
 80024f0:	4a40      	ldr	r2, [pc, #256]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	6013      	str	r3, [r2, #0]
   	        				SetBit(GPIOC_CRH,((4*(pin-8))+3));
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	79ba      	ldrb	r2, [r7, #6]
 80024fc:	3a08      	subs	r2, #8
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	3203      	adds	r2, #3
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4a3a      	ldr	r2, [pc, #232]	; (80025f4 <GPIO_PinDirection+0x173c>)
 800250c:	430b      	orrs	r3, r1
 800250e:	6013      	str	r3, [r2, #0]
   	   					   break;
 8002510:	e069      	b.n	80025e6 <GPIO_PinDirection+0x172e>
   	       				SetBit(GPIOC_CRH,4*(pin-8));
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	79ba      	ldrb	r2, [r7, #6]
 8002518:	3a08      	subs	r2, #8
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002526:	430b      	orrs	r3, r1
 8002528:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOC_CRH,((4*(pin-8))+1));
 800252a:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <GPIO_PinDirection+0x173c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	79ba      	ldrb	r2, [r7, #6]
 8002530:	3a08      	subs	r2, #8
 8002532:	0092      	lsls	r2, r2, #2
 8002534:	3201      	adds	r2, #1
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4611      	mov	r1, r2
 800253e:	4a2d      	ldr	r2, [pc, #180]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002540:	430b      	orrs	r3, r1
 8002542:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOC_CRH,((4*(pin-8))+2));
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	79ba      	ldrb	r2, [r7, #6]
 800254a:	3a08      	subs	r2, #8
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	3202      	adds	r2, #2
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	4611      	mov	r1, r2
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <GPIO_PinDirection+0x173c>)
 800255a:	430b      	orrs	r3, r1
 800255c:	6013      	str	r3, [r2, #0]
   	       				SetBit(GPIOC_CRH,((4*(pin-8))+3));
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	79ba      	ldrb	r2, [r7, #6]
 8002564:	3a08      	subs	r2, #8
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	3203      	adds	r2, #3
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4611      	mov	r1, r2
 8002572:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002574:	430b      	orrs	r3, r1
 8002576:	6013      	str	r3, [r2, #0]
   	   					   break;
 8002578:	e035      	b.n	80025e6 <GPIO_PinDirection+0x172e>
   	         				ClrBit(GPIOC_CRH,4*(pin-8));
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <GPIO_PinDirection+0x173c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	79ba      	ldrb	r2, [r7, #6]
 8002580:	3a08      	subs	r2, #8
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	2101      	movs	r1, #1
 8002586:	fa01 f202 	lsl.w	r2, r1, r2
 800258a:	43d2      	mvns	r2, r2
 800258c:	4611      	mov	r1, r2
 800258e:	4a19      	ldr	r2, [pc, #100]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002590:	400b      	ands	r3, r1
 8002592:	6013      	str	r3, [r2, #0]
   	         				SetBit(GPIOC_CRH,((4*(pin-8))+1));
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <GPIO_PinDirection+0x173c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	79ba      	ldrb	r2, [r7, #6]
 800259a:	3a08      	subs	r2, #8
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	3201      	adds	r2, #1
 80025a0:	2101      	movs	r1, #1
 80025a2:	fa01 f202 	lsl.w	r2, r1, r2
 80025a6:	4611      	mov	r1, r2
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6013      	str	r3, [r2, #0]
   	         				SetBit(GPIOC_CRH,((4*(pin-8))+2));
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	79ba      	ldrb	r2, [r7, #6]
 80025b4:	3a08      	subs	r2, #8
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	3202      	adds	r2, #2
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6013      	str	r3, [r2, #0]
   	         				ClrBit(GPIOC_CRH,((4*(pin-8))+3));
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	79ba      	ldrb	r2, [r7, #6]
 80025ce:	3a08      	subs	r2, #8
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	3203      	adds	r2, #3
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	43d2      	mvns	r2, r2
 80025dc:	4611      	mov	r1, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <GPIO_PinDirection+0x173c>)
 80025e0:	400b      	ands	r3, r1
 80025e2:	6013      	str	r3, [r2, #0]
   	   					   break;
 80025e4:	bf00      	nop
   		   break;
 80025e6:	bf00      	nop
   }
   }
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc90      	pop	{r4, r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40011004 	.word	0x40011004

080025f8 <GPIO_PinWrite>:




void GPIO_PinWrite(PORT port,PIN pin,PIN_STATE pin_state)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	460b      	mov	r3, r1
 8002604:	71bb      	strb	r3, [r7, #6]
 8002606:	4613      	mov	r3, r2
 8002608:	717b      	strb	r3, [r7, #5]
	switch(port)
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d87b      	bhi.n	8002708 <GPIO_PinWrite+0x110>
 8002610:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <GPIO_PinWrite+0x20>)
 8002612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002616:	bf00      	nop
 8002618:	08002629 	.word	0x08002629
 800261c:	08002661 	.word	0x08002661
 8002620:	08002699 	.word	0x08002699
 8002624:	080026d1 	.word	0x080026d1
	{
		case PORTA:
            if (pin_state == PIN_HIGH)
 8002628:	797b      	ldrb	r3, [r7, #5]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10a      	bne.n	8002644 <GPIO_PinWrite+0x4c>
            {
            	SetBit(GPIOA_BSRR,pin);
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <GPIO_PinWrite+0x12c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	79ba      	ldrb	r2, [r7, #6]
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	4611      	mov	r1, r2
 800263c:	4a39      	ldr	r2, [pc, #228]	; (8002724 <GPIO_PinWrite+0x12c>)
 800263e:	430b      	orrs	r3, r1
 8002640:	6013      	str	r3, [r2, #0]
            }
            else if (pin_state == PIN_LOW)
            {
            	SetBit(GPIOA_BRR,pin);
            }
			break;
 8002642:	e063      	b.n	800270c <GPIO_PinWrite+0x114>
            else if (pin_state == PIN_LOW)
 8002644:	797b      	ldrb	r3, [r7, #5]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d160      	bne.n	800270c <GPIO_PinWrite+0x114>
            	SetBit(GPIOA_BRR,pin);
 800264a:	4b37      	ldr	r3, [pc, #220]	; (8002728 <GPIO_PinWrite+0x130>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	79ba      	ldrb	r2, [r7, #6]
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4a33      	ldr	r2, [pc, #204]	; (8002728 <GPIO_PinWrite+0x130>)
 800265a:	430b      	orrs	r3, r1
 800265c:	6013      	str	r3, [r2, #0]
			break;
 800265e:	e055      	b.n	800270c <GPIO_PinWrite+0x114>
		case PORTB:
            if (pin_state == PIN_HIGH)
 8002660:	797b      	ldrb	r3, [r7, #5]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10a      	bne.n	800267c <GPIO_PinWrite+0x84>
            {
            	SetBit(GPIOB_BSRR,pin);
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <GPIO_PinWrite+0x134>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	79ba      	ldrb	r2, [r7, #6]
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	4611      	mov	r1, r2
 8002674:	4a2d      	ldr	r2, [pc, #180]	; (800272c <GPIO_PinWrite+0x134>)
 8002676:	430b      	orrs	r3, r1
 8002678:	6013      	str	r3, [r2, #0]
            }
            else if (pin_state == PIN_LOW)
            {
            	SetBit(GPIOB_BRR,pin);
            }
			break;
 800267a:	e049      	b.n	8002710 <GPIO_PinWrite+0x118>
            else if (pin_state == PIN_LOW)
 800267c:	797b      	ldrb	r3, [r7, #5]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d146      	bne.n	8002710 <GPIO_PinWrite+0x118>
            	SetBit(GPIOB_BRR,pin);
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <GPIO_PinWrite+0x138>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	79ba      	ldrb	r2, [r7, #6]
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f202 	lsl.w	r2, r1, r2
 800268e:	4611      	mov	r1, r2
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <GPIO_PinWrite+0x138>)
 8002692:	430b      	orrs	r3, r1
 8002694:	6013      	str	r3, [r2, #0]
			break;
 8002696:	e03b      	b.n	8002710 <GPIO_PinWrite+0x118>
		case PORTC:
            if (pin_state == PIN_HIGH)
 8002698:	797b      	ldrb	r3, [r7, #5]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10a      	bne.n	80026b4 <GPIO_PinWrite+0xbc>
            {
            	SetBit(GPIOC_BSRR,pin);
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <GPIO_PinWrite+0x13c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	79ba      	ldrb	r2, [r7, #6]
 80026a4:	2101      	movs	r1, #1
 80026a6:	fa01 f202 	lsl.w	r2, r1, r2
 80026aa:	4611      	mov	r1, r2
 80026ac:	4a21      	ldr	r2, [pc, #132]	; (8002734 <GPIO_PinWrite+0x13c>)
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6013      	str	r3, [r2, #0]
            }
            else if (pin_state == PIN_LOW)
            {
            	SetBit(GPIOC_BRR,pin);
            }
			break;
 80026b2:	e02f      	b.n	8002714 <GPIO_PinWrite+0x11c>
            else if (pin_state == PIN_LOW)
 80026b4:	797b      	ldrb	r3, [r7, #5]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d12c      	bne.n	8002714 <GPIO_PinWrite+0x11c>
            	SetBit(GPIOC_BRR,pin);
 80026ba:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <GPIO_PinWrite+0x140>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	79ba      	ldrb	r2, [r7, #6]
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4611      	mov	r1, r2
 80026c8:	4a1b      	ldr	r2, [pc, #108]	; (8002738 <GPIO_PinWrite+0x140>)
 80026ca:	430b      	orrs	r3, r1
 80026cc:	6013      	str	r3, [r2, #0]
			break;
 80026ce:	e021      	b.n	8002714 <GPIO_PinWrite+0x11c>
		case PORTD:
            if (pin_state == PIN_HIGH)
 80026d0:	797b      	ldrb	r3, [r7, #5]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d10a      	bne.n	80026ec <GPIO_PinWrite+0xf4>
            {
            	SetBit(GPIOD_BSRR,pin);
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <GPIO_PinWrite+0x144>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	79ba      	ldrb	r2, [r7, #6]
 80026dc:	2101      	movs	r1, #1
 80026de:	fa01 f202 	lsl.w	r2, r1, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <GPIO_PinWrite+0x144>)
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]
            }
            else if (pin_state == PIN_LOW)
            {
            	SetBit(GPIOD_BRR,pin);
            }
			break;
 80026ea:	e015      	b.n	8002718 <GPIO_PinWrite+0x120>
            else if (pin_state == PIN_LOW)
 80026ec:	797b      	ldrb	r3, [r7, #5]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d112      	bne.n	8002718 <GPIO_PinWrite+0x120>
            	SetBit(GPIOD_BRR,pin);
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <GPIO_PinWrite+0x148>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	79ba      	ldrb	r2, [r7, #6]
 80026f8:	2101      	movs	r1, #1
 80026fa:	fa01 f202 	lsl.w	r2, r1, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <GPIO_PinWrite+0x148>)
 8002702:	430b      	orrs	r3, r1
 8002704:	6013      	str	r3, [r2, #0]
			break;
 8002706:	e007      	b.n	8002718 <GPIO_PinWrite+0x120>
		default:break;
 8002708:	bf00      	nop
 800270a:	e006      	b.n	800271a <GPIO_PinWrite+0x122>
			break;
 800270c:	bf00      	nop
 800270e:	e004      	b.n	800271a <GPIO_PinWrite+0x122>
			break;
 8002710:	bf00      	nop
 8002712:	e002      	b.n	800271a <GPIO_PinWrite+0x122>
			break;
 8002714:	bf00      	nop
 8002716:	e000      	b.n	800271a <GPIO_PinWrite+0x122>
			break;
 8002718:	bf00      	nop
	}
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40010810 	.word	0x40010810
 8002728:	40010814 	.word	0x40010814
 800272c:	40010c10 	.word	0x40010c10
 8002730:	40010c14 	.word	0x40010c14
 8002734:	40011010 	.word	0x40011010
 8002738:	40011014 	.word	0x40011014
 800273c:	40011410 	.word	0x40011410
 8002740:	40011414 	.word	0x40011414

08002744 <I2C1_EV_IRQHandler>:
			break;
		default:break;
	}
}
void I2C1_EV_IRQHandler (void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	if(flag1)
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <I2C1_EV_IRQHandler+0x20>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <I2C1_EV_IRQHandler+0x14>
		I2C_Tx1();
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <I2C1_EV_IRQHandler+0x24>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4798      	blx	r3
	else
		I2C_Rx1();
}
 8002756:	e002      	b.n	800275e <I2C1_EV_IRQHandler+0x1a>
		I2C_Rx1();
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <I2C1_EV_IRQHandler+0x28>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4798      	blx	r3
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000097 	.word	0x20000097
 8002768:	20000060 	.word	0x20000060
 800276c:	20000064 	.word	0x20000064

08002770 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler (void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	if(flag2)
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <I2C2_EV_IRQHandler+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <I2C2_EV_IRQHandler+0x14>
		I2C_Tx2();
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <I2C2_EV_IRQHandler+0x24>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4798      	blx	r3
	else
		I2C_Rx2();
}
 8002782:	e002      	b.n	800278a <I2C2_EV_IRQHandler+0x1a>
		I2C_Rx2();
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <I2C2_EV_IRQHandler+0x28>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4798      	blx	r3
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000096 	.word	0x20000096
 8002794:	20000068 	.word	0x20000068
 8002798:	2000006c 	.word	0x2000006c

0800279c <IR_Sensor_Init>:


// when there is object it gives you LOW Logic 0V

void IR_Sensor_Init(IR_SENSOR ir_sensor)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	switch(ir_sensor)
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <IR_Sensor_Init+0x16>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d00a      	beq.n	80027c6 <IR_Sensor_Init+0x2a>
		case Right_IR_Sensor:
			GPIO_Init(Right_IR_Sensor_PORT);
			GPIO_PinDirection(Right_IR_Sensor_PORT,Right_IR_Sensor_PIN,INPUT_PIN,Floating);// Try Pull Up Mode
			break;
		default:
			break;
 80027b0:	e013      	b.n	80027da <IR_Sensor_Init+0x3e>
			GPIO_Init(Left_IR_Sensor_PORT);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fb24 	bl	8000e00 <GPIO_Init>
			GPIO_PinDirection(Left_IR_Sensor_PORT,Left_IR_Sensor_PIN,INPUT_PIN,Floating);// Try Pull Up Mode
 80027b8:	2305      	movs	r3, #5
 80027ba:	2200      	movs	r2, #0
 80027bc:	2104      	movs	r1, #4
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fb7a 	bl	8000eb8 <GPIO_PinDirection>
			break;
 80027c4:	e009      	b.n	80027da <IR_Sensor_Init+0x3e>
			GPIO_Init(Right_IR_Sensor_PORT);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fb1a 	bl	8000e00 <GPIO_Init>
			GPIO_PinDirection(Right_IR_Sensor_PORT,Right_IR_Sensor_PIN,INPUT_PIN,Floating);// Try Pull Up Mode
 80027cc:	2305      	movs	r3, #5
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe fb70 	bl	8000eb8 <GPIO_PinDirection>
			break;
 80027d8:	bf00      	nop
	}
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <Timer_Init>:
#include "GPIO.h"



void Timer_Init (TIMER timer,unsigned short Prescaler)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	80bb      	strh	r3, [r7, #4]
	switch(timer)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	f200 8172 	bhi.w	8002ae0 <Timer_Init+0x2fc>
 80027fc:	a201      	add	r2, pc, #4	; (adr r2, 8002804 <Timer_Init+0x20>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002815 	.word	0x08002815
 8002808:	080028b1 	.word	0x080028b1
 800280c:	08002961 	.word	0x08002961
 8002810:	08002a45 	.word	0x08002a45
	{
		case TIMER1:
			// Connect Clock to GPIOA
			if(!GetBit(RCC_APB2ENR,2))
 8002814:	4b80      	ldr	r3, [pc, #512]	; (8002a18 <Timer_Init+0x234>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <Timer_Init+0x4a>
				SetBit(RCC_APB2ENR,2);
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <Timer_Init+0x234>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7c      	ldr	r2, [pc, #496]	; (8002a18 <Timer_Init+0x234>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6013      	str	r3, [r2, #0]

			// Connect Clock to TMR1
			SetBit(RCC_APB2ENR,11);
 800282e:	4b7a      	ldr	r3, [pc, #488]	; (8002a18 <Timer_Init+0x234>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a79      	ldr	r2, [pc, #484]	; (8002a18 <Timer_Init+0x234>)
 8002834:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002838:	6013      	str	r3, [r2, #0]
			//Up Count
			ClrBit(TIM1_CR1,4);
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <Timer_Init+0x238>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <Timer_Init+0x238>)
 8002840:	f023 0310 	bic.w	r3, r3, #16
 8002844:	6013      	str	r3, [r2, #0]
			ClrBit(TIM1_CR1,5);
 8002846:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <Timer_Init+0x238>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a74      	ldr	r2, [pc, #464]	; (8002a1c <Timer_Init+0x238>)
 800284c:	f023 0320 	bic.w	r3, r3, #32
 8002850:	6013      	str	r3, [r2, #0]
			ClrBit(TIM1_CR1,6);
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <Timer_Init+0x238>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	; (8002a1c <Timer_Init+0x238>)
 8002858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800285c:	6013      	str	r3, [r2, #0]
			//Only counter Overflow/Underflow generates interrupt
			SetBit(TIM1_CR1,2);
 800285e:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <Timer_Init+0x238>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <Timer_Init+0x238>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6013      	str	r3, [r2, #0]
			ClrBit(TIM1_CR1,1);
 800286a:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <Timer_Init+0x238>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6b      	ldr	r2, [pc, #428]	; (8002a1c <Timer_Init+0x238>)
 8002870:	f023 0302 	bic.w	r3, r3, #2
 8002874:	6013      	str	r3, [r2, #0]
			//Disable Slave Mode
			ClrBit(TIM1_SMCR,0);
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <Timer_Init+0x23c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <Timer_Init+0x23c>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6013      	str	r3, [r2, #0]
			ClrBit(TIM1_SMCR,1);
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <Timer_Init+0x23c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <Timer_Init+0x23c>)
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	6013      	str	r3, [r2, #0]
			ClrBit(TIM1_SMCR,2);
 800288e:	4b64      	ldr	r3, [pc, #400]	; (8002a20 <Timer_Init+0x23c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a63      	ldr	r2, [pc, #396]	; (8002a20 <Timer_Init+0x23c>)
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	6013      	str	r3, [r2, #0]
			//Timer Prescaler
			TIM1_PSC = Prescaler-1;
 800289a:	88bb      	ldrh	r3, [r7, #4]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <Timer_Init+0x240>)
 80028a0:	601a      	str	r2, [r3, #0]
			SetBit(NVIC_ISER0,25);
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <Timer_Init+0x244>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a60      	ldr	r2, [pc, #384]	; (8002a28 <Timer_Init+0x244>)
 80028a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ac:	6013      	str	r3, [r2, #0]
			break;
 80028ae:	e118      	b.n	8002ae2 <Timer_Init+0x2fe>
		case TIMER2:
			// Connect Clock to GPIOA
			if(!GetBit(RCC_APB2ENR,2))
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <Timer_Init+0x234>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <Timer_Init+0xe6>
				SetBit(RCC_APB2ENR,2);
 80028be:	4b56      	ldr	r3, [pc, #344]	; (8002a18 <Timer_Init+0x234>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a55      	ldr	r2, [pc, #340]	; (8002a18 <Timer_Init+0x234>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6013      	str	r3, [r2, #0]

			// Connect Clock to TMR2
			SetBit(RCC_APB1ENR,0);
 80028ca:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <Timer_Init+0x248>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a57      	ldr	r2, [pc, #348]	; (8002a2c <Timer_Init+0x248>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6013      	str	r3, [r2, #0]
			//Up Count
			ClrBit(TIM2_CR1,4);
 80028d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e0:	f023 0310 	bic.w	r3, r3, #16
 80028e4:	6013      	str	r3, [r2, #0]
			ClrBit(TIM2_CR1,5);
 80028e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028f0:	f023 0320 	bic.w	r3, r3, #32
 80028f4:	6013      	str	r3, [r2, #0]
			ClrBit(TIM2_CR1,6);
 80028f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002904:	6013      	str	r3, [r2, #0]
			//Only counter Overflow/Underflow generates interrupt
			SetBit(TIM2_CR1,2);
 8002906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002910:	f043 0304 	orr.w	r3, r3, #4
 8002914:	6013      	str	r3, [r2, #0]
			ClrBit(TIM2_CR1,1);
 8002916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002920:	f023 0302 	bic.w	r3, r3, #2
 8002924:	6013      	str	r3, [r2, #0]
			//Disable Slave Mode
			ClrBit(TIM2_SMCR,0);
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <Timer_Init+0x24c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <Timer_Init+0x24c>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]
			ClrBit(TIM2_SMCR,1);
 8002932:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <Timer_Init+0x24c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a3e      	ldr	r2, [pc, #248]	; (8002a30 <Timer_Init+0x24c>)
 8002938:	f023 0302 	bic.w	r3, r3, #2
 800293c:	6013      	str	r3, [r2, #0]
			ClrBit(TIM2_SMCR,2);
 800293e:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <Timer_Init+0x24c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a3b      	ldr	r2, [pc, #236]	; (8002a30 <Timer_Init+0x24c>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6013      	str	r3, [r2, #0]
			//Timer Prescaler
			TIM2_PSC = Prescaler-1;
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	1e5a      	subs	r2, r3, #1
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <Timer_Init+0x250>)
 8002950:	601a      	str	r2, [r3, #0]
			SetBit(NVIC_ISER0,28);
 8002952:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <Timer_Init+0x244>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <Timer_Init+0x244>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6013      	str	r3, [r2, #0]
			break;
 800295e:	e0c0      	b.n	8002ae2 <Timer_Init+0x2fe>
		case TIMER3:
			// Connect Clock to GPIOA
			if(!GetBit(RCC_APB2ENR,2))
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <Timer_Init+0x234>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <Timer_Init+0x196>
				SetBit(RCC_APB2ENR,2);
 800296e:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <Timer_Init+0x234>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <Timer_Init+0x234>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6013      	str	r3, [r2, #0]
			// Connect Clock to GPIOB
			if(!GetBit(RCC_APB2ENR,3))
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <Timer_Init+0x234>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <Timer_Init+0x1b0>
				SetBit(RCC_APB2ENR,3);
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <Timer_Init+0x234>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <Timer_Init+0x234>)
 800298e:	f043 0308 	orr.w	r3, r3, #8
 8002992:	6013      	str	r3, [r2, #0]
			// Connect Clock to TMR3
			SetBit(RCC_APB1ENR,1);
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <Timer_Init+0x248>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a24      	ldr	r2, [pc, #144]	; (8002a2c <Timer_Init+0x248>)
 800299a:	f043 0302 	orr.w	r3, r3, #2
 800299e:	6013      	str	r3, [r2, #0]
			//Up Count
			ClrBit(TIM3_CR1,4);
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <Timer_Init+0x254>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a24      	ldr	r2, [pc, #144]	; (8002a38 <Timer_Init+0x254>)
 80029a6:	f023 0310 	bic.w	r3, r3, #16
 80029aa:	6013      	str	r3, [r2, #0]
			ClrBit(TIM3_CR1,5);
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <Timer_Init+0x254>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <Timer_Init+0x254>)
 80029b2:	f023 0320 	bic.w	r3, r3, #32
 80029b6:	6013      	str	r3, [r2, #0]
			ClrBit(TIM3_CR1,6);
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <Timer_Init+0x254>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <Timer_Init+0x254>)
 80029be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c2:	6013      	str	r3, [r2, #0]
			//Only counter Overflow/Underflow generates interrupt
			SetBit(TIM3_CR1,2);
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <Timer_Init+0x254>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <Timer_Init+0x254>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6013      	str	r3, [r2, #0]
			ClrBit(TIM3_CR1,1);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <Timer_Init+0x254>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <Timer_Init+0x254>)
 80029d6:	f023 0302 	bic.w	r3, r3, #2
 80029da:	6013      	str	r3, [r2, #0]
			//Disable Slave Mode
			ClrBit(TIM3_SMCR,0);
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <Timer_Init+0x258>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <Timer_Init+0x258>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6013      	str	r3, [r2, #0]
			ClrBit(TIM3_SMCR,1);
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <Timer_Init+0x258>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <Timer_Init+0x258>)
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	6013      	str	r3, [r2, #0]
			ClrBit(TIM3_SMCR,2);
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <Timer_Init+0x258>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <Timer_Init+0x258>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6013      	str	r3, [r2, #0]
			//Timer Prescaler
			TIM3_PSC = Prescaler-1;
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	1e5a      	subs	r2, r3, #1
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <Timer_Init+0x25c>)
 8002a06:	601a      	str	r2, [r3, #0]
			SetBit(NVIC_ISER0,29);
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <Timer_Init+0x244>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <Timer_Init+0x244>)
 8002a0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a12:	6013      	str	r3, [r2, #0]
			break;
 8002a14:	e065      	b.n	8002ae2 <Timer_Init+0x2fe>
 8002a16:	bf00      	nop
 8002a18:	40021018 	.word	0x40021018
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40012c08 	.word	0x40012c08
 8002a24:	40012c28 	.word	0x40012c28
 8002a28:	e000e100 	.word	0xe000e100
 8002a2c:	4002101c 	.word	0x4002101c
 8002a30:	40000008 	.word	0x40000008
 8002a34:	40000028 	.word	0x40000028
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000408 	.word	0x40000408
 8002a40:	40000428 	.word	0x40000428
		case TIMER4:
			// Connect Clock to GPIOB
			if(!GetBit(RCC_APB2ENR,3))
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <Timer_Init+0x308>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d105      	bne.n	8002a5e <Timer_Init+0x27a>
				SetBit(RCC_APB2ENR,3);
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <Timer_Init+0x308>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a25      	ldr	r2, [pc, #148]	; (8002aec <Timer_Init+0x308>)
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	6013      	str	r3, [r2, #0]

			// Connect Clock to TMR4
			SetBit(RCC_APB1ENR,2);
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <Timer_Init+0x30c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <Timer_Init+0x30c>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6013      	str	r3, [r2, #0]
			//Up Count
			ClrBit(TIM4_CR1,4);
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <Timer_Init+0x310>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <Timer_Init+0x310>)
 8002a70:	f023 0310 	bic.w	r3, r3, #16
 8002a74:	6013      	str	r3, [r2, #0]
			ClrBit(TIM4_CR1,5);
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <Timer_Init+0x310>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <Timer_Init+0x310>)
 8002a7c:	f023 0320 	bic.w	r3, r3, #32
 8002a80:	6013      	str	r3, [r2, #0]
			ClrBit(TIM4_CR1,6);
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <Timer_Init+0x310>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <Timer_Init+0x310>)
 8002a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8c:	6013      	str	r3, [r2, #0]
			//Only counter Overflow/Underflow generates interrupt
			SetBit(TIM4_CR1,2);
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <Timer_Init+0x310>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <Timer_Init+0x310>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6013      	str	r3, [r2, #0]
			ClrBit(TIM4_CR1,1);
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <Timer_Init+0x310>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <Timer_Init+0x310>)
 8002aa0:	f023 0302 	bic.w	r3, r3, #2
 8002aa4:	6013      	str	r3, [r2, #0]
			//Disable Slave Mode
			ClrBit(TIM4_SMCR,0);
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <Timer_Init+0x314>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <Timer_Init+0x314>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6013      	str	r3, [r2, #0]
			ClrBit(TIM4_SMCR,1);
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <Timer_Init+0x314>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a10      	ldr	r2, [pc, #64]	; (8002af8 <Timer_Init+0x314>)
 8002ab8:	f023 0302 	bic.w	r3, r3, #2
 8002abc:	6013      	str	r3, [r2, #0]
			ClrBit(TIM4_SMCR,2);
 8002abe:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <Timer_Init+0x314>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	; (8002af8 <Timer_Init+0x314>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	6013      	str	r3, [r2, #0]
			//Timer Prescaler
			TIM4_PSC = Prescaler-1;
 8002aca:	88bb      	ldrh	r3, [r7, #4]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <Timer_Init+0x318>)
 8002ad0:	601a      	str	r2, [r3, #0]
			SetBit(NVIC_ISER0,30);
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <Timer_Init+0x31c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <Timer_Init+0x31c>)
 8002ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002adc:	6013      	str	r3, [r2, #0]
			break;
 8002ade:	e000      	b.n	8002ae2 <Timer_Init+0x2fe>
		default:break;
 8002ae0:	bf00      	nop
	}
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40021018 	.word	0x40021018
 8002af0:	4002101c 	.word	0x4002101c
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000808 	.word	0x40000808
 8002afc:	40000828 	.word	0x40000828
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <Timer_Status>:

unsigned char Timer_Status(TIMER timer)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d829      	bhi.n	8002b68 <Timer_Status+0x64>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <Timer_Status+0x18>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b3b 	.word	0x08002b3b
 8002b24:	08002b4b 	.word	0x08002b4b
 8002b28:	08002b59 	.word	0x08002b59
	{
		case TIMER1:
			return(GetBit(TIM1_CR1,0));
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <Timer_Status+0x70>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e016      	b.n	8002b68 <Timer_Status+0x64>
		case TIMER2:
			return(GetBit(TIM2_CR1,0));
 8002b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e00e      	b.n	8002b68 <Timer_Status+0x64>
			break;
		case TIMER3:
			return (GetBit(TIM3_CR1,0));
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <Timer_Status+0x74>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	e007      	b.n	8002b68 <Timer_Status+0x64>
			break;
		case TIMER4:
			return (SetBit(TIM4_CR1,0));
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <Timer_Status+0x78>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <Timer_Status+0x78>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e7ff      	b.n	8002b68 <Timer_Status+0x64>
			break;
	}
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800

08002b80 <Timer_Enable>:
			break;
	}
}

void Timer_Enable(TIMER timer)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d829      	bhi.n	8002be4 <Timer_Enable+0x64>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <Timer_Enable+0x18>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bb7 	.word	0x08002bb7
 8002ba0:	08002bc9 	.word	0x08002bc9
 8002ba4:	08002bd7 	.word	0x08002bd7
	{
		case TIMER1:
			SetBit(TIM1_CR1,0);
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <Timer_Enable+0x70>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <Timer_Enable+0x70>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]
			break;
 8002bb4:	e016      	b.n	8002be4 <Timer_Enable+0x64>
		case TIMER2:
			SetBit(TIM2_CR1,0);
 8002bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]
			break;
 8002bc6:	e00d      	b.n	8002be4 <Timer_Enable+0x64>
		case TIMER3:
			SetBit(TIM3_CR1,0);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <Timer_Enable+0x74>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <Timer_Enable+0x74>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6013      	str	r3, [r2, #0]
			break;
 8002bd4:	e006      	b.n	8002be4 <Timer_Enable+0x64>
		case TIMER4:
			SetBit(TIM4_CR1,0);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <Timer_Enable+0x78>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <Timer_Enable+0x78>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6013      	str	r3, [r2, #0]
			break;
 8002be2:	bf00      	nop
	}
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800

08002bfc <Timer_SetISR>:
void (*TIMER3_ISR)(void) = 0;
void (*TIMER4_ISR)(void) = 0;


void Timer_SetISR(TIMER timer,void (*ptr)(void))
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
	switch(timer)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d81a      	bhi.n	8002c44 <Timer_SetISR+0x48>
 8002c0e:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <Timer_SetISR+0x18>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c2d 	.word	0x08002c2d
 8002c1c:	08002c35 	.word	0x08002c35
 8002c20:	08002c3d 	.word	0x08002c3d
	{
		case TIMER1:
			TIMER1_ISR = ptr;
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <Timer_SetISR+0x54>)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6013      	str	r3, [r2, #0]
			break;
 8002c2a:	e00b      	b.n	8002c44 <Timer_SetISR+0x48>
		case TIMER2:
			TIMER2_ISR = ptr;
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <Timer_SetISR+0x58>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6013      	str	r3, [r2, #0]
			break;
 8002c32:	e007      	b.n	8002c44 <Timer_SetISR+0x48>
		case TIMER3:
			TIMER3_ISR = ptr;
 8002c34:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <Timer_SetISR+0x5c>)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6013      	str	r3, [r2, #0]
			break;
 8002c3a:	e003      	b.n	8002c44 <Timer_SetISR+0x48>
		case TIMER4:
			TIMER4_ISR = ptr;
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <Timer_SetISR+0x60>)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6013      	str	r3, [r2, #0]
			break;
 8002c42:	bf00      	nop
	}
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000070 	.word	0x20000070
 8002c54:	20000074 	.word	0x20000074
 8002c58:	20000078 	.word	0x20000078
 8002c5c:	2000007c 	.word	0x2000007c

08002c60 <Timer_PWMDutyCycle>:
}



void Timer_PWMDutyCycle(TIMER timer,TIMER_CHANNEL timer_channel,unsigned short duty_cycle)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	71bb      	strb	r3, [r7, #6]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	80bb      	strh	r3, [r7, #4]
	switch(timer)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	f200 8091 	bhi.w	8002d9c <Timer_PWMDutyCycle+0x13c>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <Timer_PWMDutyCycle+0x20>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002ccf 	.word	0x08002ccf
 8002c88:	08002d0f 	.word	0x08002d0f
 8002c8c:	08002d4f 	.word	0x08002d4f
	{
	case TIMER1:
		switch(timer_channel)
 8002c90:	79bb      	ldrb	r3, [r7, #6]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d87b      	bhi.n	8002d8e <Timer_PWMDutyCycle+0x12e>
 8002c96:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <Timer_PWMDutyCycle+0x3c>)
 8002c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cb5 	.word	0x08002cb5
 8002ca4:	08002cbd 	.word	0x08002cbd
 8002ca8:	08002cc5 	.word	0x08002cc5
		{
		case CHANNEL0:
			TIM1_CCR1 = duty_cycle;
 8002cac:	4a3e      	ldr	r2, [pc, #248]	; (8002da8 <Timer_PWMDutyCycle+0x148>)
 8002cae:	88bb      	ldrh	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
			break;
 8002cb2:	e00b      	b.n	8002ccc <Timer_PWMDutyCycle+0x6c>
		case CHANNEL1:
			TIM1_CCR2 = duty_cycle;
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <Timer_PWMDutyCycle+0x14c>)
 8002cb6:	88bb      	ldrh	r3, [r7, #4]
 8002cb8:	6013      	str	r3, [r2, #0]
			break;
 8002cba:	e007      	b.n	8002ccc <Timer_PWMDutyCycle+0x6c>
		case CHANNEL2:
			TIM1_CCR3 = duty_cycle;
 8002cbc:	4a3c      	ldr	r2, [pc, #240]	; (8002db0 <Timer_PWMDutyCycle+0x150>)
 8002cbe:	88bb      	ldrh	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
			break;
 8002cc2:	e003      	b.n	8002ccc <Timer_PWMDutyCycle+0x6c>
		case CHANNEL3:
			TIM1_CCR4 = duty_cycle;
 8002cc4:	4a3b      	ldr	r2, [pc, #236]	; (8002db4 <Timer_PWMDutyCycle+0x154>)
 8002cc6:	88bb      	ldrh	r3, [r7, #4]
 8002cc8:	6013      	str	r3, [r2, #0]
			break;
 8002cca:	bf00      	nop
		}
		break;
 8002ccc:	e05f      	b.n	8002d8e <Timer_PWMDutyCycle+0x12e>
	case TIMER2:
		switch(timer_channel)
 8002cce:	79bb      	ldrb	r3, [r7, #6]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d85e      	bhi.n	8002d92 <Timer_PWMDutyCycle+0x132>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <Timer_PWMDutyCycle+0x7c>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d05 	.word	0x08002d05
		{
		case CHANNEL0:
			TIM2_CCR1 = duty_cycle;
 8002cec:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <Timer_PWMDutyCycle+0x158>)
 8002cee:	88bb      	ldrh	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
			break;
 8002cf2:	e00b      	b.n	8002d0c <Timer_PWMDutyCycle+0xac>
		case CHANNEL1:
			TIM2_CCR2 = duty_cycle;
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <Timer_PWMDutyCycle+0x15c>)
 8002cf6:	88bb      	ldrh	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
			break;
 8002cfa:	e007      	b.n	8002d0c <Timer_PWMDutyCycle+0xac>
		case CHANNEL2:
			TIM2_CCR3 = duty_cycle;
 8002cfc:	4a30      	ldr	r2, [pc, #192]	; (8002dc0 <Timer_PWMDutyCycle+0x160>)
 8002cfe:	88bb      	ldrh	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
			break;
 8002d02:	e003      	b.n	8002d0c <Timer_PWMDutyCycle+0xac>
		case CHANNEL3:
			TIM2_CCR4 = duty_cycle;
 8002d04:	4a2f      	ldr	r2, [pc, #188]	; (8002dc4 <Timer_PWMDutyCycle+0x164>)
 8002d06:	88bb      	ldrh	r3, [r7, #4]
 8002d08:	6013      	str	r3, [r2, #0]
			break;
 8002d0a:	bf00      	nop
		}
		break;
 8002d0c:	e041      	b.n	8002d92 <Timer_PWMDutyCycle+0x132>
	case TIMER3:
		switch(timer_channel)
 8002d0e:	79bb      	ldrb	r3, [r7, #6]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d840      	bhi.n	8002d96 <Timer_PWMDutyCycle+0x136>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <Timer_PWMDutyCycle+0xbc>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d35 	.word	0x08002d35
 8002d24:	08002d3d 	.word	0x08002d3d
 8002d28:	08002d45 	.word	0x08002d45
		{
		case CHANNEL0:
			TIM3_CCR1 = duty_cycle;
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <Timer_PWMDutyCycle+0x168>)
 8002d2e:	88bb      	ldrh	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
			break;
 8002d32:	e00b      	b.n	8002d4c <Timer_PWMDutyCycle+0xec>
		case CHANNEL1:
			TIM3_CCR2 = duty_cycle;
 8002d34:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <Timer_PWMDutyCycle+0x16c>)
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
			break;
 8002d3a:	e007      	b.n	8002d4c <Timer_PWMDutyCycle+0xec>
		case CHANNEL2:
			TIM3_CCR3 = duty_cycle;
 8002d3c:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <Timer_PWMDutyCycle+0x170>)
 8002d3e:	88bb      	ldrh	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
			break;
 8002d42:	e003      	b.n	8002d4c <Timer_PWMDutyCycle+0xec>
		case CHANNEL3:
			TIM3_CCR4 = duty_cycle;
 8002d44:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <Timer_PWMDutyCycle+0x174>)
 8002d46:	88bb      	ldrh	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
			break;
 8002d4a:	bf00      	nop
		}
		break;
 8002d4c:	e023      	b.n	8002d96 <Timer_PWMDutyCycle+0x136>
	case TIMER4:
		switch(timer_channel)
 8002d4e:	79bb      	ldrb	r3, [r7, #6]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d822      	bhi.n	8002d9a <Timer_PWMDutyCycle+0x13a>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <Timer_PWMDutyCycle+0xfc>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d75 	.word	0x08002d75
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002d85 	.word	0x08002d85
		{
		case CHANNEL0:
			TIM4_CCR1 = duty_cycle;
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <Timer_PWMDutyCycle+0x178>)
 8002d6e:	88bb      	ldrh	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
			break;
 8002d72:	e00b      	b.n	8002d8c <Timer_PWMDutyCycle+0x12c>
		case CHANNEL1:
			TIM4_CCR2 = duty_cycle;
 8002d74:	4a19      	ldr	r2, [pc, #100]	; (8002ddc <Timer_PWMDutyCycle+0x17c>)
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
			break;
 8002d7a:	e007      	b.n	8002d8c <Timer_PWMDutyCycle+0x12c>
		case CHANNEL2:
			TIM4_CCR3 = duty_cycle;
 8002d7c:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <Timer_PWMDutyCycle+0x180>)
 8002d7e:	88bb      	ldrh	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
			break;
 8002d82:	e003      	b.n	8002d8c <Timer_PWMDutyCycle+0x12c>
		case CHANNEL3:
			TIM4_CCR4 = duty_cycle;
 8002d84:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <Timer_PWMDutyCycle+0x184>)
 8002d86:	88bb      	ldrh	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
			break;
 8002d8a:	bf00      	nop
		}
		break;
 8002d8c:	e005      	b.n	8002d9a <Timer_PWMDutyCycle+0x13a>
		break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <Timer_PWMDutyCycle+0x13c>
		break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <Timer_PWMDutyCycle+0x13c>
		break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <Timer_PWMDutyCycle+0x13c>
		break;
 8002d9a:	bf00      	nop
	}
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c34 	.word	0x40012c34
 8002dac:	40012c38 	.word	0x40012c38
 8002db0:	40012c3c 	.word	0x40012c3c
 8002db4:	40012c40 	.word	0x40012c40
 8002db8:	40000034 	.word	0x40000034
 8002dbc:	40000038 	.word	0x40000038
 8002dc0:	4000003c 	.word	0x4000003c
 8002dc4:	40000040 	.word	0x40000040
 8002dc8:	40000434 	.word	0x40000434
 8002dcc:	40000438 	.word	0x40000438
 8002dd0:	4000043c 	.word	0x4000043c
 8002dd4:	40000440 	.word	0x40000440
 8002dd8:	40000834 	.word	0x40000834
 8002ddc:	40000838 	.word	0x40000838
 8002de0:	4000083c 	.word	0x4000083c
 8002de4:	40000840 	.word	0x40000840

08002de8 <Timer_ActivatePWM>:
			break;
	}
}

void Timer_ActivatePWM(TIMER timer,TIMER_CHANNEL timer_channel,unsigned short period,unsigned short duty_cycle)
{
 8002de8:	b490      	push	{r4, r7}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4604      	mov	r4, r0
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4623      	mov	r3, r4
 8002df8:	71fb      	strb	r3, [r7, #7]
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71bb      	strb	r3, [r7, #6]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	80bb      	strh	r3, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	807b      	strh	r3, [r7, #2]
	// by default DIR is Upcounting from 0 to TIMx_ARR
	switch(timer)
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	f000 8168 	beq.w	80030de <Timer_ActivatePWM+0x2f6>
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	f000 82c6 	beq.w	80033a0 <Timer_ActivatePWM+0x5b8>
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <Timer_ActivatePWM+0x34>
				default:break;
			}
			// Enable the auto reload preload register (ARPE in TIMx_CR1)
			SetBit(TIM4_CR1,7);
			break;
		default:break;
 8002e18:	f000 bc20 	b.w	800365c <Timer_ActivatePWM+0x874>
			TIM2_ARR = period; // - 1
 8002e1c:	4a7c      	ldr	r2, [pc, #496]	; (8003010 <Timer_ActivatePWM+0x228>)
 8002e1e:	88bb      	ldrh	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
			switch(timer_channel)
 8002e22:	79bb      	ldrb	r3, [r7, #6]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	f200 8150 	bhi.w	80030ca <Timer_ActivatePWM+0x2e2>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <Timer_ActivatePWM+0x48>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002edb 	.word	0x08002edb
 8002e38:	08002f75 	.word	0x08002f75
 8002e3c:	08003031 	.word	0x08003031
					TIM2_CCR1 = duty_cycle - 1;
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	4b73      	ldr	r3, [pc, #460]	; (8003014 <Timer_ActivatePWM+0x22c>)
 8002e46:	601a      	str	r2, [r3, #0]
					SetBit(GPIOA_CRL,3);
 8002e48:	4b73      	ldr	r3, [pc, #460]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a72      	ldr	r2, [pc, #456]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e4e:	f043 0308 	orr.w	r3, r3, #8
 8002e52:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,2);
 8002e54:	4b70      	ldr	r3, [pc, #448]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6f      	ldr	r2, [pc, #444]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e5a:	f023 0304 	bic.w	r3, r3, #4
 8002e5e:	6013      	str	r3, [r2, #0]
					SetBit(GPIOA_CRL,1);
 8002e60:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6c      	ldr	r2, [pc, #432]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,0);
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a69      	ldr	r2, [pc, #420]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR1,0);
 8002e78:	4b68      	ldr	r3, [pc, #416]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a67      	ldr	r2, [pc, #412]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR1,1);
 8002e84:	4b65      	ldr	r3, [pc, #404]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a64      	ldr	r2, [pc, #400]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e8a:	f023 0302 	bic.w	r3, r3, #2
 8002e8e:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR1,6);
 8002e90:	4b62      	ldr	r3, [pc, #392]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a61      	ldr	r2, [pc, #388]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9a:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR1,5);
 8002e9c:	4b5f      	ldr	r3, [pc, #380]	; (800301c <Timer_ActivatePWM+0x234>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a5e      	ldr	r2, [pc, #376]	; (800301c <Timer_ActivatePWM+0x234>)
 8002ea2:	f043 0320 	orr.w	r3, r3, #32
 8002ea6:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR1,4);
 8002ea8:	4b5c      	ldr	r3, [pc, #368]	; (800301c <Timer_ActivatePWM+0x234>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a5b      	ldr	r2, [pc, #364]	; (800301c <Timer_ActivatePWM+0x234>)
 8002eae:	f023 0310 	bic.w	r3, r3, #16
 8002eb2:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR1,3);
 8002eb4:	4b59      	ldr	r3, [pc, #356]	; (800301c <Timer_ActivatePWM+0x234>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	; (800301c <Timer_ActivatePWM+0x234>)
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCER,1);
 8002ec0:	4b57      	ldr	r3, [pc, #348]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a56      	ldr	r2, [pc, #344]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002ec6:	f023 0302 	bic.w	r3, r3, #2
 8002eca:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCER,0);
 8002ecc:	4b54      	ldr	r3, [pc, #336]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a53      	ldr	r2, [pc, #332]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]
					break;
 8002ed8:	e0f8      	b.n	80030cc <Timer_ActivatePWM+0x2e4>
					TIM2_CCR2 = duty_cycle - 1;
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	4b51      	ldr	r3, [pc, #324]	; (8003024 <Timer_ActivatePWM+0x23c>)
 8002ee0:	601a      	str	r2, [r3, #0]
					SetBit(GPIOA_CRL,7);
 8002ee2:	4b4d      	ldr	r3, [pc, #308]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a4c      	ldr	r2, [pc, #304]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eec:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,6);
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a49      	ldr	r2, [pc, #292]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	6013      	str	r3, [r2, #0]
					SetBit(GPIOA_CRL,5);
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a46      	ldr	r2, [pc, #280]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f00:	f043 0320 	orr.w	r3, r3, #32
 8002f04:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,4);
 8002f06:	4b44      	ldr	r3, [pc, #272]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a43      	ldr	r2, [pc, #268]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f0c:	f023 0310 	bic.w	r3, r3, #16
 8002f10:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR1,8);
 8002f12:	4b42      	ldr	r3, [pc, #264]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a41      	ldr	r2, [pc, #260]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR1,9);
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a3e      	ldr	r2, [pc, #248]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f28:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR1,14);
 8002f2a:	4b3c      	ldr	r3, [pc, #240]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a3b      	ldr	r2, [pc, #236]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR1,13);
 8002f36:	4b39      	ldr	r3, [pc, #228]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a38      	ldr	r2, [pc, #224]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f40:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR1,12);
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a35      	ldr	r2, [pc, #212]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f4c:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR1,11);
 8002f4e:	4b33      	ldr	r3, [pc, #204]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a32      	ldr	r2, [pc, #200]	; (800301c <Timer_ActivatePWM+0x234>)
 8002f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f58:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCER,5);
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a30      	ldr	r2, [pc, #192]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002f60:	f023 0320 	bic.w	r3, r3, #32
 8002f64:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCER,4);
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002f6c:	f043 0310 	orr.w	r3, r3, #16
 8002f70:	6013      	str	r3, [r2, #0]
					break;
 8002f72:	e0ab      	b.n	80030cc <Timer_ActivatePWM+0x2e4>
					TIM2_CCR3 = duty_cycle - 1;
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	1e5a      	subs	r2, r3, #1
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <Timer_ActivatePWM+0x240>)
 8002f7a:	601a      	str	r2, [r3, #0]
					SetBit(GPIOA_CRL,11);
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a25      	ldr	r2, [pc, #148]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f86:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,10);
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f92:	6013      	str	r3, [r2, #0]
					SetBit(GPIOA_CRL,9);
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,8);
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <Timer_ActivatePWM+0x230>)
 8002fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR2,0);
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR2,1);
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fbe:	f023 0302 	bic.w	r3, r3, #2
 8002fc2:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR2,6);
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fce:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR2,5);
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fd6:	f043 0320 	orr.w	r3, r3, #32
 8002fda:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR2,4);
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fe2:	f023 0310 	bic.w	r3, r3, #16
 8002fe6:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR2,3);
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0f      	ldr	r2, [pc, #60]	; (800302c <Timer_ActivatePWM+0x244>)
 8002fee:	f043 0308 	orr.w	r3, r3, #8
 8002ff2:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCER,9);
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a09      	ldr	r2, [pc, #36]	; (8003020 <Timer_ActivatePWM+0x238>)
 8002ffa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCER,8);
 8003000:	4b07      	ldr	r3, [pc, #28]	; (8003020 <Timer_ActivatePWM+0x238>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a06      	ldr	r2, [pc, #24]	; (8003020 <Timer_ActivatePWM+0x238>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300a:	6013      	str	r3, [r2, #0]
					break;
 800300c:	e05e      	b.n	80030cc <Timer_ActivatePWM+0x2e4>
 800300e:	bf00      	nop
 8003010:	4000002c 	.word	0x4000002c
 8003014:	40000034 	.word	0x40000034
 8003018:	40010800 	.word	0x40010800
 800301c:	40000018 	.word	0x40000018
 8003020:	40000020 	.word	0x40000020
 8003024:	40000038 	.word	0x40000038
 8003028:	4000003c 	.word	0x4000003c
 800302c:	4000001c 	.word	0x4000001c
					TIM2_CCR4 = duty_cycle - 1;
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	1e5a      	subs	r2, r3, #1
 8003034:	4b80      	ldr	r3, [pc, #512]	; (8003238 <Timer_ActivatePWM+0x450>)
 8003036:	601a      	str	r2, [r3, #0]
					SetBit(GPIOA_CRL,15);
 8003038:	4b80      	ldr	r3, [pc, #512]	; (800323c <Timer_ActivatePWM+0x454>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a7f      	ldr	r2, [pc, #508]	; (800323c <Timer_ActivatePWM+0x454>)
 800303e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003042:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,14);
 8003044:	4b7d      	ldr	r3, [pc, #500]	; (800323c <Timer_ActivatePWM+0x454>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7c      	ldr	r2, [pc, #496]	; (800323c <Timer_ActivatePWM+0x454>)
 800304a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800304e:	6013      	str	r3, [r2, #0]
					SetBit(GPIOA_CRL,13);
 8003050:	4b7a      	ldr	r3, [pc, #488]	; (800323c <Timer_ActivatePWM+0x454>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a79      	ldr	r2, [pc, #484]	; (800323c <Timer_ActivatePWM+0x454>)
 8003056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800305a:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,12);
 800305c:	4b77      	ldr	r3, [pc, #476]	; (800323c <Timer_ActivatePWM+0x454>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a76      	ldr	r2, [pc, #472]	; (800323c <Timer_ActivatePWM+0x454>)
 8003062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003066:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR2,8);
 8003068:	4b75      	ldr	r3, [pc, #468]	; (8003240 <Timer_ActivatePWM+0x458>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a74      	ldr	r2, [pc, #464]	; (8003240 <Timer_ActivatePWM+0x458>)
 800306e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003072:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR2,9);
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <Timer_ActivatePWM+0x458>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a71      	ldr	r2, [pc, #452]	; (8003240 <Timer_ActivatePWM+0x458>)
 800307a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800307e:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR2,14);
 8003080:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <Timer_ActivatePWM+0x458>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6e      	ldr	r2, [pc, #440]	; (8003240 <Timer_ActivatePWM+0x458>)
 8003086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308a:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR2,13);
 800308c:	4b6c      	ldr	r3, [pc, #432]	; (8003240 <Timer_ActivatePWM+0x458>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6b      	ldr	r2, [pc, #428]	; (8003240 <Timer_ActivatePWM+0x458>)
 8003092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003096:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCMR2,12);
 8003098:	4b69      	ldr	r3, [pc, #420]	; (8003240 <Timer_ActivatePWM+0x458>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a68      	ldr	r2, [pc, #416]	; (8003240 <Timer_ActivatePWM+0x458>)
 800309e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030a2:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCMR2,11);
 80030a4:	4b66      	ldr	r3, [pc, #408]	; (8003240 <Timer_ActivatePWM+0x458>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <Timer_ActivatePWM+0x458>)
 80030aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ae:	6013      	str	r3, [r2, #0]
					ClrBit(TIM2_CCER,13);
 80030b0:	4b64      	ldr	r3, [pc, #400]	; (8003244 <Timer_ActivatePWM+0x45c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a63      	ldr	r2, [pc, #396]	; (8003244 <Timer_ActivatePWM+0x45c>)
 80030b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ba:	6013      	str	r3, [r2, #0]
					SetBit(TIM2_CCER,12);
 80030bc:	4b61      	ldr	r3, [pc, #388]	; (8003244 <Timer_ActivatePWM+0x45c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a60      	ldr	r2, [pc, #384]	; (8003244 <Timer_ActivatePWM+0x45c>)
 80030c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030c6:	6013      	str	r3, [r2, #0]
					break;
 80030c8:	e000      	b.n	80030cc <Timer_ActivatePWM+0x2e4>
				default:break;
 80030ca:	bf00      	nop
			SetBit(TIM2_CR1,7);
 80030cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	6013      	str	r3, [r2, #0]
			break;
 80030dc:	e2be      	b.n	800365c <Timer_ActivatePWM+0x874>
			TIM3_ARR = period ;
 80030de:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <Timer_ActivatePWM+0x460>)
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	6013      	str	r3, [r2, #0]
			switch(timer_channel)
 80030e4:	79bb      	ldrb	r3, [r7, #6]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	f200 8152 	bhi.w	8003390 <Timer_ActivatePWM+0x5a8>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <Timer_ActivatePWM+0x30c>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003105 	.word	0x08003105
 80030f8:	0800319f 	.word	0x0800319f
 80030fc:	0800325d 	.word	0x0800325d
 8003100:	080032f7 	.word	0x080032f7
					TIM3_CCR1 = duty_cycle - 1;
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	1e5a      	subs	r2, r3, #1
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <Timer_ActivatePWM+0x464>)
 800310a:	601a      	str	r2, [r3, #0]
					SetBit(GPIOA_CRL,27);
 800310c:	4b4b      	ldr	r3, [pc, #300]	; (800323c <Timer_ActivatePWM+0x454>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a4a      	ldr	r2, [pc, #296]	; (800323c <Timer_ActivatePWM+0x454>)
 8003112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003116:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,26);
 8003118:	4b48      	ldr	r3, [pc, #288]	; (800323c <Timer_ActivatePWM+0x454>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a47      	ldr	r2, [pc, #284]	; (800323c <Timer_ActivatePWM+0x454>)
 800311e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003122:	6013      	str	r3, [r2, #0]
					SetBit(GPIOA_CRL,25);
 8003124:	4b45      	ldr	r3, [pc, #276]	; (800323c <Timer_ActivatePWM+0x454>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a44      	ldr	r2, [pc, #272]	; (800323c <Timer_ActivatePWM+0x454>)
 800312a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800312e:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,24);
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <Timer_ActivatePWM+0x454>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a41      	ldr	r2, [pc, #260]	; (800323c <Timer_ActivatePWM+0x454>)
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,0);
 800313c:	4b44      	ldr	r3, [pc, #272]	; (8003250 <Timer_ActivatePWM+0x468>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a43      	ldr	r2, [pc, #268]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,1);
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <Timer_ActivatePWM+0x468>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a40      	ldr	r2, [pc, #256]	; (8003250 <Timer_ActivatePWM+0x468>)
 800314e:	f023 0302 	bic.w	r3, r3, #2
 8003152:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,6);
 8003154:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <Timer_ActivatePWM+0x468>)
 800315a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800315e:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,5);
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003166:	f043 0320 	orr.w	r3, r3, #32
 800316a:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,4);
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <Timer_ActivatePWM+0x468>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003172:	f023 0310 	bic.w	r3, r3, #16
 8003176:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,3);
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <Timer_ActivatePWM+0x468>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	; (8003250 <Timer_ActivatePWM+0x468>)
 800317e:	f043 0308 	orr.w	r3, r3, #8
 8003182:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCER,1);
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <Timer_ActivatePWM+0x46c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a32      	ldr	r2, [pc, #200]	; (8003254 <Timer_ActivatePWM+0x46c>)
 800318a:	f023 0302 	bic.w	r3, r3, #2
 800318e:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCER,0);
 8003190:	4b30      	ldr	r3, [pc, #192]	; (8003254 <Timer_ActivatePWM+0x46c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2f      	ldr	r2, [pc, #188]	; (8003254 <Timer_ActivatePWM+0x46c>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6013      	str	r3, [r2, #0]
					break;
 800319c:	e0f9      	b.n	8003392 <Timer_ActivatePWM+0x5aa>
					TIM3_CCR2 = duty_cycle - 1;
 800319e:	887b      	ldrh	r3, [r7, #2]
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <Timer_ActivatePWM+0x470>)
 80031a4:	601a      	str	r2, [r3, #0]
					SetBit(GPIOA_CRL,31);
 80031a6:	4b25      	ldr	r3, [pc, #148]	; (800323c <Timer_ActivatePWM+0x454>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <Timer_ActivatePWM+0x454>)
 80031ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031b0:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,30);
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <Timer_ActivatePWM+0x454>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a21      	ldr	r2, [pc, #132]	; (800323c <Timer_ActivatePWM+0x454>)
 80031b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031bc:	6013      	str	r3, [r2, #0]
					SetBit(GPIOA_CRL,29);
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <Timer_ActivatePWM+0x454>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1e      	ldr	r2, [pc, #120]	; (800323c <Timer_ActivatePWM+0x454>)
 80031c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031c8:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOA_CRL,28);
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <Timer_ActivatePWM+0x454>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1b      	ldr	r2, [pc, #108]	; (800323c <Timer_ActivatePWM+0x454>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,8);
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,9);
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ec:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,14);
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a17      	ldr	r2, [pc, #92]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,13);
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <Timer_ActivatePWM+0x468>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a14      	ldr	r2, [pc, #80]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003204:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,12);
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a11      	ldr	r2, [pc, #68]	; (8003250 <Timer_ActivatePWM+0x468>)
 800320c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003210:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,11);
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <Timer_ActivatePWM+0x468>)
 8003218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800321c:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCER,5);
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <Timer_ActivatePWM+0x46c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <Timer_ActivatePWM+0x46c>)
 8003224:	f023 0320 	bic.w	r3, r3, #32
 8003228:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCER,4);
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <Timer_ActivatePWM+0x46c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <Timer_ActivatePWM+0x46c>)
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	6013      	str	r3, [r2, #0]
					break;
 8003236:	e0ac      	b.n	8003392 <Timer_ActivatePWM+0x5aa>
 8003238:	40000040 	.word	0x40000040
 800323c:	40010800 	.word	0x40010800
 8003240:	4000001c 	.word	0x4000001c
 8003244:	40000020 	.word	0x40000020
 8003248:	4000042c 	.word	0x4000042c
 800324c:	40000434 	.word	0x40000434
 8003250:	40000418 	.word	0x40000418
 8003254:	40000420 	.word	0x40000420
 8003258:	40000438 	.word	0x40000438
					TIM3_CCR3 = duty_cycle - 1;
 800325c:	887b      	ldrh	r3, [r7, #2]
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	4b7e      	ldr	r3, [pc, #504]	; (800345c <Timer_ActivatePWM+0x674>)
 8003262:	601a      	str	r2, [r3, #0]
					SetBit(GPIOB_CRL,3);
 8003264:	4b7e      	ldr	r3, [pc, #504]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7d      	ldr	r2, [pc, #500]	; (8003460 <Timer_ActivatePWM+0x678>)
 800326a:	f043 0308 	orr.w	r3, r3, #8
 800326e:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,2);
 8003270:	4b7b      	ldr	r3, [pc, #492]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003276:	f023 0304 	bic.w	r3, r3, #4
 800327a:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,1);
 800327c:	4b78      	ldr	r3, [pc, #480]	; (8003460 <Timer_ActivatePWM+0x678>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a77      	ldr	r2, [pc, #476]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003282:	f043 0302 	orr.w	r3, r3, #2
 8003286:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,0);
 8003288:	4b75      	ldr	r3, [pc, #468]	; (8003460 <Timer_ActivatePWM+0x678>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a74      	ldr	r2, [pc, #464]	; (8003460 <Timer_ActivatePWM+0x678>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,0);
 8003294:	4b73      	ldr	r3, [pc, #460]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a72      	ldr	r2, [pc, #456]	; (8003464 <Timer_ActivatePWM+0x67c>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,1);
 80032a0:	4b70      	ldr	r3, [pc, #448]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6f      	ldr	r2, [pc, #444]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032a6:	f023 0302 	bic.w	r3, r3, #2
 80032aa:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,6);
 80032ac:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6c      	ldr	r2, [pc, #432]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b6:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,5);
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a69      	ldr	r2, [pc, #420]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,4);
 80032c4:	4b67      	ldr	r3, [pc, #412]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a66      	ldr	r2, [pc, #408]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032ca:	f023 0310 	bic.w	r3, r3, #16
 80032ce:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,3);
 80032d0:	4b64      	ldr	r3, [pc, #400]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a63      	ldr	r2, [pc, #396]	; (8003464 <Timer_ActivatePWM+0x67c>)
 80032d6:	f043 0308 	orr.w	r3, r3, #8
 80032da:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCER,9);
 80032dc:	4b62      	ldr	r3, [pc, #392]	; (8003468 <Timer_ActivatePWM+0x680>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a61      	ldr	r2, [pc, #388]	; (8003468 <Timer_ActivatePWM+0x680>)
 80032e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e6:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCER,8);
 80032e8:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <Timer_ActivatePWM+0x680>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a5e      	ldr	r2, [pc, #376]	; (8003468 <Timer_ActivatePWM+0x680>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]
					break;
 80032f4:	e04d      	b.n	8003392 <Timer_ActivatePWM+0x5aa>
					TIM3_CCR4 = duty_cycle - 1;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	4b5c      	ldr	r3, [pc, #368]	; (800346c <Timer_ActivatePWM+0x684>)
 80032fc:	601a      	str	r2, [r3, #0]
					SetBit(GPIOB_CRL,7);
 80032fe:	4b58      	ldr	r3, [pc, #352]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a57      	ldr	r2, [pc, #348]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003308:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,6);
 800330a:	4b55      	ldr	r3, [pc, #340]	; (8003460 <Timer_ActivatePWM+0x678>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a54      	ldr	r2, [pc, #336]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003310:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003314:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,5);
 8003316:	4b52      	ldr	r3, [pc, #328]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a51      	ldr	r2, [pc, #324]	; (8003460 <Timer_ActivatePWM+0x678>)
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,4);
 8003322:	4b4f      	ldr	r3, [pc, #316]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4e      	ldr	r2, [pc, #312]	; (8003460 <Timer_ActivatePWM+0x678>)
 8003328:	f023 0310 	bic.w	r3, r3, #16
 800332c:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,8);
 800332e:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a4c      	ldr	r2, [pc, #304]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,9);
 800333a:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <Timer_ActivatePWM+0x67c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a49      	ldr	r2, [pc, #292]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003344:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,14);
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a46      	ldr	r2, [pc, #280]	; (8003464 <Timer_ActivatePWM+0x67c>)
 800334c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003350:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,13);
 8003352:	4b44      	ldr	r3, [pc, #272]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a43      	ldr	r2, [pc, #268]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800335c:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,12);
 800335e:	4b41      	ldr	r3, [pc, #260]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a40      	ldr	r2, [pc, #256]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003368:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,11);
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <Timer_ActivatePWM+0x67c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <Timer_ActivatePWM+0x67c>)
 8003370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003374:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCER,13);
 8003376:	4b3c      	ldr	r3, [pc, #240]	; (8003468 <Timer_ActivatePWM+0x680>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <Timer_ActivatePWM+0x680>)
 800337c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003380:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCER,12);
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <Timer_ActivatePWM+0x680>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a38      	ldr	r2, [pc, #224]	; (8003468 <Timer_ActivatePWM+0x680>)
 8003388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800338c:	6013      	str	r3, [r2, #0]
					break;
 800338e:	e000      	b.n	8003392 <Timer_ActivatePWM+0x5aa>
				default:break;
 8003390:	bf00      	nop
			SetBit(TIM3_CR1,7);
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <Timer_ActivatePWM+0x688>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a36      	ldr	r2, [pc, #216]	; (8003470 <Timer_ActivatePWM+0x688>)
 8003398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339c:	6013      	str	r3, [r2, #0]
			break;
 800339e:	e15d      	b.n	800365c <Timer_ActivatePWM+0x874>
			TIM4_ARR = period ;
 80033a0:	4a34      	ldr	r2, [pc, #208]	; (8003474 <Timer_ActivatePWM+0x68c>)
 80033a2:	88bb      	ldrh	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
			switch(timer_channel)
 80033a6:	79bb      	ldrb	r3, [r7, #6]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	f200 814f 	bhi.w	800364c <Timer_ActivatePWM+0x864>
 80033ae:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <Timer_ActivatePWM+0x5cc>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	08003485 	.word	0x08003485
 80033bc:	0800351d 	.word	0x0800351d
 80033c0:	080035b5 	.word	0x080035b5
					TIM4_CCR1 = duty_cycle;
 80033c4:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <Timer_ActivatePWM+0x690>)
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,27);
 80033ca:	4b25      	ldr	r3, [pc, #148]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a24      	ldr	r2, [pc, #144]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033d4:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,26);
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a21      	ldr	r2, [pc, #132]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033e0:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,25);
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1e      	ldr	r2, [pc, #120]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033ec:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,24);
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <Timer_ActivatePWM+0x678>)
 80033f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f8:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,0);
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <Timer_ActivatePWM+0x694>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <Timer_ActivatePWM+0x694>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,1);
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <Timer_ActivatePWM+0x694>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1c      	ldr	r2, [pc, #112]	; (800347c <Timer_ActivatePWM+0x694>)
 800340c:	f023 0302 	bic.w	r3, r3, #2
 8003410:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,6);
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <Timer_ActivatePWM+0x694>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a19      	ldr	r2, [pc, #100]	; (800347c <Timer_ActivatePWM+0x694>)
 8003418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,5);
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <Timer_ActivatePWM+0x694>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a16      	ldr	r2, [pc, #88]	; (800347c <Timer_ActivatePWM+0x694>)
 8003424:	f043 0320 	orr.w	r3, r3, #32
 8003428:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,4);
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <Timer_ActivatePWM+0x694>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a13      	ldr	r2, [pc, #76]	; (800347c <Timer_ActivatePWM+0x694>)
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,3);
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <Timer_ActivatePWM+0x694>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a10      	ldr	r2, [pc, #64]	; (800347c <Timer_ActivatePWM+0x694>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCER,1);
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <Timer_ActivatePWM+0x698>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <Timer_ActivatePWM+0x698>)
 8003448:	f023 0302 	bic.w	r3, r3, #2
 800344c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCER,0);
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <Timer_ActivatePWM+0x698>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <Timer_ActivatePWM+0x698>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6013      	str	r3, [r2, #0]
					break;
 800345a:	e0f8      	b.n	800364e <Timer_ActivatePWM+0x866>
 800345c:	4000043c 	.word	0x4000043c
 8003460:	40010c00 	.word	0x40010c00
 8003464:	4000041c 	.word	0x4000041c
 8003468:	40000420 	.word	0x40000420
 800346c:	40000440 	.word	0x40000440
 8003470:	40000400 	.word	0x40000400
 8003474:	4000082c 	.word	0x4000082c
 8003478:	40000834 	.word	0x40000834
 800347c:	40000818 	.word	0x40000818
 8003480:	40000820 	.word	0x40000820
					TIM4_CCR2 = duty_cycle;
 8003484:	4a78      	ldr	r2, [pc, #480]	; (8003668 <Timer_ActivatePWM+0x880>)
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,31);
 800348a:	4b78      	ldr	r3, [pc, #480]	; (800366c <Timer_ActivatePWM+0x884>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a77      	ldr	r2, [pc, #476]	; (800366c <Timer_ActivatePWM+0x884>)
 8003490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003494:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,30);
 8003496:	4b75      	ldr	r3, [pc, #468]	; (800366c <Timer_ActivatePWM+0x884>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a74      	ldr	r2, [pc, #464]	; (800366c <Timer_ActivatePWM+0x884>)
 800349c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034a0:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,29);
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <Timer_ActivatePWM+0x884>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a71      	ldr	r2, [pc, #452]	; (800366c <Timer_ActivatePWM+0x884>)
 80034a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034ac:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,28);
 80034ae:	4b6f      	ldr	r3, [pc, #444]	; (800366c <Timer_ActivatePWM+0x884>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6e      	ldr	r2, [pc, #440]	; (800366c <Timer_ActivatePWM+0x884>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,8);
 80034ba:	4b6d      	ldr	r3, [pc, #436]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6c      	ldr	r2, [pc, #432]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,9);
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a69      	ldr	r2, [pc, #420]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d0:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,14);
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a66      	ldr	r2, [pc, #408]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,13);
 80034de:	4b64      	ldr	r3, [pc, #400]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a63      	ldr	r2, [pc, #396]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034e8:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,12);
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a60      	ldr	r2, [pc, #384]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f4:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,11);
 80034f6:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <Timer_ActivatePWM+0x888>)
 80034fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003500:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCER,5);
 8003502:	4b5c      	ldr	r3, [pc, #368]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a5b      	ldr	r2, [pc, #364]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003508:	f023 0320 	bic.w	r3, r3, #32
 800350c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCER,4);
 800350e:	4b59      	ldr	r3, [pc, #356]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a58      	ldr	r2, [pc, #352]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003514:	f043 0310 	orr.w	r3, r3, #16
 8003518:	6013      	str	r3, [r2, #0]
					break;
 800351a:	e098      	b.n	800364e <Timer_ActivatePWM+0x866>
					TIM4_CCR3 = duty_cycle;
 800351c:	4a56      	ldr	r2, [pc, #344]	; (8003678 <Timer_ActivatePWM+0x890>)
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRH,3);
 8003522:	4b56      	ldr	r3, [pc, #344]	; (800367c <Timer_ActivatePWM+0x894>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a55      	ldr	r2, [pc, #340]	; (800367c <Timer_ActivatePWM+0x894>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRH,2);
 800352e:	4b53      	ldr	r3, [pc, #332]	; (800367c <Timer_ActivatePWM+0x894>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a52      	ldr	r2, [pc, #328]	; (800367c <Timer_ActivatePWM+0x894>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRH,1);
 800353a:	4b50      	ldr	r3, [pc, #320]	; (800367c <Timer_ActivatePWM+0x894>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4f      	ldr	r2, [pc, #316]	; (800367c <Timer_ActivatePWM+0x894>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRH,0);
 8003546:	4b4d      	ldr	r3, [pc, #308]	; (800367c <Timer_ActivatePWM+0x894>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a4c      	ldr	r2, [pc, #304]	; (800367c <Timer_ActivatePWM+0x894>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,0);
 8003552:	4b4b      	ldr	r3, [pc, #300]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a4a      	ldr	r2, [pc, #296]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,1);
 800355e:	4b48      	ldr	r3, [pc, #288]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a47      	ldr	r2, [pc, #284]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003564:	f023 0302 	bic.w	r3, r3, #2
 8003568:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,6);
 800356a:	4b45      	ldr	r3, [pc, #276]	; (8003680 <Timer_ActivatePWM+0x898>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a44      	ldr	r2, [pc, #272]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003574:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,5);
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a41      	ldr	r2, [pc, #260]	; (8003680 <Timer_ActivatePWM+0x898>)
 800357c:	f043 0320 	orr.w	r3, r3, #32
 8003580:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,4);
 8003582:	4b3f      	ldr	r3, [pc, #252]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a3e      	ldr	r2, [pc, #248]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003588:	f023 0310 	bic.w	r3, r3, #16
 800358c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,3);
 800358e:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCER,9);
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <Timer_ActivatePWM+0x88c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a35      	ldr	r2, [pc, #212]	; (8003674 <Timer_ActivatePWM+0x88c>)
 80035a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035a4:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCER,8);
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <Timer_ActivatePWM+0x88c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a32      	ldr	r2, [pc, #200]	; (8003674 <Timer_ActivatePWM+0x88c>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]
					break;
 80035b2:	e04c      	b.n	800364e <Timer_ActivatePWM+0x866>
					TIM4_CCR4 = duty_cycle;
 80035b4:	4a33      	ldr	r2, [pc, #204]	; (8003684 <Timer_ActivatePWM+0x89c>)
 80035b6:	887b      	ldrh	r3, [r7, #2]
 80035b8:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,27);
 80035ba:	4b2c      	ldr	r3, [pc, #176]	; (800366c <Timer_ActivatePWM+0x884>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2b      	ldr	r2, [pc, #172]	; (800366c <Timer_ActivatePWM+0x884>)
 80035c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035c4:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,26);
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <Timer_ActivatePWM+0x884>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a28      	ldr	r2, [pc, #160]	; (800366c <Timer_ActivatePWM+0x884>)
 80035cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035d0:	6013      	str	r3, [r2, #0]
					SetBit(GPIOB_CRL,25);
 80035d2:	4b26      	ldr	r3, [pc, #152]	; (800366c <Timer_ActivatePWM+0x884>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a25      	ldr	r2, [pc, #148]	; (800366c <Timer_ActivatePWM+0x884>)
 80035d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035dc:	6013      	str	r3, [r2, #0]
					ClrBit(GPIOB_CRL,24);
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <Timer_ActivatePWM+0x884>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a22      	ldr	r2, [pc, #136]	; (800366c <Timer_ActivatePWM+0x884>)
 80035e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e8:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,8);
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <Timer_ActivatePWM+0x898>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <Timer_ActivatePWM+0x898>)
 80035f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f4:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,9);
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <Timer_ActivatePWM+0x898>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a21      	ldr	r2, [pc, #132]	; (8003680 <Timer_ActivatePWM+0x898>)
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,14);
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,13);
 800360e:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003618:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,12);
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <Timer_ActivatePWM+0x898>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003624:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,11);
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <Timer_ActivatePWM+0x898>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a15      	ldr	r2, [pc, #84]	; (8003680 <Timer_ActivatePWM+0x898>)
 800362c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003630:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCER,13);
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCER,12);
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <Timer_ActivatePWM+0x88c>)
 8003644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003648:	6013      	str	r3, [r2, #0]
					break;
 800364a:	e000      	b.n	800364e <Timer_ActivatePWM+0x866>
				default:break;
 800364c:	bf00      	nop
			SetBit(TIM4_CR1,7);
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <Timer_ActivatePWM+0x8a0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <Timer_ActivatePWM+0x8a0>)
 8003654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003658:	6013      	str	r3, [r2, #0]
			break;
 800365a:	bf00      	nop
	}
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bc90      	pop	{r4, r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40000838 	.word	0x40000838
 800366c:	40010c00 	.word	0x40010c00
 8003670:	40000818 	.word	0x40000818
 8003674:	40000820 	.word	0x40000820
 8003678:	4000083c 	.word	0x4000083c
 800367c:	40010c04 	.word	0x40010c04
 8003680:	4000081c 	.word	0x4000081c
 8003684:	40000840 	.word	0x40000840
 8003688:	40000800 	.word	0x40000800

0800368c <Timer_ActivateICU>:
			break;
	}
}

void Timer_ActivateICU(TIMER timer, TIMER_CHANNEL timer_channel,CAPTURE_MODE capture_mode)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	71fb      	strb	r3, [r7, #7]
 8003696:	460b      	mov	r3, r1
 8003698:	71bb      	strb	r3, [r7, #6]
 800369a:	4613      	mov	r3, r2
 800369c:	717b      	strb	r3, [r7, #5]
	switch(timer)
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	f000 8104 	beq.w	80038ae <Timer_ActivateICU+0x222>
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	f000 8223 	beq.w	8003af2 <Timer_ActivateICU+0x466>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d000      	beq.n	80036b2 <Timer_ActivateICU+0x26>
					SetBit(TIM4_CCER,12);
					break;
				default:break;
			}
			break;
		default:break;
 80036b0:	e32b      	b.n	8003d0a <Timer_ActivateICU+0x67e>
				switch(timer_channel)
 80036b2:	79bb      	ldrb	r3, [r7, #6]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	f200 80f8 	bhi.w	80038aa <Timer_ActivateICU+0x21e>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <Timer_ActivateICU+0x34>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	08003779 	.word	0x08003779
 80036c8:	080037df 	.word	0x080037df
 80036cc:	08003845 	.word	0x08003845
						GPIO_PinDirection(PORTA,PIN0,INPUT_PIN,Floating);
 80036d0:	2305      	movs	r3, #5
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7fd fbee 	bl	8000eb8 <GPIO_PinDirection>
						SetBit(TIM2_CCMR1,0);
 80036dc:	4b98      	ldr	r3, [pc, #608]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a97      	ldr	r2, [pc, #604]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
						ClrBit(TIM2_CCMR1,1);
 80036e8:	4b95      	ldr	r3, [pc, #596]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a94      	ldr	r2, [pc, #592]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80036ee:	f023 0302 	bic.w	r3, r3, #2
 80036f2:	6013      	str	r3, [r2, #0]
						SetBit(TIM2_CCMR1,5);
 80036f4:	4b92      	ldr	r3, [pc, #584]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a91      	ldr	r2, [pc, #580]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80036fa:	f043 0320 	orr.w	r3, r3, #32
 80036fe:	6013      	str	r3, [r2, #0]
						switch(capture_mode)
 8003700:	797b      	ldrb	r3, [r7, #5]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d00b      	beq.n	800371e <Timer_ActivateICU+0x92>
 8003706:	2b02      	cmp	r3, #2
 8003708:	d010      	beq.n	800372c <Timer_ActivateICU+0xa0>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d000      	beq.n	8003710 <Timer_ActivateICU+0x84>
							default:break;
 800370e:	e02c      	b.n	800376a <Timer_ActivateICU+0xde>
								ClrBit(TIM2_CCER,1);
 8003710:	4b8c      	ldr	r3, [pc, #560]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a8b      	ldr	r2, [pc, #556]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003716:	f023 0302 	bic.w	r3, r3, #2
 800371a:	6013      	str	r3, [r2, #0]
								break;
 800371c:	e025      	b.n	800376a <Timer_ActivateICU+0xde>
								SetBit(TIM2_CCER,1);
 800371e:	4b89      	ldr	r3, [pc, #548]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a88      	ldr	r2, [pc, #544]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6013      	str	r3, [r2, #0]
								break;
 800372a:	e01e      	b.n	800376a <Timer_ActivateICU+0xde>
								ClrBit(TIM2_SMCR,4);
 800372c:	4b86      	ldr	r3, [pc, #536]	; (8003948 <Timer_ActivateICU+0x2bc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a85      	ldr	r2, [pc, #532]	; (8003948 <Timer_ActivateICU+0x2bc>)
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	6013      	str	r3, [r2, #0]
								ClrBit(TIM2_SMCR,5);
 8003738:	4b83      	ldr	r3, [pc, #524]	; (8003948 <Timer_ActivateICU+0x2bc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a82      	ldr	r2, [pc, #520]	; (8003948 <Timer_ActivateICU+0x2bc>)
 800373e:	f023 0320 	bic.w	r3, r3, #32
 8003742:	6013      	str	r3, [r2, #0]
								SetBit(TIM2_SMCR,6);
 8003744:	4b80      	ldr	r3, [pc, #512]	; (8003948 <Timer_ActivateICU+0x2bc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a7f      	ldr	r2, [pc, #508]	; (8003948 <Timer_ActivateICU+0x2bc>)
 800374a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374e:	6013      	str	r3, [r2, #0]
								SetBit(TIM2_CCMR1,0);
 8003750:	4b7b      	ldr	r3, [pc, #492]	; (8003940 <Timer_ActivateICU+0x2b4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <Timer_ActivateICU+0x2b4>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6013      	str	r3, [r2, #0]
								SetBit(TIM2_CCMR1,1);
 800375c:	4b78      	ldr	r3, [pc, #480]	; (8003940 <Timer_ActivateICU+0x2b4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a77      	ldr	r2, [pc, #476]	; (8003940 <Timer_ActivateICU+0x2b4>)
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	6013      	str	r3, [r2, #0]
								break;
 8003768:	bf00      	nop
						SetBit(TIM2_CCER,0); // Enable Capture Mode
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <Timer_ActivateICU+0x2b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6013      	str	r3, [r2, #0]
						break;
 8003776:	e099      	b.n	80038ac <Timer_ActivateICU+0x220>
						GPIO_PinDirection(PORTA,PIN1,INPUT_PIN,Floating);
 8003778:	2305      	movs	r3, #5
 800377a:	2200      	movs	r2, #0
 800377c:	2101      	movs	r1, #1
 800377e:	2000      	movs	r0, #0
 8003780:	f7fd fb9a 	bl	8000eb8 <GPIO_PinDirection>
						SetBit(TIM2_CCMR1,8);
 8003784:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <Timer_ActivateICU+0x2b4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6d      	ldr	r2, [pc, #436]	; (8003940 <Timer_ActivateICU+0x2b4>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]
						ClrBit(TIM2_CCMR1,9);
 8003790:	4b6b      	ldr	r3, [pc, #428]	; (8003940 <Timer_ActivateICU+0x2b4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6a      	ldr	r2, [pc, #424]	; (8003940 <Timer_ActivateICU+0x2b4>)
 8003796:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800379a:	6013      	str	r3, [r2, #0]
						SetBit(TIM2_CCMR1,13);
 800379c:	4b68      	ldr	r3, [pc, #416]	; (8003940 <Timer_ActivateICU+0x2b4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a67      	ldr	r2, [pc, #412]	; (8003940 <Timer_ActivateICU+0x2b4>)
 80037a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037a6:	6013      	str	r3, [r2, #0]
						switch(capture_mode)
 80037a8:	797b      	ldrb	r3, [r7, #5]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <Timer_ActivateICU+0x128>
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d007      	beq.n	80037c2 <Timer_ActivateICU+0x136>
							default:break;
 80037b2:	e00d      	b.n	80037d0 <Timer_ActivateICU+0x144>
								ClrBit(TIM2_CCER,5);
 80037b4:	4b63      	ldr	r3, [pc, #396]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a62      	ldr	r2, [pc, #392]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80037ba:	f023 0320 	bic.w	r3, r3, #32
 80037be:	6013      	str	r3, [r2, #0]
								break;
 80037c0:	e006      	b.n	80037d0 <Timer_ActivateICU+0x144>
								SetBit(TIM2_CCER,5);
 80037c2:	4b60      	ldr	r3, [pc, #384]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5f      	ldr	r2, [pc, #380]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80037c8:	f043 0320 	orr.w	r3, r3, #32
 80037cc:	6013      	str	r3, [r2, #0]
								break;
 80037ce:	bf00      	nop
						SetBit(TIM2_CCER,4);
 80037d0:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5b      	ldr	r2, [pc, #364]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80037d6:	f043 0310 	orr.w	r3, r3, #16
 80037da:	6013      	str	r3, [r2, #0]
						break;
 80037dc:	e066      	b.n	80038ac <Timer_ActivateICU+0x220>
						GPIO_PinDirection(PORTA,PIN2,INPUT_PIN,Floating);
 80037de:	2305      	movs	r3, #5
 80037e0:	2200      	movs	r2, #0
 80037e2:	2102      	movs	r1, #2
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fd fb67 	bl	8000eb8 <GPIO_PinDirection>
						SetBit(TIM2_CCMR2,0);
 80037ea:	4b58      	ldr	r3, [pc, #352]	; (800394c <Timer_ActivateICU+0x2c0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a57      	ldr	r2, [pc, #348]	; (800394c <Timer_ActivateICU+0x2c0>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6013      	str	r3, [r2, #0]
						ClrBit(TIM2_CCMR2,1);
 80037f6:	4b55      	ldr	r3, [pc, #340]	; (800394c <Timer_ActivateICU+0x2c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a54      	ldr	r2, [pc, #336]	; (800394c <Timer_ActivateICU+0x2c0>)
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	6013      	str	r3, [r2, #0]
						SetBit(TIM2_CCMR2,5);
 8003802:	4b52      	ldr	r3, [pc, #328]	; (800394c <Timer_ActivateICU+0x2c0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a51      	ldr	r2, [pc, #324]	; (800394c <Timer_ActivateICU+0x2c0>)
 8003808:	f043 0320 	orr.w	r3, r3, #32
 800380c:	6013      	str	r3, [r2, #0]
						switch(capture_mode)
 800380e:	797b      	ldrb	r3, [r7, #5]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <Timer_ActivateICU+0x18e>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d007      	beq.n	8003828 <Timer_ActivateICU+0x19c>
							default:break;
 8003818:	e00d      	b.n	8003836 <Timer_ActivateICU+0x1aa>
								ClrBit(TIM2_CCER,9);
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <Timer_ActivateICU+0x2b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a49      	ldr	r2, [pc, #292]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003824:	6013      	str	r3, [r2, #0]
								break;
 8003826:	e006      	b.n	8003836 <Timer_ActivateICU+0x1aa>
								SetBit(TIM2_CCER,9);
 8003828:	4b46      	ldr	r3, [pc, #280]	; (8003944 <Timer_ActivateICU+0x2b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a45      	ldr	r2, [pc, #276]	; (8003944 <Timer_ActivateICU+0x2b8>)
 800382e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003832:	6013      	str	r3, [r2, #0]
								break;
 8003834:	bf00      	nop
						SetBit(TIM2_CCER,8);
 8003836:	4b43      	ldr	r3, [pc, #268]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a42      	ldr	r2, [pc, #264]	; (8003944 <Timer_ActivateICU+0x2b8>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003840:	6013      	str	r3, [r2, #0]
						break;
 8003842:	e033      	b.n	80038ac <Timer_ActivateICU+0x220>
						GPIO_PinDirection(PORTA,PIN3,INPUT_PIN,Floating);
 8003844:	2305      	movs	r3, #5
 8003846:	2200      	movs	r2, #0
 8003848:	2103      	movs	r1, #3
 800384a:	2000      	movs	r0, #0
 800384c:	f7fd fb34 	bl	8000eb8 <GPIO_PinDirection>
						SetBit(TIM2_CCMR2,8);
 8003850:	4b3e      	ldr	r3, [pc, #248]	; (800394c <Timer_ActivateICU+0x2c0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a3d      	ldr	r2, [pc, #244]	; (800394c <Timer_ActivateICU+0x2c0>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385a:	6013      	str	r3, [r2, #0]
						ClrBit(TIM2_CCMR2,9);
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <Timer_ActivateICU+0x2c0>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3a      	ldr	r2, [pc, #232]	; (800394c <Timer_ActivateICU+0x2c0>)
 8003862:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003866:	6013      	str	r3, [r2, #0]
						SetBit(TIM2_CCMR2,13);
 8003868:	4b38      	ldr	r3, [pc, #224]	; (800394c <Timer_ActivateICU+0x2c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a37      	ldr	r2, [pc, #220]	; (800394c <Timer_ActivateICU+0x2c0>)
 800386e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003872:	6013      	str	r3, [r2, #0]
						switch(capture_mode)
 8003874:	797b      	ldrb	r3, [r7, #5]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <Timer_ActivateICU+0x1f4>
 800387a:	2b01      	cmp	r3, #1
 800387c:	d007      	beq.n	800388e <Timer_ActivateICU+0x202>
							default:break;
 800387e:	e00d      	b.n	800389c <Timer_ActivateICU+0x210>
								ClrBit(TIM2_CCER,13);
 8003880:	4b30      	ldr	r3, [pc, #192]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2f      	ldr	r2, [pc, #188]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388a:	6013      	str	r3, [r2, #0]
								break;
 800388c:	e006      	b.n	800389c <Timer_ActivateICU+0x210>
								SetBit(TIM2_CCER,13);
 800388e:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <Timer_ActivateICU+0x2b8>)
 8003894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003898:	6013      	str	r3, [r2, #0]
								break;
 800389a:	bf00      	nop
						SetBit(TIM2_CCER,12);
 800389c:	4b29      	ldr	r3, [pc, #164]	; (8003944 <Timer_ActivateICU+0x2b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a28      	ldr	r2, [pc, #160]	; (8003944 <Timer_ActivateICU+0x2b8>)
 80038a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038a6:	6013      	str	r3, [r2, #0]
						break;
 80038a8:	e000      	b.n	80038ac <Timer_ActivateICU+0x220>
					default:break;
 80038aa:	bf00      	nop
			break;
 80038ac:	e22d      	b.n	8003d0a <Timer_ActivateICU+0x67e>
			switch(timer_channel)
 80038ae:	79bb      	ldrb	r3, [r7, #6]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	f200 811c 	bhi.w	8003aee <Timer_ActivateICU+0x462>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <Timer_ActivateICU+0x230>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	080039a5 	.word	0x080039a5
 80038c4:	08003a23 	.word	0x08003a23
 80038c8:	08003a89 	.word	0x08003a89
					GPIO_PinDirection(PORTA,PIN6,INPUT_PIN,Floating);
 80038cc:	2305      	movs	r3, #5
 80038ce:	2200      	movs	r2, #0
 80038d0:	2106      	movs	r1, #6
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7fd faf0 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM3_CCMR1,0);
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,1);
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038ea:	f023 0302 	bic.w	r3, r3, #2
 80038ee:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,4);
 80038f0:	4b17      	ldr	r3, [pc, #92]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038f6:	f043 0310 	orr.w	r3, r3, #16
 80038fa:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,5);
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <Timer_ActivateICU+0x2c4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a13      	ldr	r2, [pc, #76]	; (8003950 <Timer_ActivateICU+0x2c4>)
 8003902:	f043 0320 	orr.w	r3, r3, #32
 8003906:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,6);
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <Timer_ActivateICU+0x2c4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a10      	ldr	r2, [pc, #64]	; (8003950 <Timer_ActivateICU+0x2c4>)
 800390e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003912:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003914:	797b      	ldrb	r3, [r7, #5]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00b      	beq.n	8003932 <Timer_ActivateICU+0x2a6>
 800391a:	2b02      	cmp	r3, #2
 800391c:	d01c      	beq.n	8003958 <Timer_ActivateICU+0x2cc>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d000      	beq.n	8003924 <Timer_ActivateICU+0x298>
						default:break;
 8003922:	e038      	b.n	8003996 <Timer_ActivateICU+0x30a>
							ClrBit(TIM3_CCER,1);
 8003924:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <Timer_ActivateICU+0x2c8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <Timer_ActivateICU+0x2c8>)
 800392a:	f023 0302 	bic.w	r3, r3, #2
 800392e:	6013      	str	r3, [r2, #0]
							break;
 8003930:	e031      	b.n	8003996 <Timer_ActivateICU+0x30a>
							SetBit(TIM3_CCER,1);
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <Timer_ActivateICU+0x2c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <Timer_ActivateICU+0x2c8>)
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	6013      	str	r3, [r2, #0]
							break;
 800393e:	e02a      	b.n	8003996 <Timer_ActivateICU+0x30a>
 8003940:	40000018 	.word	0x40000018
 8003944:	40000020 	.word	0x40000020
 8003948:	40000008 	.word	0x40000008
 800394c:	4000001c 	.word	0x4000001c
 8003950:	40000418 	.word	0x40000418
 8003954:	40000420 	.word	0x40000420
							ClrBit(TIM3_SMCR,4);
 8003958:	4b97      	ldr	r3, [pc, #604]	; (8003bb8 <Timer_ActivateICU+0x52c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a96      	ldr	r2, [pc, #600]	; (8003bb8 <Timer_ActivateICU+0x52c>)
 800395e:	f023 0310 	bic.w	r3, r3, #16
 8003962:	6013      	str	r3, [r2, #0]
							ClrBit(TIM3_SMCR,5);
 8003964:	4b94      	ldr	r3, [pc, #592]	; (8003bb8 <Timer_ActivateICU+0x52c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a93      	ldr	r2, [pc, #588]	; (8003bb8 <Timer_ActivateICU+0x52c>)
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	6013      	str	r3, [r2, #0]
							SetBit(TIM3_SMCR,6);
 8003970:	4b91      	ldr	r3, [pc, #580]	; (8003bb8 <Timer_ActivateICU+0x52c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a90      	ldr	r2, [pc, #576]	; (8003bb8 <Timer_ActivateICU+0x52c>)
 8003976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800397a:	6013      	str	r3, [r2, #0]
							SetBit(TIM3_CCMR1,0);
 800397c:	4b8f      	ldr	r3, [pc, #572]	; (8003bbc <Timer_ActivateICU+0x530>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a8e      	ldr	r2, [pc, #568]	; (8003bbc <Timer_ActivateICU+0x530>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]
							SetBit(TIM3_CCMR1,1);
 8003988:	4b8c      	ldr	r3, [pc, #560]	; (8003bbc <Timer_ActivateICU+0x530>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a8b      	ldr	r2, [pc, #556]	; (8003bbc <Timer_ActivateICU+0x530>)
 800398e:	f043 0302 	orr.w	r3, r3, #2
 8003992:	6013      	str	r3, [r2, #0]
							break;
 8003994:	bf00      	nop
					SetBit(TIM3_CCER,0);
 8003996:	4b8a      	ldr	r3, [pc, #552]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a89      	ldr	r2, [pc, #548]	; (8003bc0 <Timer_ActivateICU+0x534>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6013      	str	r3, [r2, #0]
					break;
 80039a2:	e0a5      	b.n	8003af0 <Timer_ActivateICU+0x464>
					GPIO_PinDirection(PORTA,PIN7,INPUT_PIN,Floating);
 80039a4:	2305      	movs	r3, #5
 80039a6:	2200      	movs	r2, #0
 80039a8:	2107      	movs	r1, #7
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7fd fa84 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM3_CCMR1,8);
 80039b0:	4b82      	ldr	r3, [pc, #520]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a81      	ldr	r2, [pc, #516]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR1,9);
 80039bc:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039c6:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,12);
 80039c8:	4b7c      	ldr	r3, [pc, #496]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7b      	ldr	r2, [pc, #492]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039d2:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,13);
 80039d4:	4b79      	ldr	r3, [pc, #484]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a78      	ldr	r2, [pc, #480]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039de:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR1,14);
 80039e0:	4b76      	ldr	r3, [pc, #472]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a75      	ldr	r2, [pc, #468]	; (8003bbc <Timer_ActivateICU+0x530>)
 80039e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ea:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 80039ec:	797b      	ldrb	r3, [r7, #5]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <Timer_ActivateICU+0x36c>
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d007      	beq.n	8003a06 <Timer_ActivateICU+0x37a>
						default:break;
 80039f6:	e00d      	b.n	8003a14 <Timer_ActivateICU+0x388>
							ClrBit(TIM3_CCER,5);
 80039f8:	4b71      	ldr	r3, [pc, #452]	; (8003bc0 <Timer_ActivateICU+0x534>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a70      	ldr	r2, [pc, #448]	; (8003bc0 <Timer_ActivateICU+0x534>)
 80039fe:	f023 0320 	bic.w	r3, r3, #32
 8003a02:	6013      	str	r3, [r2, #0]
							break;
 8003a04:	e006      	b.n	8003a14 <Timer_ActivateICU+0x388>
							SetBit(TIM3_CCER,5);
 8003a06:	4b6e      	ldr	r3, [pc, #440]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6d      	ldr	r2, [pc, #436]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a0c:	f043 0320 	orr.w	r3, r3, #32
 8003a10:	6013      	str	r3, [r2, #0]
							break;
 8003a12:	bf00      	nop
					SetBit(TIM3_CCER,4);
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a69      	ldr	r2, [pc, #420]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a1a:	f043 0310 	orr.w	r3, r3, #16
 8003a1e:	6013      	str	r3, [r2, #0]
					break;
 8003a20:	e066      	b.n	8003af0 <Timer_ActivateICU+0x464>
					GPIO_PinDirection(PORTB,PIN0,INPUT_PIN,Floating);
 8003a22:	2305      	movs	r3, #5
 8003a24:	2200      	movs	r2, #0
 8003a26:	2100      	movs	r1, #0
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7fd fa45 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM3_CCMR2,0);
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a64      	ldr	r2, [pc, #400]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,1);
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a61      	ldr	r2, [pc, #388]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a40:	f023 0302 	bic.w	r3, r3, #2
 8003a44:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,5);
 8003a46:	4b5f      	ldr	r3, [pc, #380]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5e      	ldr	r2, [pc, #376]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a4c:	f043 0320 	orr.w	r3, r3, #32
 8003a50:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003a52:	797b      	ldrb	r3, [r7, #5]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <Timer_ActivateICU+0x3d2>
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d007      	beq.n	8003a6c <Timer_ActivateICU+0x3e0>
						default:break;
 8003a5c:	e00d      	b.n	8003a7a <Timer_ActivateICU+0x3ee>
							ClrBit(TIM3_CCER,9);
 8003a5e:	4b58      	ldr	r3, [pc, #352]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a57      	ldr	r2, [pc, #348]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a68:	6013      	str	r3, [r2, #0]
							break;
 8003a6a:	e006      	b.n	8003a7a <Timer_ActivateICU+0x3ee>
							SetBit(TIM3_CCER,9);
 8003a6c:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a53      	ldr	r2, [pc, #332]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a76:	6013      	str	r3, [r2, #0]
							break;
 8003a78:	bf00      	nop
					SetBit(TIM3_CCER,8);
 8003a7a:	4b51      	ldr	r3, [pc, #324]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a84:	6013      	str	r3, [r2, #0]
					break;
 8003a86:	e033      	b.n	8003af0 <Timer_ActivateICU+0x464>
					GPIO_PinDirection(PORTB,PIN1,INPUT_PIN,Floating);
 8003a88:	2305      	movs	r3, #5
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7fd fa12 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM3_CCMR2,8);
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]
					ClrBit(TIM3_CCMR2,9);
 8003aa0:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a47      	ldr	r2, [pc, #284]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003aa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003aaa:	6013      	str	r3, [r2, #0]
					SetBit(TIM3_CCMR2,13);
 8003aac:	4b45      	ldr	r3, [pc, #276]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a44      	ldr	r2, [pc, #272]	; (8003bc4 <Timer_ActivateICU+0x538>)
 8003ab2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ab6:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003ab8:	797b      	ldrb	r3, [r7, #5]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <Timer_ActivateICU+0x438>
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d007      	beq.n	8003ad2 <Timer_ActivateICU+0x446>
						default:break;
 8003ac2:	e00d      	b.n	8003ae0 <Timer_ActivateICU+0x454>
							ClrBit(TIM3_CCER,13);
 8003ac4:	4b3e      	ldr	r3, [pc, #248]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3d      	ldr	r2, [pc, #244]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ace:	6013      	str	r3, [r2, #0]
							break;
 8003ad0:	e006      	b.n	8003ae0 <Timer_ActivateICU+0x454>
							SetBit(TIM3_CCER,13);
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3a      	ldr	r2, [pc, #232]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003adc:	6013      	str	r3, [r2, #0]
							break;
 8003ade:	bf00      	nop
					SetBit(TIM3_CCER,12);
 8003ae0:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a36      	ldr	r2, [pc, #216]	; (8003bc0 <Timer_ActivateICU+0x534>)
 8003ae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aea:	6013      	str	r3, [r2, #0]
					break;
 8003aec:	e000      	b.n	8003af0 <Timer_ActivateICU+0x464>
				default:break;
 8003aee:	bf00      	nop
			break;
 8003af0:	e10b      	b.n	8003d0a <Timer_ActivateICU+0x67e>
			switch(timer_channel)
 8003af2:	79bb      	ldrb	r3, [r7, #6]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	f200 8106 	bhi.w	8003d06 <Timer_ActivateICU+0x67a>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <Timer_ActivateICU+0x474>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b11 	.word	0x08003b11
 8003b04:	08003bd5 	.word	0x08003bd5
 8003b08:	08003c3b 	.word	0x08003c3b
 8003b0c:	08003ca1 	.word	0x08003ca1
					GPIO_PinDirection(PORTB,PIN6,INPUT_PIN,Floating);
 8003b10:	2305      	movs	r3, #5
 8003b12:	2200      	movs	r2, #0
 8003b14:	2106      	movs	r1, #6
 8003b16:	2001      	movs	r0, #1
 8003b18:	f7fd f9ce 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM4_CCMR1,0);
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,1);
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b2e:	f023 0302 	bic.w	r3, r3, #2
 8003b32:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,5);
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b3a:	f043 0320 	orr.w	r3, r3, #32
 8003b3e:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003b40:	797b      	ldrb	r3, [r7, #5]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d00b      	beq.n	8003b5e <Timer_ActivateICU+0x4d2>
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d010      	beq.n	8003b6c <Timer_ActivateICU+0x4e0>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d000      	beq.n	8003b50 <Timer_ActivateICU+0x4c4>
						default:break;
 8003b4e:	e02c      	b.n	8003baa <Timer_ActivateICU+0x51e>
							ClrBit(TIM4_CCER,1);
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <Timer_ActivateICU+0x540>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <Timer_ActivateICU+0x540>)
 8003b56:	f023 0302 	bic.w	r3, r3, #2
 8003b5a:	6013      	str	r3, [r2, #0]
							break;
 8003b5c:	e025      	b.n	8003baa <Timer_ActivateICU+0x51e>
							SetBit(TIM4_CCER,1);
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <Timer_ActivateICU+0x540>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <Timer_ActivateICU+0x540>)
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	6013      	str	r3, [r2, #0]
							break;
 8003b6a:	e01e      	b.n	8003baa <Timer_ActivateICU+0x51e>
							ClrBit(TIM4_SMCR,4);
 8003b6c:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <Timer_ActivateICU+0x544>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <Timer_ActivateICU+0x544>)
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	6013      	str	r3, [r2, #0]
							ClrBit(TIM4_SMCR,5);
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <Timer_ActivateICU+0x544>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <Timer_ActivateICU+0x544>)
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	6013      	str	r3, [r2, #0]
							SetBit(TIM4_SMCR,6);
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <Timer_ActivateICU+0x544>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <Timer_ActivateICU+0x544>)
 8003b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b8e:	6013      	str	r3, [r2, #0]
							SetBit(TIM4_CCMR1,0);
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]
							SetBit(TIM4_CCMR1,1);
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <Timer_ActivateICU+0x53c>)
 8003ba2:	f043 0302 	orr.w	r3, r3, #2
 8003ba6:	6013      	str	r3, [r2, #0]
							break;
 8003ba8:	bf00      	nop
					SetBit(TIM4_CCER,0);
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <Timer_ActivateICU+0x540>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a07      	ldr	r2, [pc, #28]	; (8003bcc <Timer_ActivateICU+0x540>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]
					break;
 8003bb6:	e0a7      	b.n	8003d08 <Timer_ActivateICU+0x67c>
 8003bb8:	40000408 	.word	0x40000408
 8003bbc:	40000418 	.word	0x40000418
 8003bc0:	40000420 	.word	0x40000420
 8003bc4:	4000041c 	.word	0x4000041c
 8003bc8:	40000818 	.word	0x40000818
 8003bcc:	40000820 	.word	0x40000820
 8003bd0:	40000808 	.word	0x40000808
					GPIO_PinDirection(PORTB,PIN7,INPUT_PIN,Floating);
 8003bd4:	2305      	movs	r3, #5
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2107      	movs	r1, #7
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f7fd f96c 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM4_CCMR1,8);
 8003be0:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <Timer_ActivateICU+0x688>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <Timer_ActivateICU+0x688>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR1,9);
 8003bec:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <Timer_ActivateICU+0x688>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a48      	ldr	r2, [pc, #288]	; (8003d14 <Timer_ActivateICU+0x688>)
 8003bf2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf6:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR1,13);
 8003bf8:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <Timer_ActivateICU+0x688>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a45      	ldr	r2, [pc, #276]	; (8003d14 <Timer_ActivateICU+0x688>)
 8003bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c02:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003c04:	797b      	ldrb	r3, [r7, #5]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <Timer_ActivateICU+0x584>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d007      	beq.n	8003c1e <Timer_ActivateICU+0x592>
						default:break;
 8003c0e:	e00d      	b.n	8003c2c <Timer_ActivateICU+0x5a0>
							ClrBit(TIM4_CCER,5);
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c16:	f023 0320 	bic.w	r3, r3, #32
 8003c1a:	6013      	str	r3, [r2, #0]
							break;
 8003c1c:	e006      	b.n	8003c2c <Timer_ActivateICU+0x5a0>
							SetBit(TIM4_CCER,5);
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c24:	f043 0320 	orr.w	r3, r3, #32
 8003c28:	6013      	str	r3, [r2, #0]
							break;
 8003c2a:	bf00      	nop
					SetBit(TIM4_CCER,4);
 8003c2c:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a39      	ldr	r2, [pc, #228]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c32:	f043 0310 	orr.w	r3, r3, #16
 8003c36:	6013      	str	r3, [r2, #0]
					break;
 8003c38:	e066      	b.n	8003d08 <Timer_ActivateICU+0x67c>
					GPIO_PinDirection(PORTB,PIN8,INPUT_PIN,Floating);
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2108      	movs	r1, #8
 8003c40:	2001      	movs	r0, #1
 8003c42:	f7fd f939 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM4_CCMR2,0);
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,1);
 8003c52:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003c58:	f023 0302 	bic.w	r3, r3, #2
 8003c5c:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,5);
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2e      	ldr	r2, [pc, #184]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003c64:	f043 0320 	orr.w	r3, r3, #32
 8003c68:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003c6a:	797b      	ldrb	r3, [r7, #5]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <Timer_ActivateICU+0x5ea>
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d007      	beq.n	8003c84 <Timer_ActivateICU+0x5f8>
						default:break;
 8003c74:	e00d      	b.n	8003c92 <Timer_ActivateICU+0x606>
							ClrBit(TIM4_CCER,9);
 8003c76:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a27      	ldr	r2, [pc, #156]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c80:	6013      	str	r3, [r2, #0]
							break;
 8003c82:	e006      	b.n	8003c92 <Timer_ActivateICU+0x606>
							SetBit(TIM4_CCER,9);
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a23      	ldr	r2, [pc, #140]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c8e:	6013      	str	r3, [r2, #0]
							break;
 8003c90:	bf00      	nop
					SetBit(TIM4_CCER,8);
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	6013      	str	r3, [r2, #0]
					break;
 8003c9e:	e033      	b.n	8003d08 <Timer_ActivateICU+0x67c>
					GPIO_PinDirection(PORTB,PIN9,INPUT_PIN,Floating);
 8003ca0:	2305      	movs	r3, #5
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2109      	movs	r1, #9
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	f7fd f906 	bl	8000eb8 <GPIO_PinDirection>
					SetBit(TIM4_CCMR2,8);
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb6:	6013      	str	r3, [r2, #0]
					ClrBit(TIM4_CCMR2,9);
 8003cb8:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003cbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc2:	6013      	str	r3, [r2, #0]
					SetBit(TIM4_CCMR2,13);
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <Timer_ActivateICU+0x690>)
 8003cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cce:	6013      	str	r3, [r2, #0]
					switch(capture_mode)
 8003cd0:	797b      	ldrb	r3, [r7, #5]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <Timer_ActivateICU+0x650>
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <Timer_ActivateICU+0x65e>
						default:break;
 8003cda:	e00d      	b.n	8003cf8 <Timer_ActivateICU+0x66c>
							ClrBit(TIM4_CCER,13);
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce6:	6013      	str	r3, [r2, #0]
							break;
 8003ce8:	e006      	b.n	8003cf8 <Timer_ActivateICU+0x66c>
							SetBit(TIM4_CCER,13);
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cf4:	6013      	str	r3, [r2, #0]
							break;
 8003cf6:	bf00      	nop
					SetBit(TIM4_CCER,12);
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a06      	ldr	r2, [pc, #24]	; (8003d18 <Timer_ActivateICU+0x68c>)
 8003cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d02:	6013      	str	r3, [r2, #0]
					break;
 8003d04:	e000      	b.n	8003d08 <Timer_ActivateICU+0x67c>
				default:break;
 8003d06:	bf00      	nop
			break;
 8003d08:	bf00      	nop
	}
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40000818 	.word	0x40000818
 8003d18:	40000820 	.word	0x40000820
 8003d1c:	4000081c 	.word	0x4000081c

08003d20 <Timer_ActivateICUInterrupt>:


void Timer_ActivateICUInterrupt(TIMER timer, TIMER_CHANNEL timer_channel)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	460a      	mov	r2, r1
 8003d2a:	71fb      	strb	r3, [r7, #7]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71bb      	strb	r3, [r7, #6]
	switch(timer)
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d030      	beq.n	8003d98 <Timer_ActivateICUInterrupt+0x78>
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d05a      	beq.n	8003df0 <Timer_ActivateICUInterrupt+0xd0>
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d000      	beq.n	8003d40 <Timer_ActivateICUInterrupt+0x20>
					break;
				default:break;
			}
			break;
	}
}
 8003d3e:	e083      	b.n	8003e48 <Timer_ActivateICUInterrupt+0x128>
			switch(timer_channel)
 8003d40:	79bb      	ldrb	r3, [r7, #6]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d826      	bhi.n	8003d94 <Timer_ActivateICUInterrupt+0x74>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <Timer_ActivateICUInterrupt+0x2c>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d5d 	.word	0x08003d5d
 8003d50:	08003d6b 	.word	0x08003d6b
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d87 	.word	0x08003d87
					SetBit(TIM2_DIER,1);
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3c      	ldr	r2, [pc, #240]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	6013      	str	r3, [r2, #0]
					break;
 8003d68:	e015      	b.n	8003d96 <Timer_ActivateICUInterrupt+0x76>
					SetBit(TIM2_DIER,2);
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a39      	ldr	r2, [pc, #228]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	6013      	str	r3, [r2, #0]
					break;
 8003d76:	e00e      	b.n	8003d96 <Timer_ActivateICUInterrupt+0x76>
					SetBit(TIM2_DIER,3);
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a35      	ldr	r2, [pc, #212]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d7e:	f043 0308 	orr.w	r3, r3, #8
 8003d82:	6013      	str	r3, [r2, #0]
					break;
 8003d84:	e007      	b.n	8003d96 <Timer_ActivateICUInterrupt+0x76>
					SetBit(TIM2_DIER,4);
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a32      	ldr	r2, [pc, #200]	; (8003e54 <Timer_ActivateICUInterrupt+0x134>)
 8003d8c:	f043 0310 	orr.w	r3, r3, #16
 8003d90:	6013      	str	r3, [r2, #0]
					break;
 8003d92:	e000      	b.n	8003d96 <Timer_ActivateICUInterrupt+0x76>
				default:break;
 8003d94:	bf00      	nop
			break;
 8003d96:	e057      	b.n	8003e48 <Timer_ActivateICUInterrupt+0x128>
			switch(timer_channel)
 8003d98:	79bb      	ldrb	r3, [r7, #6]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d826      	bhi.n	8003dec <Timer_ActivateICUInterrupt+0xcc>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <Timer_ActivateICUInterrupt+0x84>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dc3 	.word	0x08003dc3
 8003dac:	08003dd1 	.word	0x08003dd1
 8003db0:	08003ddf 	.word	0x08003ddf
					SetBit(TIM3_DIER,1);
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	6013      	str	r3, [r2, #0]
					break;
 8003dc0:	e015      	b.n	8003dee <Timer_ActivateICUInterrupt+0xce>
					SetBit(TIM3_DIER,2);
 8003dc2:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	6013      	str	r3, [r2, #0]
					break;
 8003dce:	e00e      	b.n	8003dee <Timer_ActivateICUInterrupt+0xce>
					SetBit(TIM3_DIER,3);
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a20      	ldr	r2, [pc, #128]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003dd6:	f043 0308 	orr.w	r3, r3, #8
 8003dda:	6013      	str	r3, [r2, #0]
					break;
 8003ddc:	e007      	b.n	8003dee <Timer_ActivateICUInterrupt+0xce>
					SetBit(TIM3_DIER,4);
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <Timer_ActivateICUInterrupt+0x138>)
 8003de4:	f043 0310 	orr.w	r3, r3, #16
 8003de8:	6013      	str	r3, [r2, #0]
					break;
 8003dea:	e000      	b.n	8003dee <Timer_ActivateICUInterrupt+0xce>
				default:break;
 8003dec:	bf00      	nop
			break;
 8003dee:	e02b      	b.n	8003e48 <Timer_ActivateICUInterrupt+0x128>
			switch(timer_channel)
 8003df0:	79bb      	ldrb	r3, [r7, #6]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d826      	bhi.n	8003e44 <Timer_ActivateICUInterrupt+0x124>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <Timer_ActivateICUInterrupt+0xdc>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e1b 	.word	0x08003e1b
 8003e04:	08003e29 	.word	0x08003e29
 8003e08:	08003e37 	.word	0x08003e37
					SetBit(TIM4_DIER,1);
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	6013      	str	r3, [r2, #0]
					break;
 8003e18:	e015      	b.n	8003e46 <Timer_ActivateICUInterrupt+0x126>
					SetBit(TIM4_DIER,2);
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	6013      	str	r3, [r2, #0]
					break;
 8003e26:	e00e      	b.n	8003e46 <Timer_ActivateICUInterrupt+0x126>
					SetBit(TIM4_DIER,3);
 8003e28:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e2e:	f043 0308 	orr.w	r3, r3, #8
 8003e32:	6013      	str	r3, [r2, #0]
					break;
 8003e34:	e007      	b.n	8003e46 <Timer_ActivateICUInterrupt+0x126>
					SetBit(TIM4_DIER,4);
 8003e36:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <Timer_ActivateICUInterrupt+0x13c>)
 8003e3c:	f043 0310 	orr.w	r3, r3, #16
 8003e40:	6013      	str	r3, [r2, #0]
					break;
 8003e42:	e000      	b.n	8003e46 <Timer_ActivateICUInterrupt+0x126>
				default:break;
 8003e44:	bf00      	nop
			break;
 8003e46:	bf00      	nop
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	4000000c 	.word	0x4000000c
 8003e58:	4000040c 	.word	0x4000040c
 8003e5c:	4000080c 	.word	0x4000080c

08003e60 <Timer_GetICU_Value>:

unsigned short Timer_GetICU_Value(TIMER timer , TIMER_CHANNEL timer_channel)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	460a      	mov	r2, r1
 8003e6a:	71fb      	strb	r3, [r7, #7]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71bb      	strb	r3, [r7, #6]
	switch(timer)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d022      	beq.n	8003ebc <Timer_GetICU_Value+0x5c>
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d03e      	beq.n	8003ef8 <Timer_GetICU_Value+0x98>
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d000      	beq.n	8003e80 <Timer_GetICU_Value+0x20>
					return(TIM4_CCR4);
					break;
				default:break;
			}
			break;
		default:break;
 8003e7e:	e05e      	b.n	8003f3e <Timer_GetICU_Value+0xde>
			switch(timer_channel)
 8003e80:	79bb      	ldrb	r3, [r7, #6]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d856      	bhi.n	8003f34 <Timer_GetICU_Value+0xd4>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <Timer_GetICU_Value+0x2c>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea5 	.word	0x08003ea5
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003eb5 	.word	0x08003eb5
					return(TIM2_CCR1);
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <Timer_GetICU_Value+0xe8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	e04c      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM2_CCR2);
 8003ea4:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <Timer_GetICU_Value+0xec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	e048      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM2_CCR3);
 8003eac:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <Timer_GetICU_Value+0xf0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	e044      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM2_CCR4);
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <Timer_GetICU_Value+0xf4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	e040      	b.n	8003f3e <Timer_GetICU_Value+0xde>
			switch(timer_channel)
 8003ebc:	79bb      	ldrb	r3, [r7, #6]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d83a      	bhi.n	8003f38 <Timer_GetICU_Value+0xd8>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <Timer_GetICU_Value+0x68>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ee9 	.word	0x08003ee9
 8003ed4:	08003ef1 	.word	0x08003ef1
					return(TIM3_CCR1);
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <Timer_GetICU_Value+0xf8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	e02e      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM3_CCR2);
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <Timer_GetICU_Value+0xfc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	e02a      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM3_CCR3);
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <Timer_GetICU_Value+0x100>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	e026      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM3_CCR4);
 8003ef0:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <Timer_GetICU_Value+0x104>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	e022      	b.n	8003f3e <Timer_GetICU_Value+0xde>
			switch(timer_channel)
 8003ef8:	79bb      	ldrb	r3, [r7, #6]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d81e      	bhi.n	8003f3c <Timer_GetICU_Value+0xdc>
 8003efe:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <Timer_GetICU_Value+0xa4>)
 8003f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f1d 	.word	0x08003f1d
 8003f0c:	08003f25 	.word	0x08003f25
 8003f10:	08003f2d 	.word	0x08003f2d
					return(TIM4_CCR1);
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <Timer_GetICU_Value+0x108>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	e010      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM4_CCR2);
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <Timer_GetICU_Value+0x10c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	e00c      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM4_CCR3);
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <Timer_GetICU_Value+0x110>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	e008      	b.n	8003f3e <Timer_GetICU_Value+0xde>
					return(TIM4_CCR4);
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <Timer_GetICU_Value+0x114>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	e004      	b.n	8003f3e <Timer_GetICU_Value+0xde>
			break;
 8003f34:	bf00      	nop
 8003f36:	e002      	b.n	8003f3e <Timer_GetICU_Value+0xde>
			break;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <Timer_GetICU_Value+0xde>
			break;
 8003f3c:	bf00      	nop
	}
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40000034 	.word	0x40000034
 8003f4c:	40000038 	.word	0x40000038
 8003f50:	4000003c 	.word	0x4000003c
 8003f54:	40000040 	.word	0x40000040
 8003f58:	40000434 	.word	0x40000434
 8003f5c:	40000438 	.word	0x40000438
 8003f60:	4000043c 	.word	0x4000043c
 8003f64:	40000440 	.word	0x40000440
 8003f68:	40000834 	.word	0x40000834
 8003f6c:	40000838 	.word	0x40000838
 8003f70:	4000083c 	.word	0x4000083c
 8003f74:	40000840 	.word	0x40000840

08003f78 <TIM2_IRQHandler>:
	if(GetBit(TIM1_SR,4))
		ClrBit(TIM1_SR,4);

}
void TIM2_IRQHandler (void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	TIMER2_ISR();
 8003f7c:	4b22      	ldr	r3, [pc, #136]	; (8004008 <TIM2_IRQHandler+0x90>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4798      	blx	r3
	// Clear Flag
	if(GetBit(TIM2_SR,0))
 8003f82:	4b22      	ldr	r3, [pc, #136]	; (800400c <TIM2_IRQHandler+0x94>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <TIM2_IRQHandler+0x22>
		ClrBit(TIM2_SR,0);
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	; (800400c <TIM2_IRQHandler+0x94>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1e      	ldr	r2, [pc, #120]	; (800400c <TIM2_IRQHandler+0x94>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM2_SR,1))
 8003f9a:	4b1c      	ldr	r3, [pc, #112]	; (800400c <TIM2_IRQHandler+0x94>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <TIM2_IRQHandler+0x3c>
		ClrBit(TIM2_SR,1);
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <TIM2_IRQHandler+0x94>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fae:	f023 0302 	bic.w	r3, r3, #2
 8003fb2:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM2_SR,2))
 8003fb4:	4b15      	ldr	r3, [pc, #84]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	089b      	lsrs	r3, r3, #2
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <TIM2_IRQHandler+0x56>
		ClrBit(TIM2_SR,2);
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a11      	ldr	r2, [pc, #68]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM2_SR,3))
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	08db      	lsrs	r3, r3, #3
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <TIM2_IRQHandler+0x70>
		ClrBit(TIM2_SR,3);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fe2:	f023 0308 	bic.w	r3, r3, #8
 8003fe6:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM2_SR,4))
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <TIM2_IRQHandler+0x94>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <TIM2_IRQHandler+0x8a>
		ClrBit(TIM2_SR,4);
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <TIM2_IRQHandler+0x94>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <TIM2_IRQHandler+0x94>)
 8003ffc:	f023 0310 	bic.w	r3, r3, #16
 8004000:	6013      	str	r3, [r2, #0]

}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000074 	.word	0x20000074
 800400c:	40000010 	.word	0x40000010

08004010 <TIM3_IRQHandler>:
void TIM3_IRQHandler (void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	TIMER3_ISR();
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <TIM3_IRQHandler+0x90>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4798      	blx	r3
	// Clear Flag
	if(GetBit(TIM3_SR,0))
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <TIM3_IRQHandler+0x94>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <TIM3_IRQHandler+0x22>
		ClrBit(TIM3_SR,0);
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <TIM3_IRQHandler+0x94>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM3_SR,1))
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <TIM3_IRQHandler+0x3c>
		ClrBit(TIM3_SR,1);
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004046:	f023 0302 	bic.w	r3, r3, #2
 800404a:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM3_SR,2))
 800404c:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <TIM3_IRQHandler+0x94>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <TIM3_IRQHandler+0x56>
		ClrBit(TIM3_SR,2);
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <TIM3_IRQHandler+0x94>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM3_SR,3))
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <TIM3_IRQHandler+0x70>
		ClrBit(TIM3_SR,3);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <TIM3_IRQHandler+0x94>)
 800407a:	f023 0308 	bic.w	r3, r3, #8
 800407e:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM3_SR,4))
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <TIM3_IRQHandler+0x8a>
		ClrBit(TIM3_SR,4);
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <TIM3_IRQHandler+0x94>)
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000078 	.word	0x20000078
 80040a4:	40000410 	.word	0x40000410

080040a8 <TIM4_IRQHandler>:
void TIM4_IRQHandler (void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	TIMER4_ISR();
 80040ac:	4b22      	ldr	r3, [pc, #136]	; (8004138 <TIM4_IRQHandler+0x90>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4798      	blx	r3
	// Clear Flag
	if(GetBit(TIM4_SR,0))
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <TIM4_IRQHandler+0x94>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <TIM4_IRQHandler+0x22>
		ClrBit(TIM4_SR,0);
 80040be:	4b1f      	ldr	r3, [pc, #124]	; (800413c <TIM4_IRQHandler+0x94>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1e      	ldr	r2, [pc, #120]	; (800413c <TIM4_IRQHandler+0x94>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM4_SR,1))
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <TIM4_IRQHandler+0x94>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <TIM4_IRQHandler+0x3c>
		ClrBit(TIM4_SR,1);
 80040d8:	4b18      	ldr	r3, [pc, #96]	; (800413c <TIM4_IRQHandler+0x94>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM4_IRQHandler+0x94>)
 80040de:	f023 0302 	bic.w	r3, r3, #2
 80040e2:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM4_SR,2))
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <TIM4_IRQHandler+0x94>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <TIM4_IRQHandler+0x56>
		ClrBit(TIM4_SR,2);
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <TIM4_IRQHandler+0x94>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a11      	ldr	r2, [pc, #68]	; (800413c <TIM4_IRQHandler+0x94>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM4_SR,3))
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <TIM4_IRQHandler+0x94>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <TIM4_IRQHandler+0x70>
		ClrBit(TIM4_SR,3);
 800410c:	4b0b      	ldr	r3, [pc, #44]	; (800413c <TIM4_IRQHandler+0x94>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <TIM4_IRQHandler+0x94>)
 8004112:	f023 0308 	bic.w	r3, r3, #8
 8004116:	6013      	str	r3, [r2, #0]
	if(GetBit(TIM4_SR,4))
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <TIM4_IRQHandler+0x94>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <TIM4_IRQHandler+0x8a>
		ClrBit(TIM4_SR,4);
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <TIM4_IRQHandler+0x94>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <TIM4_IRQHandler+0x94>)
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	6013      	str	r3, [r2, #0]
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000007c 	.word	0x2000007c
 800413c:	40000810 	.word	0x40000810

08004140 <UART_Init>:


// No Remapping Here in this version

void UART_Init(UART uart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
	switch(uart)
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d03b      	beq.n	80041c8 <UART_Init+0x88>
 8004150:	2b02      	cmp	r3, #2
 8004152:	d070      	beq.n	8004236 <UART_Init+0xf6>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d000      	beq.n	800415a <UART_Init+0x1a>
			SetBit(NVIC_ISER1,7);
			// Configure Baud Rate (9600) - 1 Start Bit & 8 Bits Data & 1 Stop Bit
			InsertField(UART3_BRR,0xFFFF000F,52,4);
			InsertField(UART3_BRR,0xFFFFFFF0,1,0);
			break;
		default:break;
 8004158:	e0a4      	b.n	80042a4 <UART_Init+0x164>
			if(!GetBit(RCC_APB2ENR,2))
 800415a:	4b54      	ldr	r3, [pc, #336]	; (80042ac <UART_Init+0x16c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <UART_Init+0x34>
				SetBit(RCC_APB2ENR,2);
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <UART_Init+0x16c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4f      	ldr	r2, [pc, #316]	; (80042ac <UART_Init+0x16c>)
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	6013      	str	r3, [r2, #0]
			SetBit(RCC_APB2ENR,14);
 8004174:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <UART_Init+0x16c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a4c      	ldr	r2, [pc, #304]	; (80042ac <UART_Init+0x16c>)
 800417a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800417e:	6013      	str	r3, [r2, #0]
			GPIO_PinDirection(PORTA ,PIN9 ,OUTPUT_PIN,AF_PP); // Tx
 8004180:	2301      	movs	r3, #1
 8004182:	2201      	movs	r2, #1
 8004184:	2109      	movs	r1, #9
 8004186:	2000      	movs	r0, #0
 8004188:	f7fc fe96 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinDirection(PORTA,PIN10,INPUT_PIN,Floating); // Rx
 800418c:	2305      	movs	r3, #5
 800418e:	2200      	movs	r2, #0
 8004190:	210a      	movs	r1, #10
 8004192:	2000      	movs	r0, #0
 8004194:	f7fc fe90 	bl	8000eb8 <GPIO_PinDirection>
			SetBit(NVIC_ISER1,5);
 8004198:	4b45      	ldr	r3, [pc, #276]	; (80042b0 <UART_Init+0x170>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a44      	ldr	r2, [pc, #272]	; (80042b0 <UART_Init+0x170>)
 800419e:	f043 0320 	orr.w	r3, r3, #32
 80041a2:	6013      	str	r3, [r2, #0]
			InsertField(UART1_BRR,0xFFFF000F,52,4);
 80041a4:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <UART_Init+0x174>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041b0:	4a40      	ldr	r2, [pc, #256]	; (80042b4 <UART_Init+0x174>)
 80041b2:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80041b6:	6013      	str	r3, [r2, #0]
			InsertField(UART1_BRR,0xFFFFFFF0,1,0);
 80041b8:	4b3e      	ldr	r3, [pc, #248]	; (80042b4 <UART_Init+0x174>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 030f 	bic.w	r3, r3, #15
 80041c0:	4a3c      	ldr	r2, [pc, #240]	; (80042b4 <UART_Init+0x174>)
 80041c2:	3301      	adds	r3, #1
 80041c4:	6013      	str	r3, [r2, #0]
			break;
 80041c6:	e06d      	b.n	80042a4 <UART_Init+0x164>
			if(!GetBit(RCC_APB2ENR,2))
 80041c8:	4b38      	ldr	r3, [pc, #224]	; (80042ac <UART_Init+0x16c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	089b      	lsrs	r3, r3, #2
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <UART_Init+0xa2>
				SetBit(RCC_APB2ENR,2);
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <UART_Init+0x16c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a34      	ldr	r2, [pc, #208]	; (80042ac <UART_Init+0x16c>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6013      	str	r3, [r2, #0]
			SetBit(RCC_APB1ENR,17);
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <UART_Init+0x178>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <UART_Init+0x178>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	6013      	str	r3, [r2, #0]
			GPIO_PinDirection(PORTA ,PIN2 ,OUTPUT_PIN,AF_PP); // Tx
 80041ee:	2301      	movs	r3, #1
 80041f0:	2201      	movs	r2, #1
 80041f2:	2102      	movs	r1, #2
 80041f4:	2000      	movs	r0, #0
 80041f6:	f7fc fe5f 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinDirection(PORTA,PIN3,INPUT_PIN,Floating); // Rx
 80041fa:	2305      	movs	r3, #5
 80041fc:	2200      	movs	r2, #0
 80041fe:	2103      	movs	r1, #3
 8004200:	2000      	movs	r0, #0
 8004202:	f7fc fe59 	bl	8000eb8 <GPIO_PinDirection>
			SetBit(NVIC_ISER1,6);
 8004206:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <UART_Init+0x170>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <UART_Init+0x170>)
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	6013      	str	r3, [r2, #0]
			InsertField(UART2_BRR,0xFFFF000F,52,4);
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <UART_Init+0x17c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421e:	4a27      	ldr	r2, [pc, #156]	; (80042bc <UART_Init+0x17c>)
 8004220:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004224:	6013      	str	r3, [r2, #0]
			InsertField(UART2_BRR,0xFFFFFFF0,1,0);
 8004226:	4b25      	ldr	r3, [pc, #148]	; (80042bc <UART_Init+0x17c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 030f 	bic.w	r3, r3, #15
 800422e:	4a23      	ldr	r2, [pc, #140]	; (80042bc <UART_Init+0x17c>)
 8004230:	3301      	adds	r3, #1
 8004232:	6013      	str	r3, [r2, #0]
			break;
 8004234:	e036      	b.n	80042a4 <UART_Init+0x164>
			if(!GetBit(RCC_APB2ENR,3))
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <UART_Init+0x16c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <UART_Init+0x110>
				SetBit(RCC_APB2ENR,3);
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <UART_Init+0x16c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a18      	ldr	r2, [pc, #96]	; (80042ac <UART_Init+0x16c>)
 800424a:	f043 0308 	orr.w	r3, r3, #8
 800424e:	6013      	str	r3, [r2, #0]
			SetBit(RCC_APB1ENR,18);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <UART_Init+0x178>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <UART_Init+0x178>)
 8004256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]
			GPIO_PinDirection(PORTB ,PIN10 ,OUTPUT_PIN,AF_PP); // Tx
 800425c:	2301      	movs	r3, #1
 800425e:	2201      	movs	r2, #1
 8004260:	210a      	movs	r1, #10
 8004262:	2001      	movs	r0, #1
 8004264:	f7fc fe28 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinDirection(PORTB,PIN11,INPUT_PIN,Floating); // Rx
 8004268:	2305      	movs	r3, #5
 800426a:	2200      	movs	r2, #0
 800426c:	210b      	movs	r1, #11
 800426e:	2001      	movs	r0, #1
 8004270:	f7fc fe22 	bl	8000eb8 <GPIO_PinDirection>
			SetBit(NVIC_ISER1,7);
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <UART_Init+0x170>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <UART_Init+0x170>)
 800427a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427e:	6013      	str	r3, [r2, #0]
			InsertField(UART3_BRR,0xFFFF000F,52,4);
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <UART_Init+0x180>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <UART_Init+0x180>)
 800428e:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8004292:	6013      	str	r3, [r2, #0]
			InsertField(UART3_BRR,0xFFFFFFF0,1,0);
 8004294:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <UART_Init+0x180>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f023 030f 	bic.w	r3, r3, #15
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <UART_Init+0x180>)
 800429e:	3301      	adds	r3, #1
 80042a0:	6013      	str	r3, [r2, #0]
			break;
 80042a2:	bf00      	nop
	}
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021018 	.word	0x40021018
 80042b0:	e000e104 	.word	0xe000e104
 80042b4:	40013808 	.word	0x40013808
 80042b8:	4002101c 	.word	0x4002101c
 80042bc:	40004408 	.word	0x40004408
 80042c0:	40004808 	.word	0x40004808

080042c4 <UART_Recieve>:
			break;
		default:break;
	}
}
unsigned char UART_Recieve(UART uart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
	switch(uart)
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d010      	beq.n	80042f6 <UART_Recieve+0x32>
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d01b      	beq.n	8004310 <UART_Recieve+0x4c>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d126      	bne.n	800432a <UART_Recieve+0x66>
	{
		case UART1:
			if(Rx1_FLAG)
 80042dc:	4b15      	ldr	r3, [pc, #84]	; (8004334 <UART_Recieve+0x70>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d006      	beq.n	80042f2 <UART_Recieve+0x2e>
			{
				Rx1_FLAG = 0;
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <UART_Recieve+0x70>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
				return (UART1_DR);
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <UART_Recieve+0x74>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e01b      	b.n	800432a <UART_Recieve+0x66>
			}
			else
			{
				return 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e019      	b.n	800432a <UART_Recieve+0x66>
			}
			break;
		case UART2:
			if(Rx2_FLAG)
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <UART_Recieve+0x78>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <UART_Recieve+0x48>
			{
				Rx2_FLAG = 0;
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <UART_Recieve+0x78>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
				return (UART2_DR);
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <UART_Recieve+0x7c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e00e      	b.n	800432a <UART_Recieve+0x66>
			}
			else
			{
				return 0;
 800430c:	2300      	movs	r3, #0
 800430e:	e00c      	b.n	800432a <UART_Recieve+0x66>
			}
			break;
		case UART3:
			if(Rx3_FLAG)
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <UART_Recieve+0x80>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <UART_Recieve+0x62>
			{
				Rx3_FLAG = 0;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <UART_Recieve+0x80>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
				return (UART3_DR);
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <UART_Recieve+0x84>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e001      	b.n	800432a <UART_Recieve+0x66>
			}
			else
			{
				return (0);
 8004326:	2300      	movs	r3, #0
 8004328:	e7ff      	b.n	800432a <UART_Recieve+0x66>
			}
			break;
	}
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000083 	.word	0x20000083
 8004338:	40013804 	.word	0x40013804
 800433c:	20000084 	.word	0x20000084
 8004340:	40004404 	.word	0x40004404
 8004344:	20000085 	.word	0x20000085
 8004348:	40004804 	.word	0x40004804

0800434c <UART_Direction>:

void UART_Direction(UART uart,UART_Mode uart_mode)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	460a      	mov	r2, r1
 8004356:	71fb      	strb	r3, [r7, #7]
 8004358:	4613      	mov	r3, r2
 800435a:	71bb      	strb	r3, [r7, #6]
	switch(uart)
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d025      	beq.n	80043ae <UART_Direction+0x62>
 8004362:	2b02      	cmp	r3, #2
 8004364:	d044      	beq.n	80043f0 <UART_Direction+0xa4>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d000      	beq.n	800436c <UART_Direction+0x20>
			SetBit(UART3_CR1,2);
			SetBit(UART3_CR1,3);
		}
		break;
	}
}
 800436a:	e062      	b.n	8004432 <UART_Direction+0xe6>
		if(uart_mode == Tx)
 800436c:	79bb      	ldrb	r3, [r7, #6]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <UART_Direction+0x34>
			SetBit(UART1_CR1,3);
 8004372:	4b32      	ldr	r3, [pc, #200]	; (800443c <UART_Direction+0xf0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a31      	ldr	r2, [pc, #196]	; (800443c <UART_Direction+0xf0>)
 8004378:	f043 0308 	orr.w	r3, r3, #8
 800437c:	6013      	str	r3, [r2, #0]
		break;
 800437e:	e058      	b.n	8004432 <UART_Direction+0xe6>
		else if (uart_mode == Rx)
 8004380:	79bb      	ldrb	r3, [r7, #6]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d106      	bne.n	8004394 <UART_Direction+0x48>
			SetBit(UART1_CR1,2);
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <UART_Direction+0xf0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2c      	ldr	r2, [pc, #176]	; (800443c <UART_Direction+0xf0>)
 800438c:	f043 0304 	orr.w	r3, r3, #4
 8004390:	6013      	str	r3, [r2, #0]
		break;
 8004392:	e04e      	b.n	8004432 <UART_Direction+0xe6>
			SetBit(UART1_CR1,2);
 8004394:	4b29      	ldr	r3, [pc, #164]	; (800443c <UART_Direction+0xf0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a28      	ldr	r2, [pc, #160]	; (800443c <UART_Direction+0xf0>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6013      	str	r3, [r2, #0]
			SetBit(UART1_CR1,3);
 80043a0:	4b26      	ldr	r3, [pc, #152]	; (800443c <UART_Direction+0xf0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <UART_Direction+0xf0>)
 80043a6:	f043 0308 	orr.w	r3, r3, #8
 80043aa:	6013      	str	r3, [r2, #0]
		break;
 80043ac:	e041      	b.n	8004432 <UART_Direction+0xe6>
		if(uart_mode == Tx)
 80043ae:	79bb      	ldrb	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <UART_Direction+0x76>
			SetBit(UART2_CR1,3);
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <UART_Direction+0xf4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a21      	ldr	r2, [pc, #132]	; (8004440 <UART_Direction+0xf4>)
 80043ba:	f043 0308 	orr.w	r3, r3, #8
 80043be:	6013      	str	r3, [r2, #0]
		break;
 80043c0:	e037      	b.n	8004432 <UART_Direction+0xe6>
		else if (uart_mode == Rx)
 80043c2:	79bb      	ldrb	r3, [r7, #6]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <UART_Direction+0x8a>
			SetBit(UART2_CR1,2);
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <UART_Direction+0xf4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <UART_Direction+0xf4>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6013      	str	r3, [r2, #0]
		break;
 80043d4:	e02d      	b.n	8004432 <UART_Direction+0xe6>
			SetBit(UART2_CR1,2);
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <UART_Direction+0xf4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <UART_Direction+0xf4>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	6013      	str	r3, [r2, #0]
			SetBit(UART2_CR1,3);
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <UART_Direction+0xf4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <UART_Direction+0xf4>)
 80043e8:	f043 0308 	orr.w	r3, r3, #8
 80043ec:	6013      	str	r3, [r2, #0]
		break;
 80043ee:	e020      	b.n	8004432 <UART_Direction+0xe6>
		if(uart_mode == Tx)
 80043f0:	79bb      	ldrb	r3, [r7, #6]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <UART_Direction+0xb8>
			SetBit(UART3_CR1,3);
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <UART_Direction+0xf8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <UART_Direction+0xf8>)
 80043fc:	f043 0308 	orr.w	r3, r3, #8
 8004400:	6013      	str	r3, [r2, #0]
		break;
 8004402:	e015      	b.n	8004430 <UART_Direction+0xe4>
		else if (uart_mode == Rx)
 8004404:	79bb      	ldrb	r3, [r7, #6]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d106      	bne.n	8004418 <UART_Direction+0xcc>
			SetBit(UART3_CR1,2);
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <UART_Direction+0xf8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <UART_Direction+0xf8>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6013      	str	r3, [r2, #0]
		break;
 8004416:	e00b      	b.n	8004430 <UART_Direction+0xe4>
			SetBit(UART3_CR1,2);
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <UART_Direction+0xf8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a09      	ldr	r2, [pc, #36]	; (8004444 <UART_Direction+0xf8>)
 800441e:	f043 0304 	orr.w	r3, r3, #4
 8004422:	6013      	str	r3, [r2, #0]
			SetBit(UART3_CR1,3);
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <UART_Direction+0xf8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a06      	ldr	r2, [pc, #24]	; (8004444 <UART_Direction+0xf8>)
 800442a:	f043 0308 	orr.w	r3, r3, #8
 800442e:	6013      	str	r3, [r2, #0]
		break;
 8004430:	bf00      	nop
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	4001380c 	.word	0x4001380c
 8004440:	4000440c 	.word	0x4000440c
 8004444:	4000480c 	.word	0x4000480c

08004448 <UART_Enable>:
void UART_Enable(UART uart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
	switch(uart)
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d00b      	beq.n	8004470 <UART_Enable+0x28>
 8004458:	2b02      	cmp	r3, #2
 800445a:	d010      	beq.n	800447e <UART_Enable+0x36>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d000      	beq.n	8004462 <UART_Enable+0x1a>
		break;
	case UART3:
		SetBit(UART3_CR1,13);
		break;
	}
}
 8004460:	e014      	b.n	800448c <UART_Enable+0x44>
		SetBit(UART1_CR1,13);
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <UART_Enable+0x50>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <UART_Enable+0x50>)
 8004468:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800446c:	6013      	str	r3, [r2, #0]
		break;
 800446e:	e00d      	b.n	800448c <UART_Enable+0x44>
		SetBit(UART2_CR1,13);
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <UART_Enable+0x54>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a09      	ldr	r2, [pc, #36]	; (800449c <UART_Enable+0x54>)
 8004476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800447a:	6013      	str	r3, [r2, #0]
		break;
 800447c:	e006      	b.n	800448c <UART_Enable+0x44>
		SetBit(UART3_CR1,13);
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <UART_Enable+0x58>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <UART_Enable+0x58>)
 8004484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004488:	6013      	str	r3, [r2, #0]
		break;
 800448a:	bf00      	nop
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	4001380c 	.word	0x4001380c
 800449c:	4000440c 	.word	0x4000440c
 80044a0:	4000480c 	.word	0x4000480c

080044a4 <UART_ActivateInterrupt>:
		break;
	}
}
///////////////////////////////////// Interrupt /////////////////////////////////
void UART_ActivateInterrupt(UART uart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
	switch(uart)
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d011      	beq.n	80044d8 <UART_ActivateInterrupt+0x34>
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d01c      	beq.n	80044f2 <UART_ActivateInterrupt+0x4e>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d000      	beq.n	80044be <UART_ActivateInterrupt+0x1a>
			// Transmission Complete
			SetBit(UART3_CR1,6);
			// Receiving Complete
			SetBit(UART3_CR1,5);
			break;
		default:break;
 80044bc:	e026      	b.n	800450c <UART_ActivateInterrupt+0x68>
			SetBit(UART1_CR1,6);
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <UART_ActivateInterrupt+0x74>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <UART_ActivateInterrupt+0x74>)
 80044c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c8:	6013      	str	r3, [r2, #0]
			SetBit(UART1_CR1,5);
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <UART_ActivateInterrupt+0x74>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <UART_ActivateInterrupt+0x74>)
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	6013      	str	r3, [r2, #0]
			break;
 80044d6:	e019      	b.n	800450c <UART_ActivateInterrupt+0x68>
			SetBit(UART2_CR1,6);
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <UART_ActivateInterrupt+0x78>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a0f      	ldr	r2, [pc, #60]	; (800451c <UART_ActivateInterrupt+0x78>)
 80044de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e2:	6013      	str	r3, [r2, #0]
			SetBit(UART2_CR1,5);
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <UART_ActivateInterrupt+0x78>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0c      	ldr	r2, [pc, #48]	; (800451c <UART_ActivateInterrupt+0x78>)
 80044ea:	f043 0320 	orr.w	r3, r3, #32
 80044ee:	6013      	str	r3, [r2, #0]
			break;
 80044f0:	e00c      	b.n	800450c <UART_ActivateInterrupt+0x68>
			SetBit(UART3_CR1,6);
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <UART_ActivateInterrupt+0x7c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <UART_ActivateInterrupt+0x7c>)
 80044f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fc:	6013      	str	r3, [r2, #0]
			SetBit(UART3_CR1,5);
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <UART_ActivateInterrupt+0x7c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a07      	ldr	r2, [pc, #28]	; (8004520 <UART_ActivateInterrupt+0x7c>)
 8004504:	f043 0320 	orr.w	r3, r3, #32
 8004508:	6013      	str	r3, [r2, #0]
			break;
 800450a:	bf00      	nop
	}
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	4001380c 	.word	0x4001380c
 800451c:	4000440c 	.word	0x4000440c
 8004520:	4000480c 	.word	0x4000480c

08004524 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
	if (GetBit(UART1_SR,5))
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <USART1_IRQHandler+0x50>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <USART1_IRQHandler+0x26>
	{
		ClrBit(UART1_SR,5);
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <USART1_IRQHandler+0x50>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <USART1_IRQHandler+0x50>)
 800453c:	f023 0320 	bic.w	r3, r3, #32
 8004540:	6013      	str	r3, [r2, #0]
		Rx1_FLAG = 1;
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <USART1_IRQHandler+0x54>)
 8004544:	2201      	movs	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
	else if(GetBit(UART1_SR,6))
	{
		ClrBit(UART1_SR,6);
		Tx1_FLAG = 1;
	}
}
 8004548:	e00f      	b.n	800456a <USART1_IRQHandler+0x46>
	else if(GetBit(UART1_SR,6))
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <USART1_IRQHandler+0x50>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <USART1_IRQHandler+0x46>
		ClrBit(UART1_SR,6);
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <USART1_IRQHandler+0x50>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a05      	ldr	r2, [pc, #20]	; (8004574 <USART1_IRQHandler+0x50>)
 800455e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004562:	6013      	str	r3, [r2, #0]
		Tx1_FLAG = 1;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <USART1_IRQHandler+0x58>)
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40013800 	.word	0x40013800
 8004578:	20000083 	.word	0x20000083
 800457c:	20000080 	.word	0x20000080

08004580 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
	if (GetBit(UART2_SR,5))
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <USART2_IRQHandler+0x50>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <USART2_IRQHandler+0x26>
	{
		ClrBit(UART2_SR,5);
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <USART2_IRQHandler+0x50>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <USART2_IRQHandler+0x50>)
 8004598:	f023 0320 	bic.w	r3, r3, #32
 800459c:	6013      	str	r3, [r2, #0]
		Rx2_FLAG = 1;
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <USART2_IRQHandler+0x54>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
	else if(GetBit(UART2_SR,6))
	{
		ClrBit(UART2_SR,6);
		Tx2_FLAG = 1;
	}
}
 80045a4:	e00f      	b.n	80045c6 <USART2_IRQHandler+0x46>
	else if(GetBit(UART2_SR,6))
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <USART2_IRQHandler+0x50>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	099b      	lsrs	r3, r3, #6
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <USART2_IRQHandler+0x46>
		ClrBit(UART2_SR,6);
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <USART2_IRQHandler+0x50>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a05      	ldr	r2, [pc, #20]	; (80045d0 <USART2_IRQHandler+0x50>)
 80045ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045be:	6013      	str	r3, [r2, #0]
		Tx2_FLAG = 1;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <USART2_IRQHandler+0x58>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40004400 	.word	0x40004400
 80045d4:	20000084 	.word	0x20000084
 80045d8:	20000081 	.word	0x20000081

080045dc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
	if (GetBit(UART3_SR,5))
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <USART3_IRQHandler+0x50>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <USART3_IRQHandler+0x26>
	{
		ClrBit(UART3_SR,5);
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <USART3_IRQHandler+0x50>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0e      	ldr	r2, [pc, #56]	; (800462c <USART3_IRQHandler+0x50>)
 80045f4:	f023 0320 	bic.w	r3, r3, #32
 80045f8:	6013      	str	r3, [r2, #0]
		Rx3_FLAG = 1;
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <USART3_IRQHandler+0x54>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
	else if(GetBit(UART3_SR,6))
	{
		ClrBit(UART3_SR,6);
		Tx3_FLAG = 1;
	}
}
 8004600:	e00f      	b.n	8004622 <USART3_IRQHandler+0x46>
	else if(GetBit(UART3_SR,6))
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <USART3_IRQHandler+0x50>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <USART3_IRQHandler+0x46>
		ClrBit(UART3_SR,6);
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <USART3_IRQHandler+0x50>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <USART3_IRQHandler+0x50>)
 8004616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800461a:	6013      	str	r3, [r2, #0]
		Tx3_FLAG = 1;
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <USART3_IRQHandler+0x58>)
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
}
 8004622:	bf00      	nop
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40004800 	.word	0x40004800
 8004630:	20000085 	.word	0x20000085
 8004634:	20000082 	.word	0x20000082

08004638 <Ultrasonic_Init>:


void Ultrasonic (void);

void Ultrasonic_Init(ULTRASONIC_SENSOR ultrasonic_sensor)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
	switch(ultrasonic_sensor)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b03      	cmp	r3, #3
 8004646:	f200 80ab 	bhi.w	80047a0 <Ultrasonic_Init+0x168>
 800464a:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <Ultrasonic_Init+0x18>)
 800464c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004650:	08004661 	.word	0x08004661
 8004654:	080046b1 	.word	0x080046b1
 8004658:	08004701 	.word	0x08004701
 800465c:	08004751 	.word	0x08004751
	{
		case FRONT_ULTRASONIC:
			// Trigger Port Initialization
			GPIO_Init(TRIGGER1_PORT);
 8004660:	2000      	movs	r0, #0
 8004662:	f7fc fbcd 	bl	8000e00 <GPIO_Init>
			// Trigger Pin Configuration
			GPIO_PinDirection(TRIGGER1_PORT ,TRIGGER1_PIN ,OUTPUT_PIN , Open_Drain);
 8004666:	2302      	movs	r3, #2
 8004668:	2201      	movs	r2, #1
 800466a:	2101      	movs	r1, #1
 800466c:	2000      	movs	r0, #0
 800466e:	f7fc fc23 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinWrite(TRIGGER1_PORT,TRIGGER1_PIN,PIN_LOW);
 8004672:	2200      	movs	r2, #0
 8004674:	2101      	movs	r1, #1
 8004676:	2000      	movs	r0, #0
 8004678:	f7fd ffbe 	bl	80025f8 <GPIO_PinWrite>

			// Timer Setting
			Timer_Init (ULTRASONIC1_TIMER,8); // Tick time --> 1 us
 800467c:	2108      	movs	r1, #8
 800467e:	2002      	movs	r0, #2
 8004680:	f7fe f8b0 	bl	80027e4 <Timer_Init>

			Timer_ActivateICU(ULTRASONIC1_TIMER, CHANNEL0 ,RISING_EDGE_CAPTURE);
 8004684:	2200      	movs	r2, #0
 8004686:	2100      	movs	r1, #0
 8004688:	2002      	movs	r0, #2
 800468a:	f7fe ffff 	bl	800368c <Timer_ActivateICU>
			Timer_ActivateICU(ULTRASONIC1_TIMER, CHANNEL1 ,FALLING_EDGE_CAPTURE);
 800468e:	2201      	movs	r2, #1
 8004690:	2101      	movs	r1, #1
 8004692:	2002      	movs	r0, #2
 8004694:	f7fe fffa 	bl	800368c <Timer_ActivateICU>

			// Try to replace this part by DMA & execute analysis in the main
			Timer_SetISR(ULTRASONIC1_TIMER,Ultrasonic);
 8004698:	4944      	ldr	r1, [pc, #272]	; (80047ac <Ultrasonic_Init+0x174>)
 800469a:	2002      	movs	r0, #2
 800469c:	f7fe faae 	bl	8002bfc <Timer_SetISR>

			Timer_ActivateICUInterrupt(ULTRASONIC1_TIMER, CHANNEL1);
 80046a0:	2101      	movs	r1, #1
 80046a2:	2002      	movs	r0, #2
 80046a4:	f7ff fb3c 	bl	8003d20 <Timer_ActivateICUInterrupt>

		    Timer_Enable(ULTRASONIC1_TIMER);
 80046a8:	2002      	movs	r0, #2
 80046aa:	f7fe fa69 	bl	8002b80 <Timer_Enable>
			break;
 80046ae:	e078      	b.n	80047a2 <Ultrasonic_Init+0x16a>
		case BACK_ULTRASONIC:
			// Trigger Port Initialization
			GPIO_Init(TRIGGER2_PORT);
 80046b0:	2000      	movs	r0, #0
 80046b2:	f7fc fba5 	bl	8000e00 <GPIO_Init>
			// Trigger Pin Configuration
			GPIO_PinDirection(TRIGGER2_PORT ,TRIGGER2_PIN ,OUTPUT_PIN , Open_Drain);
 80046b6:	2302      	movs	r3, #2
 80046b8:	2201      	movs	r2, #1
 80046ba:	2102      	movs	r1, #2
 80046bc:	2000      	movs	r0, #0
 80046be:	f7fc fbfb 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinWrite(TRIGGER2_PORT,TRIGGER2_PIN,PIN_LOW);
 80046c2:	2200      	movs	r2, #0
 80046c4:	2102      	movs	r1, #2
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fd ff96 	bl	80025f8 <GPIO_PinWrite>

			// Timer Setting
			Timer_Init (ULTRASONIC1_TIMER,8); // Tick time --> 1 us
 80046cc:	2108      	movs	r1, #8
 80046ce:	2002      	movs	r0, #2
 80046d0:	f7fe f888 	bl	80027e4 <Timer_Init>

			Timer_ActivateICU(ULTRASONIC1_TIMER, CHANNEL2 ,RISING_EDGE_CAPTURE);
 80046d4:	2200      	movs	r2, #0
 80046d6:	2102      	movs	r1, #2
 80046d8:	2002      	movs	r0, #2
 80046da:	f7fe ffd7 	bl	800368c <Timer_ActivateICU>
			Timer_ActivateICU(ULTRASONIC1_TIMER, CHANNEL3 ,FALLING_EDGE_CAPTURE);
 80046de:	2201      	movs	r2, #1
 80046e0:	2103      	movs	r1, #3
 80046e2:	2002      	movs	r0, #2
 80046e4:	f7fe ffd2 	bl	800368c <Timer_ActivateICU>

			// Try to replace this part by DMA & execute analysis in the main
			Timer_SetISR(ULTRASONIC1_TIMER,Ultrasonic);
 80046e8:	4930      	ldr	r1, [pc, #192]	; (80047ac <Ultrasonic_Init+0x174>)
 80046ea:	2002      	movs	r0, #2
 80046ec:	f7fe fa86 	bl	8002bfc <Timer_SetISR>

			Timer_ActivateICUInterrupt(ULTRASONIC1_TIMER, CHANNEL3);
 80046f0:	2103      	movs	r1, #3
 80046f2:	2002      	movs	r0, #2
 80046f4:	f7ff fb14 	bl	8003d20 <Timer_ActivateICUInterrupt>

		    Timer_Enable(ULTRASONIC1_TIMER);
 80046f8:	2002      	movs	r0, #2
 80046fa:	f7fe fa41 	bl	8002b80 <Timer_Enable>
			break;
 80046fe:	e050      	b.n	80047a2 <Ultrasonic_Init+0x16a>
		case UPPER_RIGHT_ULTRASONIC:
			// Trigger Port Initialization
			GPIO_Init(TRIGGER3_PORT);
 8004700:	2000      	movs	r0, #0
 8004702:	f7fc fb7d 	bl	8000e00 <GPIO_Init>
			// Trigger Pin Configuration
			GPIO_PinDirection(TRIGGER3_PORT ,TRIGGER3_PIN ,OUTPUT_PIN , Open_Drain);
 8004706:	2302      	movs	r3, #2
 8004708:	2201      	movs	r2, #1
 800470a:	2103      	movs	r1, #3
 800470c:	2000      	movs	r0, #0
 800470e:	f7fc fbd3 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinWrite(TRIGGER3_PORT,TRIGGER3_PIN,PIN_LOW);
 8004712:	2200      	movs	r2, #0
 8004714:	2103      	movs	r1, #3
 8004716:	2000      	movs	r0, #0
 8004718:	f7fd ff6e 	bl	80025f8 <GPIO_PinWrite>

			// Timer Setting
			Timer_Init (ULTRASONIC2_TIMER,8); // Tick time --> 1 us
 800471c:	2108      	movs	r1, #8
 800471e:	2001      	movs	r0, #1
 8004720:	f7fe f860 	bl	80027e4 <Timer_Init>

			Timer_ActivateICU(ULTRASONIC2_TIMER, CHANNEL0 ,RISING_EDGE_CAPTURE);
 8004724:	2200      	movs	r2, #0
 8004726:	2100      	movs	r1, #0
 8004728:	2001      	movs	r0, #1
 800472a:	f7fe ffaf 	bl	800368c <Timer_ActivateICU>
			Timer_ActivateICU(ULTRASONIC2_TIMER, CHANNEL1 ,FALLING_EDGE_CAPTURE);
 800472e:	2201      	movs	r2, #1
 8004730:	2101      	movs	r1, #1
 8004732:	2001      	movs	r0, #1
 8004734:	f7fe ffaa 	bl	800368c <Timer_ActivateICU>

			// Try to replace this part by DMA & execute analysis in the main
			Timer_SetISR(ULTRASONIC2_TIMER,Ultrasonic);
 8004738:	491c      	ldr	r1, [pc, #112]	; (80047ac <Ultrasonic_Init+0x174>)
 800473a:	2001      	movs	r0, #1
 800473c:	f7fe fa5e 	bl	8002bfc <Timer_SetISR>

			Timer_ActivateICUInterrupt(ULTRASONIC2_TIMER, CHANNEL1);
 8004740:	2101      	movs	r1, #1
 8004742:	2001      	movs	r0, #1
 8004744:	f7ff faec 	bl	8003d20 <Timer_ActivateICUInterrupt>

		    Timer_Enable(ULTRASONIC2_TIMER);
 8004748:	2001      	movs	r0, #1
 800474a:	f7fe fa19 	bl	8002b80 <Timer_Enable>
			break;
 800474e:	e028      	b.n	80047a2 <Ultrasonic_Init+0x16a>
		case LOWER_RIGHT_ULTRASONIC:
			// Trigger Port Initialization
			GPIO_Init(TRIGGER4_PORT);
 8004750:	2000      	movs	r0, #0
 8004752:	f7fc fb55 	bl	8000e00 <GPIO_Init>
			// Trigger Pin Configuration
			GPIO_PinDirection(TRIGGER4_PORT ,TRIGGER4_PIN ,OUTPUT_PIN , Open_Drain);
 8004756:	2302      	movs	r3, #2
 8004758:	2201      	movs	r2, #1
 800475a:	2104      	movs	r1, #4
 800475c:	2000      	movs	r0, #0
 800475e:	f7fc fbab 	bl	8000eb8 <GPIO_PinDirection>
			GPIO_PinWrite(TRIGGER4_PORT,TRIGGER4_PIN,PIN_LOW);
 8004762:	2200      	movs	r2, #0
 8004764:	2104      	movs	r1, #4
 8004766:	2000      	movs	r0, #0
 8004768:	f7fd ff46 	bl	80025f8 <GPIO_PinWrite>

			// Timer Setting
			Timer_Init (ULTRASONIC2_TIMER,8); // Tick time --> 1 us
 800476c:	2108      	movs	r1, #8
 800476e:	2001      	movs	r0, #1
 8004770:	f7fe f838 	bl	80027e4 <Timer_Init>

			Timer_ActivateICU(ULTRASONIC2_TIMER, CHANNEL2 ,RISING_EDGE_CAPTURE);
 8004774:	2200      	movs	r2, #0
 8004776:	2102      	movs	r1, #2
 8004778:	2001      	movs	r0, #1
 800477a:	f7fe ff87 	bl	800368c <Timer_ActivateICU>
			Timer_ActivateICU(ULTRASONIC2_TIMER, CHANNEL3 ,FALLING_EDGE_CAPTURE);
 800477e:	2201      	movs	r2, #1
 8004780:	2103      	movs	r1, #3
 8004782:	2001      	movs	r0, #1
 8004784:	f7fe ff82 	bl	800368c <Timer_ActivateICU>

			// Try to replace this part by DMA & execute analysis in the main
			Timer_SetISR(ULTRASONIC2_TIMER,Ultrasonic);
 8004788:	4908      	ldr	r1, [pc, #32]	; (80047ac <Ultrasonic_Init+0x174>)
 800478a:	2001      	movs	r0, #1
 800478c:	f7fe fa36 	bl	8002bfc <Timer_SetISR>

			Timer_ActivateICUInterrupt(ULTRASONIC2_TIMER, CHANNEL3);
 8004790:	2103      	movs	r1, #3
 8004792:	2001      	movs	r0, #1
 8004794:	f7ff fac4 	bl	8003d20 <Timer_ActivateICUInterrupt>

		    Timer_Enable(ULTRASONIC2_TIMER);
 8004798:	2001      	movs	r0, #1
 800479a:	f7fe f9f1 	bl	8002b80 <Timer_Enable>
			break;
 800479e:	e000      	b.n	80047a2 <Ultrasonic_Init+0x16a>
		default:
			break;
 80047a0:	bf00      	nop
	}
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	080049d9 	.word	0x080049d9

080047b0 <Ultrasonic_Start>:
void Ultrasonic_Start(ULTRASONIC_SENSOR ultrasonic_sensor)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
	// I think we need to work sequentially
	switch(ultrasonic_sensor)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d87f      	bhi.n	80048c0 <Ultrasonic_Start+0x110>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <Ultrasonic_Start+0x18>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	08004813 	.word	0x08004813
 80047d0:	0800484d 	.word	0x0800484d
 80047d4:	08004887 	.word	0x08004887
	{
		case FRONT_ULTRASONIC:
			if (Ultrasonic1_Finish)
 80047d8:	4b40      	ldr	r3, [pc, #256]	; (80048dc <Ultrasonic_Start+0x12c>)
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d071      	beq.n	80048c4 <Ultrasonic_Start+0x114>
			{
				Ultrasonic1_Finish = 0;
 80047e0:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <Ultrasonic_Start+0x12c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]

			    GPIO_PinWrite(TRIGGER1_PORT,TRIGGER1_PIN,PIN_HIGH);
 80047e6:	2201      	movs	r2, #1
 80047e8:	2101      	movs	r1, #1
 80047ea:	2000      	movs	r0, #0
 80047ec:	f7fd ff04 	bl	80025f8 <GPIO_PinWrite>

			    // increase this time for more stability (1000 is good)
			    for(int i=0;i<1000;i++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e003      	b.n	80047fe <Ultrasonic_Start+0x4e>
			    	asm("NOP");
 80047f6:	bf00      	nop
			    for(int i=0;i<1000;i++)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004804:	dbf7      	blt.n	80047f6 <Ultrasonic_Start+0x46>

			    GPIO_PinWrite(TRIGGER1_PORT,TRIGGER1_PIN,PIN_LOW);
 8004806:	2200      	movs	r2, #0
 8004808:	2101      	movs	r1, #1
 800480a:	2000      	movs	r0, #0
 800480c:	f7fd fef4 	bl	80025f8 <GPIO_PinWrite>
			}
			break;
 8004810:	e058      	b.n	80048c4 <Ultrasonic_Start+0x114>
		case BACK_ULTRASONIC:
			if (Ultrasonic2_Finish)
 8004812:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <Ultrasonic_Start+0x130>)
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d056      	beq.n	80048c8 <Ultrasonic_Start+0x118>
			{
				Ultrasonic2_Finish = 0;
 800481a:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <Ultrasonic_Start+0x130>)
 800481c:	2200      	movs	r2, #0
 800481e:	801a      	strh	r2, [r3, #0]

			    GPIO_PinWrite(TRIGGER2_PORT,TRIGGER2_PIN,PIN_HIGH);
 8004820:	2201      	movs	r2, #1
 8004822:	2102      	movs	r1, #2
 8004824:	2000      	movs	r0, #0
 8004826:	f7fd fee7 	bl	80025f8 <GPIO_PinWrite>

			    // increase this time for more stability
			    for(int i=0;i<1000;i++)
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e003      	b.n	8004838 <Ultrasonic_Start+0x88>
			    	asm("NOP");
 8004830:	bf00      	nop
			    for(int i=0;i<1000;i++)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483e:	dbf7      	blt.n	8004830 <Ultrasonic_Start+0x80>

			    GPIO_PinWrite(TRIGGER2_PORT,TRIGGER2_PIN,PIN_LOW);
 8004840:	2200      	movs	r2, #0
 8004842:	2102      	movs	r1, #2
 8004844:	2000      	movs	r0, #0
 8004846:	f7fd fed7 	bl	80025f8 <GPIO_PinWrite>
			}
			break;
 800484a:	e03d      	b.n	80048c8 <Ultrasonic_Start+0x118>
		case UPPER_RIGHT_ULTRASONIC:
			if (Ultrasonic3_Finish)
 800484c:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <Ultrasonic_Start+0x134>)
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d03b      	beq.n	80048cc <Ultrasonic_Start+0x11c>
			{
				Ultrasonic3_Finish = 0;
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <Ultrasonic_Start+0x134>)
 8004856:	2200      	movs	r2, #0
 8004858:	801a      	strh	r2, [r3, #0]

			    GPIO_PinWrite(TRIGGER3_PORT,TRIGGER3_PIN,PIN_HIGH);
 800485a:	2201      	movs	r2, #1
 800485c:	2103      	movs	r1, #3
 800485e:	2000      	movs	r0, #0
 8004860:	f7fd feca 	bl	80025f8 <GPIO_PinWrite>

			    // increase this time for more stability
			    for(int i=0;i<1000;i++)
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e003      	b.n	8004872 <Ultrasonic_Start+0xc2>
			    	asm("NOP");
 800486a:	bf00      	nop
			    for(int i=0;i<1000;i++)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004878:	dbf7      	blt.n	800486a <Ultrasonic_Start+0xba>

			    GPIO_PinWrite(TRIGGER3_PORT,TRIGGER3_PIN,PIN_LOW);
 800487a:	2200      	movs	r2, #0
 800487c:	2103      	movs	r1, #3
 800487e:	2000      	movs	r0, #0
 8004880:	f7fd feba 	bl	80025f8 <GPIO_PinWrite>
			}
			break;
 8004884:	e022      	b.n	80048cc <Ultrasonic_Start+0x11c>
		case LOWER_RIGHT_ULTRASONIC:
			if (Ultrasonic4_Finish)
 8004886:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <Ultrasonic_Start+0x138>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <Ultrasonic_Start+0x120>
			{
				Ultrasonic4_Finish = 0;
 800488e:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <Ultrasonic_Start+0x138>)
 8004890:	2200      	movs	r2, #0
 8004892:	801a      	strh	r2, [r3, #0]

			    GPIO_PinWrite(TRIGGER4_PORT,TRIGGER4_PIN,PIN_HIGH);
 8004894:	2201      	movs	r2, #1
 8004896:	2104      	movs	r1, #4
 8004898:	2000      	movs	r0, #0
 800489a:	f7fd fead 	bl	80025f8 <GPIO_PinWrite>

			    // increase this time for more stability
			    for(int i=0;i<1000;i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	e003      	b.n	80048ac <Ultrasonic_Start+0xfc>
			    	asm("NOP");
 80048a4:	bf00      	nop
			    for(int i=0;i<1000;i++)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048b2:	dbf7      	blt.n	80048a4 <Ultrasonic_Start+0xf4>

			    GPIO_PinWrite(TRIGGER4_PORT,TRIGGER4_PIN,PIN_LOW);
 80048b4:	2200      	movs	r2, #0
 80048b6:	2104      	movs	r1, #4
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7fd fe9d 	bl	80025f8 <GPIO_PinWrite>
			}
			break;
 80048be:	e007      	b.n	80048d0 <Ultrasonic_Start+0x120>
		default:
			break;
 80048c0:	bf00      	nop
 80048c2:	e006      	b.n	80048d2 <Ultrasonic_Start+0x122>
			break;
 80048c4:	bf00      	nop
 80048c6:	e004      	b.n	80048d2 <Ultrasonic_Start+0x122>
			break;
 80048c8:	bf00      	nop
 80048ca:	e002      	b.n	80048d2 <Ultrasonic_Start+0x122>
			break;
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <Ultrasonic_Start+0x122>
			break;
 80048d0:	bf00      	nop
	}
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000000 	.word	0x20000000
 80048e0:	20000002 	.word	0x20000002
 80048e4:	20000004 	.word	0x20000004
 80048e8:	20000006 	.word	0x20000006
 80048ec:	00000000 	.word	0x00000000

080048f0 <Ultrasonic_Time>:
unsigned short Ultrasonic_Time(ULTRASONIC_SENSOR ultrasonic_sensor)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]

	switch(ultrasonic_sensor)
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d857      	bhi.n	80049b0 <Ultrasonic_Time+0xc0>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <Ultrasonic_Time+0x18>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004919 	.word	0x08004919
 800490c:	0800493f 	.word	0x0800493f
 8004910:	08004965 	.word	0x08004965
 8004914:	0800498b 	.word	0x0800498b
	{
		case FRONT_ULTRASONIC:
			return(Ultrasonic1_Reading * 0.017);
 8004918:	4b2b      	ldr	r3, [pc, #172]	; (80049c8 <Ultrasonic_Time+0xd8>)
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fb fd79 	bl	8000414 <__aeabi_i2d>
 8004922:	a327      	add	r3, pc, #156	; (adr r3, 80049c0 <Ultrasonic_Time+0xd0>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fdde 	bl	80004e8 <__aeabi_dmul>
 800492c:	4603      	mov	r3, r0
 800492e:	460c      	mov	r4, r1
 8004930:	4618      	mov	r0, r3
 8004932:	4621      	mov	r1, r4
 8004934:	f7fb ffea 	bl	800090c <__aeabi_d2uiz>
 8004938:	4603      	mov	r3, r0
 800493a:	b29b      	uxth	r3, r3
 800493c:	e039      	b.n	80049b2 <Ultrasonic_Time+0xc2>
			break;
		case BACK_ULTRASONIC:
			return(Ultrasonic2_Reading * 0.017);
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <Ultrasonic_Time+0xdc>)
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fd66 	bl	8000414 <__aeabi_i2d>
 8004948:	a31d      	add	r3, pc, #116	; (adr r3, 80049c0 <Ultrasonic_Time+0xd0>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f7fb fdcb 	bl	80004e8 <__aeabi_dmul>
 8004952:	4603      	mov	r3, r0
 8004954:	460c      	mov	r4, r1
 8004956:	4618      	mov	r0, r3
 8004958:	4621      	mov	r1, r4
 800495a:	f7fb ffd7 	bl	800090c <__aeabi_d2uiz>
 800495e:	4603      	mov	r3, r0
 8004960:	b29b      	uxth	r3, r3
 8004962:	e026      	b.n	80049b2 <Ultrasonic_Time+0xc2>
			break;
		case UPPER_RIGHT_ULTRASONIC:
			return(Ultrasonic3_Reading * 0.017);
 8004964:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <Ultrasonic_Time+0xe0>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fb fd53 	bl	8000414 <__aeabi_i2d>
 800496e:	a314      	add	r3, pc, #80	; (adr r3, 80049c0 <Ultrasonic_Time+0xd0>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fb fdb8 	bl	80004e8 <__aeabi_dmul>
 8004978:	4603      	mov	r3, r0
 800497a:	460c      	mov	r4, r1
 800497c:	4618      	mov	r0, r3
 800497e:	4621      	mov	r1, r4
 8004980:	f7fb ffc4 	bl	800090c <__aeabi_d2uiz>
 8004984:	4603      	mov	r3, r0
 8004986:	b29b      	uxth	r3, r3
 8004988:	e013      	b.n	80049b2 <Ultrasonic_Time+0xc2>
			break;
		case LOWER_RIGHT_ULTRASONIC:
			return(Ultrasonic4_Reading * 0.017);
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <Ultrasonic_Time+0xe4>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7fb fd40 	bl	8000414 <__aeabi_i2d>
 8004994:	a30a      	add	r3, pc, #40	; (adr r3, 80049c0 <Ultrasonic_Time+0xd0>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f7fb fda5 	bl	80004e8 <__aeabi_dmul>
 800499e:	4603      	mov	r3, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	4618      	mov	r0, r3
 80049a4:	4621      	mov	r1, r4
 80049a6:	f7fb ffb1 	bl	800090c <__aeabi_d2uiz>
 80049aa:	4603      	mov	r3, r0
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	e000      	b.n	80049b2 <Ultrasonic_Time+0xc2>
			break;
		default:
			break;
 80049b0:	bf00      	nop
	}
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd90      	pop	{r4, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	f3af 8000 	nop.w
 80049c0:	b020c49c 	.word	0xb020c49c
 80049c4:	3f916872 	.word	0x3f916872
 80049c8:	20000086 	.word	0x20000086
 80049cc:	20000088 	.word	0x20000088
 80049d0:	2000008a 	.word	0x2000008a
 80049d4:	2000008c 	.word	0x2000008c

080049d8 <Ultrasonic>:

// Try to insert overflow code here
void Ultrasonic (void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
	unsigned short X1 = 0 , X2 = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	80fb      	strh	r3, [r7, #6]
 80049e2:	2300      	movs	r3, #0
 80049e4:	80bb      	strh	r3, [r7, #4]
	if (!Ultrasonic1_Finish)
 80049e6:	4b4e      	ldr	r3, [pc, #312]	; (8004b20 <Ultrasonic+0x148>)
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d121      	bne.n	8004a32 <Ultrasonic+0x5a>
	{
		Ultrasonic1_Finish = 1;
 80049ee:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <Ultrasonic+0x148>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	801a      	strh	r2, [r3, #0]
		X1 = Timer_GetICU_Value(ULTRASONIC1_TIMER ,CHANNEL0);
 80049f4:	2100      	movs	r1, #0
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7ff fa32 	bl	8003e60 <Timer_GetICU_Value>
 80049fc:	4603      	mov	r3, r0
 80049fe:	80fb      	strh	r3, [r7, #6]
		X2 = Timer_GetICU_Value(ULTRASONIC1_TIMER ,CHANNEL1);
 8004a00:	2101      	movs	r1, #1
 8004a02:	2002      	movs	r0, #2
 8004a04:	f7ff fa2c 	bl	8003e60 <Timer_GetICU_Value>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	80bb      	strh	r3, [r7, #4]

		if (X2 > X1)
 8004a0c:	88ba      	ldrh	r2, [r7, #4]
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d906      	bls.n	8004a22 <Ultrasonic+0x4a>
		{
			Ultrasonic1_Reading = X2 - X1;
 8004a14:	88ba      	ldrh	r2, [r7, #4]
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	4b41      	ldr	r3, [pc, #260]	; (8004b24 <Ultrasonic+0x14c>)
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	e007      	b.n	8004a32 <Ultrasonic+0x5a>
		}
		else
		{
			Ultrasonic1_Reading = X2 + (0xFFFF - X1);
 8004a22:	88ba      	ldrh	r2, [r7, #4]
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b3d      	ldr	r3, [pc, #244]	; (8004b24 <Ultrasonic+0x14c>)
 8004a30:	801a      	strh	r2, [r3, #0]
		}
	}
	if (!Ultrasonic2_Finish)
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <Ultrasonic+0x150>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d121      	bne.n	8004a7e <Ultrasonic+0xa6>
	{
		Ultrasonic2_Finish = 1;
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <Ultrasonic+0x150>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	801a      	strh	r2, [r3, #0]
		X1 = Timer_GetICU_Value(ULTRASONIC1_TIMER ,CHANNEL2);
 8004a40:	2102      	movs	r1, #2
 8004a42:	2002      	movs	r0, #2
 8004a44:	f7ff fa0c 	bl	8003e60 <Timer_GetICU_Value>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	80fb      	strh	r3, [r7, #6]
		X2 = Timer_GetICU_Value(ULTRASONIC1_TIMER ,CHANNEL3);
 8004a4c:	2103      	movs	r1, #3
 8004a4e:	2002      	movs	r0, #2
 8004a50:	f7ff fa06 	bl	8003e60 <Timer_GetICU_Value>
 8004a54:	4603      	mov	r3, r0
 8004a56:	80bb      	strh	r3, [r7, #4]

		if (X2 > X1)
 8004a58:	88ba      	ldrh	r2, [r7, #4]
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d906      	bls.n	8004a6e <Ultrasonic+0x96>
		{
			Ultrasonic2_Reading = X2 - X1;
 8004a60:	88ba      	ldrh	r2, [r7, #4]
 8004a62:	88fb      	ldrh	r3, [r7, #6]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	4b30      	ldr	r3, [pc, #192]	; (8004b2c <Ultrasonic+0x154>)
 8004a6a:	801a      	strh	r2, [r3, #0]
 8004a6c:	e007      	b.n	8004a7e <Ultrasonic+0xa6>
		}
		else
		{
			Ultrasonic2_Reading = X2 + (0xFFFF - X1);
 8004a6e:	88ba      	ldrh	r2, [r7, #4]
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <Ultrasonic+0x154>)
 8004a7c:	801a      	strh	r2, [r3, #0]
		}
	}
	if (!Ultrasonic3_Finish)
 8004a7e:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <Ultrasonic+0x158>)
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <Ultrasonic+0xf2>
	{
		Ultrasonic3_Finish = 1;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <Ultrasonic+0x158>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	801a      	strh	r2, [r3, #0]
		X1 = Timer_GetICU_Value(ULTRASONIC2_TIMER ,CHANNEL0);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7ff f9e6 	bl	8003e60 <Timer_GetICU_Value>
 8004a94:	4603      	mov	r3, r0
 8004a96:	80fb      	strh	r3, [r7, #6]
		X2 = Timer_GetICU_Value(ULTRASONIC2_TIMER ,CHANNEL1);
 8004a98:	2101      	movs	r1, #1
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f7ff f9e0 	bl	8003e60 <Timer_GetICU_Value>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	80bb      	strh	r3, [r7, #4]

		if (X2 > X1)
 8004aa4:	88ba      	ldrh	r2, [r7, #4]
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d906      	bls.n	8004aba <Ultrasonic+0xe2>
		{
			Ultrasonic3_Reading = X2 - X1;
 8004aac:	88ba      	ldrh	r2, [r7, #4]
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	4b1f      	ldr	r3, [pc, #124]	; (8004b34 <Ultrasonic+0x15c>)
 8004ab6:	801a      	strh	r2, [r3, #0]
 8004ab8:	e007      	b.n	8004aca <Ultrasonic+0xf2>
		}
		else
		{
			Ultrasonic3_Reading = X2 + (0xFFFF - X1);
 8004aba:	88ba      	ldrh	r2, [r7, #4]
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <Ultrasonic+0x15c>)
 8004ac8:	801a      	strh	r2, [r3, #0]
		}
	}
	if (!Ultrasonic4_Finish)
 8004aca:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <Ultrasonic+0x160>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d121      	bne.n	8004b16 <Ultrasonic+0x13e>
	{
		Ultrasonic4_Finish = 1;
 8004ad2:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <Ultrasonic+0x160>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	801a      	strh	r2, [r3, #0]
		X1 = Timer_GetICU_Value(ULTRASONIC2_TIMER ,CHANNEL2);
 8004ad8:	2102      	movs	r1, #2
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7ff f9c0 	bl	8003e60 <Timer_GetICU_Value>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	80fb      	strh	r3, [r7, #6]
		X2 = Timer_GetICU_Value(ULTRASONIC2_TIMER ,CHANNEL3);
 8004ae4:	2103      	movs	r1, #3
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f7ff f9ba 	bl	8003e60 <Timer_GetICU_Value>
 8004aec:	4603      	mov	r3, r0
 8004aee:	80bb      	strh	r3, [r7, #4]

		if (X2 > X1)
 8004af0:	88ba      	ldrh	r2, [r7, #4]
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d906      	bls.n	8004b06 <Ultrasonic+0x12e>
		{
			Ultrasonic4_Reading = X2 - X1;
 8004af8:	88ba      	ldrh	r2, [r7, #4]
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <Ultrasonic+0x164>)
 8004b02:	801a      	strh	r2, [r3, #0]
		else
		{
			Ultrasonic4_Reading = X2 + (0xFFFF - X1);
		}
	}
}
 8004b04:	e007      	b.n	8004b16 <Ultrasonic+0x13e>
			Ultrasonic4_Reading = X2 + (0xFFFF - X1);
 8004b06:	88ba      	ldrh	r2, [r7, #4]
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <Ultrasonic+0x164>)
 8004b14:	801a      	strh	r2, [r3, #0]
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000086 	.word	0x20000086
 8004b28:	20000002 	.word	0x20000002
 8004b2c:	20000088 	.word	0x20000088
 8004b30:	20000004 	.word	0x20000004
 8004b34:	2000008a 	.word	0x2000008a
 8004b38:	20000006 	.word	0x20000006
 8004b3c:	2000008c 	.word	0x2000008c

08004b40 <main>:
unsigned char Car_Velocity(void);

// you can feedback system using Bluetooth (send status to Main Controller)

int main(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0

	Ultrasonic_Init(FRONT_ULTRASONIC);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7ff fd77 	bl	8004638 <Ultrasonic_Init>
	Ultrasonic_Init(BACK_ULTRASONIC);
 8004b4a:	2001      	movs	r0, #1
 8004b4c:	f7ff fd74 	bl	8004638 <Ultrasonic_Init>
	Ultrasonic_Init(UPPER_RIGHT_ULTRASONIC);
 8004b50:	2002      	movs	r0, #2
 8004b52:	f7ff fd71 	bl	8004638 <Ultrasonic_Init>
	Ultrasonic_Init(LOWER_RIGHT_ULTRASONIC);
 8004b56:	2003      	movs	r0, #3
 8004b58:	f7ff fd6e 	bl	8004638 <Ultrasonic_Init>

	IR_Sensor_Init(Left_IR_Sensor);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fd fe1d 	bl	800279c <IR_Sensor_Init>
	IR_Sensor_Init(Right_IR_Sensor);
 8004b62:	2001      	movs	r0, #1
 8004b64:	f7fd fe1a 	bl	800279c <IR_Sensor_Init>

	Bluetooth_Init();
 8004b68:	f7fb fef0 	bl	800094c <Bluetooth_Init>
	Car_Init();
 8004b6c:	f7fb ff07 	bl	800097e <Car_Init>

    /* Loop forever */
	for(;;){

		data = Bluetooth_Read();
 8004b70:	f7fb fefd 	bl	800096e <Bluetooth_Read>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <main+0x44>)
 8004b7a:	701a      	strb	r2, [r3, #0]

		// Call System Function Here
		ACC();
 8004b7c:	f000 f804 	bl	8004b88 <ACC>
		data = Bluetooth_Read();
 8004b80:	e7f6      	b.n	8004b70 <main+0x30>
 8004b82:	bf00      	nop
 8004b84:	2000008f 	.word	0x2000008f

08004b88 <ACC>:
		Car_Drive(STOP,Forward,FDM_DUTY_CYCLE);
	}
}

void ACC (void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
	// Settings of ACC
	Ultrasonic_Start(FRONT_ULTRASONIC);
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7ff fe0f 	bl	80047b0 <Ultrasonic_Start>

	if(data == 'B')
 8004b92:	4b98      	ldr	r3, [pc, #608]	; (8004df4 <ACC+0x26c>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b42      	cmp	r3, #66	; 0x42
 8004b98:	d10a      	bne.n	8004bb0 <ACC+0x28>
	{
		Car_Drive(GO,Backward,dutycycle);
 8004b9a:	4b97      	ldr	r3, [pc, #604]	; (8004df8 <ACC+0x270>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f7fb ff1a 	bl	80009dc <Car_Drive>
		ACC_STATE = REVERSE; // ACC Doesn't Support This Mode
 8004ba8:	4b94      	ldr	r3, [pc, #592]	; (8004dfc <ACC+0x274>)
 8004baa:	2203      	movs	r2, #3
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e070      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'U')
 8004bb0:	4b90      	ldr	r3, [pc, #576]	; (8004df4 <ACC+0x26c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b55      	cmp	r3, #85	; 0x55
 8004bb6:	d10a      	bne.n	8004bce <ACC+0x46>
	{
		Car_Drive(GO,Forward,dutycycle);
 8004bb8:	4b8f      	ldr	r3, [pc, #572]	; (8004df8 <ACC+0x270>)
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f7fb ff0b 	bl	80009dc <Car_Drive>
		ACC_STATE = DRIVE_STRAIGHT;
 8004bc6:	4b8d      	ldr	r3, [pc, #564]	; (8004dfc <ACC+0x274>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e061      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'R')
 8004bce:	4b89      	ldr	r3, [pc, #548]	; (8004df4 <ACC+0x26c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b52      	cmp	r3, #82	; 0x52
 8004bd4:	d10a      	bne.n	8004bec <ACC+0x64>
	{
		Car_Drive(GO,Right,dutycycle);
 8004bd6:	4b88      	ldr	r3, [pc, #544]	; (8004df8 <ACC+0x270>)
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2103      	movs	r1, #3
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fb fefc 	bl	80009dc <Car_Drive>
		ACC_STATE = DRIVE_RIGHT; // ACC Doesn't Support This Mode
 8004be4:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <ACC+0x274>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	e052      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'L')
 8004bec:	4b81      	ldr	r3, [pc, #516]	; (8004df4 <ACC+0x26c>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b4c      	cmp	r3, #76	; 0x4c
 8004bf2:	d10a      	bne.n	8004c0a <ACC+0x82>
	{
		Car_Drive(GO,Left,dutycycle);
 8004bf4:	4b80      	ldr	r3, [pc, #512]	; (8004df8 <ACC+0x270>)
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f7fb feed 	bl	80009dc <Car_Drive>
		ACC_STATE = DRIVE_LEFT; // ACC Doesn't Support This Mode
 8004c02:	4b7e      	ldr	r3, [pc, #504]	; (8004dfc <ACC+0x274>)
 8004c04:	2202      	movs	r2, #2
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e043      	b.n	8004c92 <ACC+0x10a>
	}
	else if (data == 'S')
 8004c0a:	4b7a      	ldr	r3, [pc, #488]	; (8004df4 <ACC+0x26c>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b53      	cmp	r3, #83	; 0x53
 8004c10:	d10a      	bne.n	8004c28 <ACC+0xa0>
	{
		Car_Drive(STOP,Left,dutycycle);
 8004c12:	4b79      	ldr	r3, [pc, #484]	; (8004df8 <ACC+0x270>)
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	2102      	movs	r1, #2
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fb fede 	bl	80009dc <Car_Drive>
		ACC_STATE = PARKING; // ACC Doesn't Support This Mode
 8004c20:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <ACC+0x274>)
 8004c22:	2204      	movs	r2, #4
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e034      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'C')
 8004c28:	4b72      	ldr	r3, [pc, #456]	; (8004df4 <ACC+0x26c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b43      	cmp	r3, #67	; 0x43
 8004c2e:	d10a      	bne.n	8004c46 <ACC+0xbe>
	{
		// Increase Speed Limit
		if (speed_limit<MaxSPEEDLIMIT)
 8004c30:	4b73      	ldr	r3, [pc, #460]	; (8004e00 <ACC+0x278>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b2c      	cmp	r3, #44	; 0x2c
 8004c36:	d82c      	bhi.n	8004c92 <ACC+0x10a>
			speed_limit++;
 8004c38:	4b71      	ldr	r3, [pc, #452]	; (8004e00 <ACC+0x278>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	4b6f      	ldr	r3, [pc, #444]	; (8004e00 <ACC+0x278>)
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e025      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'D')
 8004c46:	4b6b      	ldr	r3, [pc, #428]	; (8004df4 <ACC+0x26c>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b44      	cmp	r3, #68	; 0x44
 8004c4c:	d10a      	bne.n	8004c64 <ACC+0xdc>
	{
		// Decrease Speed Limit
		if(speed_limit>MinSPEEDLIMIT)
 8004c4e:	4b6c      	ldr	r3, [pc, #432]	; (8004e00 <ACC+0x278>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d91d      	bls.n	8004c92 <ACC+0x10a>
			speed_limit--;
 8004c56:	4b6a      	ldr	r3, [pc, #424]	; (8004e00 <ACC+0x278>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4b68      	ldr	r3, [pc, #416]	; (8004e00 <ACC+0x278>)
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e016      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'F')
 8004c64:	4b63      	ldr	r3, [pc, #396]	; (8004df4 <ACC+0x26c>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b46      	cmp	r3, #70	; 0x46
 8004c6a:	d103      	bne.n	8004c74 <ACC+0xec>
	{
		// Far Distance
		seperation_gap = Far;
 8004c6c:	4b65      	ldr	r3, [pc, #404]	; (8004e04 <ACC+0x27c>)
 8004c6e:	2202      	movs	r2, #2
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	e00e      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'M')
 8004c74:	4b5f      	ldr	r3, [pc, #380]	; (8004df4 <ACC+0x26c>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b4d      	cmp	r3, #77	; 0x4d
 8004c7a:	d103      	bne.n	8004c84 <ACC+0xfc>
	{
		// Medium Distance
		seperation_gap = Medium;
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <ACC+0x27c>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e006      	b.n	8004c92 <ACC+0x10a>
	}
	else if(data == 'N')
 8004c84:	4b5b      	ldr	r3, [pc, #364]	; (8004df4 <ACC+0x26c>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b4e      	cmp	r3, #78	; 0x4e
 8004c8a:	d102      	bne.n	8004c92 <ACC+0x10a>
	{
		// Near Distance
		seperation_gap = Near;
 8004c8c:	4b5d      	ldr	r3, [pc, #372]	; (8004e04 <ACC+0x27c>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
	}

	// Get Forward Distance
	distance = Ultrasonic_Time(FRONT_ULTRASONIC);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7ff fe2c 	bl	80048f0 <Ultrasonic_Time>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4b5a      	ldr	r3, [pc, #360]	; (8004e08 <ACC+0x280>)
 8004c9e:	801a      	strh	r2, [r3, #0]

	// Get Car Speed
	current_speed = Car_Velocity();
 8004ca0:	f000 f912 	bl	8004ec8 <Car_Velocity>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b58      	ldr	r3, [pc, #352]	; (8004e0c <ACC+0x284>)
 8004caa:	701a      	strb	r2, [r3, #0]

	// Check On Speed Also !!
	if (distance <= Far_Safe_Distance) // to detect if there any object or not
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <ACC+0x280>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	2b3c      	cmp	r3, #60	; 0x3c
 8004cb2:	f200 808b 	bhi.w	8004dcc <ACC+0x244>
	{
		// Seperation Gap Control Part
		switch(seperation_gap)
 8004cb6:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <ACC+0x27c>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d015      	beq.n	8004cea <ACC+0x162>
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d002      	beq.n	8004cc8 <ACC+0x140>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d04b      	beq.n	8004d5e <ACC+0x1d6>
					{
						dutycycle -= DUTYCYCLESTEP;
					}
				}
				break;
			default:break;
 8004cc6:	e0b9      	b.n	8004e3c <ACC+0x2b4>
				if (distance < Far_Safe_Distance)
 8004cc8:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <ACC+0x280>)
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	2b3b      	cmp	r3, #59	; 0x3b
 8004cce:	f200 80b0 	bhi.w	8004e32 <ACC+0x2aa>
					if(dutycycle > DUTYCYCLE_LowerLimit  - DUTYCYCLESTEP)
 8004cd2:	4b49      	ldr	r3, [pc, #292]	; (8004df8 <ACC+0x270>)
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	2b5a      	cmp	r3, #90	; 0x5a
 8004cd8:	f240 80ab 	bls.w	8004e32 <ACC+0x2aa>
						dutycycle -= DUTYCYCLESTEP;
 8004cdc:	4b46      	ldr	r3, [pc, #280]	; (8004df8 <ACC+0x270>)
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	3b0a      	subs	r3, #10
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	4b44      	ldr	r3, [pc, #272]	; (8004df8 <ACC+0x270>)
 8004ce6:	801a      	strh	r2, [r3, #0]
				break;
 8004ce8:	e0a3      	b.n	8004e32 <ACC+0x2aa>
				if(distance > Medium_Safe_Distance)
 8004cea:	4b47      	ldr	r3, [pc, #284]	; (8004e08 <ACC+0x280>)
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	2b1e      	cmp	r3, #30
 8004cf0:	d926      	bls.n	8004d40 <ACC+0x1b8>
					if(current_speed < speed_limit)
 8004cf2:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <ACC+0x284>)
 8004cf4:	781a      	ldrb	r2, [r3, #0]
 8004cf6:	4b42      	ldr	r3, [pc, #264]	; (8004e00 <ACC+0x278>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20d      	bcs.n	8004d1a <ACC+0x192>
						if(dutycycle < DUTYCYCLE_UpperLimit - DUTYCYCLESTEP )
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <ACC+0x270>)
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	f242 7205 	movw	r2, #9989	; 0x2705
 8004d06:	4293      	cmp	r3, r2
 8004d08:	f200 8095 	bhi.w	8004e36 <ACC+0x2ae>
							dutycycle += DUTYCYCLESTEP;
 8004d0c:	4b3a      	ldr	r3, [pc, #232]	; (8004df8 <ACC+0x270>)
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	330a      	adds	r3, #10
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	4b38      	ldr	r3, [pc, #224]	; (8004df8 <ACC+0x270>)
 8004d16:	801a      	strh	r2, [r3, #0]
				break;
 8004d18:	e08d      	b.n	8004e36 <ACC+0x2ae>
					else if (current_speed > speed_limit)
 8004d1a:	4b3c      	ldr	r3, [pc, #240]	; (8004e0c <ACC+0x284>)
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	4b38      	ldr	r3, [pc, #224]	; (8004e00 <ACC+0x278>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f240 8087 	bls.w	8004e36 <ACC+0x2ae>
						if(dutycycle > DUTYCYCLE_LowerLimit + DUTYCYCLESTEP)
 8004d28:	4b33      	ldr	r3, [pc, #204]	; (8004df8 <ACC+0x270>)
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	2b6e      	cmp	r3, #110	; 0x6e
 8004d2e:	f240 8082 	bls.w	8004e36 <ACC+0x2ae>
							dutycycle -= DUTYCYCLESTEP;
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <ACC+0x270>)
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	3b0a      	subs	r3, #10
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	4b2f      	ldr	r3, [pc, #188]	; (8004df8 <ACC+0x270>)
 8004d3c:	801a      	strh	r2, [r3, #0]
				break;
 8004d3e:	e07a      	b.n	8004e36 <ACC+0x2ae>
				else if (distance < Medium_Safe_Distance)
 8004d40:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <ACC+0x280>)
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	2b1d      	cmp	r3, #29
 8004d46:	d876      	bhi.n	8004e36 <ACC+0x2ae>
					if(dutycycle > DUTYCYCLE_LowerLimit +  DUTYCYCLESTEP)
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <ACC+0x270>)
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	2b6e      	cmp	r3, #110	; 0x6e
 8004d4e:	d972      	bls.n	8004e36 <ACC+0x2ae>
						dutycycle -= DUTYCYCLESTEP;
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <ACC+0x270>)
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	3b0a      	subs	r3, #10
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <ACC+0x270>)
 8004d5a:	801a      	strh	r2, [r3, #0]
				break;
 8004d5c:	e06b      	b.n	8004e36 <ACC+0x2ae>
				if(distance > Near_Safe_Distance)
 8004d5e:	4b2a      	ldr	r3, [pc, #168]	; (8004e08 <ACC+0x280>)
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	2b0a      	cmp	r3, #10
 8004d64:	d923      	bls.n	8004dae <ACC+0x226>
					if(current_speed < speed_limit)
 8004d66:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <ACC+0x284>)
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <ACC+0x278>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d20c      	bcs.n	8004d8c <ACC+0x204>
						if(dutycycle < DUTYCYCLE_UpperLimit  - DUTYCYCLESTEP)
 8004d72:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <ACC+0x270>)
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	f242 7205 	movw	r2, #9989	; 0x2705
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d85d      	bhi.n	8004e3a <ACC+0x2b2>
							dutycycle += DUTYCYCLESTEP;
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <ACC+0x270>)
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	330a      	adds	r3, #10
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <ACC+0x270>)
 8004d88:	801a      	strh	r2, [r3, #0]
				break;
 8004d8a:	e056      	b.n	8004e3a <ACC+0x2b2>
					else if (current_speed > speed_limit)
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <ACC+0x284>)
 8004d8e:	781a      	ldrb	r2, [r3, #0]
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <ACC+0x278>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d950      	bls.n	8004e3a <ACC+0x2b2>
						if(dutycycle > DUTYCYCLE_LowerLimit  + DUTYCYCLESTEP)
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <ACC+0x270>)
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	2b6e      	cmp	r3, #110	; 0x6e
 8004d9e:	d94c      	bls.n	8004e3a <ACC+0x2b2>
							dutycycle -= DUTYCYCLESTEP;
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <ACC+0x270>)
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	3b0a      	subs	r3, #10
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <ACC+0x270>)
 8004daa:	801a      	strh	r2, [r3, #0]
				break;
 8004dac:	e045      	b.n	8004e3a <ACC+0x2b2>
				else if (distance < Near_Safe_Distance)
 8004dae:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <ACC+0x280>)
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	2b09      	cmp	r3, #9
 8004db4:	d841      	bhi.n	8004e3a <ACC+0x2b2>
					if(dutycycle > DUTYCYCLE_LowerLimit +  DUTYCYCLESTEP)
 8004db6:	4b10      	ldr	r3, [pc, #64]	; (8004df8 <ACC+0x270>)
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	2b6e      	cmp	r3, #110	; 0x6e
 8004dbc:	d93d      	bls.n	8004e3a <ACC+0x2b2>
						dutycycle -= DUTYCYCLESTEP;
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <ACC+0x270>)
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	3b0a      	subs	r3, #10
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <ACC+0x270>)
 8004dc8:	801a      	strh	r2, [r3, #0]
				break;
 8004dca:	e036      	b.n	8004e3a <ACC+0x2b2>
		}
	}
	else
	{     // Speed Limit Control Part
		   if(speed_limit> current_speed)
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <ACC+0x278>)
 8004dce:	781a      	ldrb	r2, [r3, #0]
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <ACC+0x284>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d91b      	bls.n	8004e10 <ACC+0x288>
		   {
			   if(dutycycle < DUTYCYCLE_UpperLimit -  DUTYCYCLESTEP)
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <ACC+0x270>)
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	f242 7205 	movw	r2, #9989	; 0x2705
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d82b      	bhi.n	8004e3c <ACC+0x2b4>
			   {
				   dutycycle += DUTYCYCLESTEP;
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <ACC+0x270>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	330a      	adds	r3, #10
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <ACC+0x270>)
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	e024      	b.n	8004e3c <ACC+0x2b4>
 8004df2:	bf00      	nop
 8004df4:	2000008f 	.word	0x2000008f
 8004df8:	20000094 	.word	0x20000094
 8004dfc:	2000008e 	.word	0x2000008e
 8004e00:	20000008 	.word	0x20000008
 8004e04:	20000009 	.word	0x20000009
 8004e08:	20000092 	.word	0x20000092
 8004e0c:	20000090 	.word	0x20000090
			   }
		   }

			else if (speed_limit< current_speed)
 8004e10:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <ACC+0x330>)
 8004e12:	781a      	ldrb	r2, [r3, #0]
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <ACC+0x334>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d20f      	bcs.n	8004e3c <ACC+0x2b4>
			{
				if(dutycycle > DUTYCYCLE_LowerLimit +  DUTYCYCLESTEP)
 8004e1c:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <ACC+0x338>)
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	2b6e      	cmp	r3, #110	; 0x6e
 8004e22:	d90b      	bls.n	8004e3c <ACC+0x2b4>
				{
					dutycycle -= DUTYCYCLESTEP;
 8004e24:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <ACC+0x338>)
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	3b0a      	subs	r3, #10
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <ACC+0x338>)
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e004      	b.n	8004e3c <ACC+0x2b4>
				break;
 8004e32:	bf00      	nop
 8004e34:	e002      	b.n	8004e3c <ACC+0x2b4>
				break;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <ACC+0x2b4>
				break;
 8004e3a:	bf00      	nop
				}
			}
	}

	switch(ACC_STATE)
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <ACC+0x33c>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d835      	bhi.n	8004eb0 <ACC+0x328>
 8004e44:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <ACC+0x2c4>)
 8004e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4a:	bf00      	nop
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e81 	.word	0x08004e81
 8004e58:	08004e61 	.word	0x08004e61
 8004e5c:	08004ea1 	.word	0x08004ea1
	{
		case REVERSE:
			Car_Drive(GO,Backward,dutycycle);
 8004e60:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <ACC+0x338>)
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	2101      	movs	r1, #1
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f7fb fdb7 	bl	80009dc <Car_Drive>
			break;
 8004e6e:	e020      	b.n	8004eb2 <ACC+0x32a>
		case DRIVE_STRAIGHT:
			Car_Drive(GO,Forward,dutycycle);
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <ACC+0x338>)
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	2100      	movs	r1, #0
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f7fb fdaf 	bl	80009dc <Car_Drive>
			break;
 8004e7e:	e018      	b.n	8004eb2 <ACC+0x32a>
		case DRIVE_LEFT:
			Car_Drive(GO,Left,dutycycle);
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <ACC+0x338>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	2102      	movs	r1, #2
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f7fb fda7 	bl	80009dc <Car_Drive>
			break;
 8004e8e:	e010      	b.n	8004eb2 <ACC+0x32a>
		case DRIVE_RIGHT:
			Car_Drive(GO,Right,dutycycle);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <ACC+0x338>)
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	461a      	mov	r2, r3
 8004e96:	2103      	movs	r1, #3
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f7fb fd9f 	bl	80009dc <Car_Drive>
			break;
 8004e9e:	e008      	b.n	8004eb2 <ACC+0x32a>
		case PARKING :
			Car_Drive(STOP,Right,dutycycle);
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <ACC+0x338>)
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2103      	movs	r1, #3
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f7fb fd97 	bl	80009dc <Car_Drive>
			break;
 8004eae:	e000      	b.n	8004eb2 <ACC+0x32a>
		default:break;
 8004eb0:	bf00      	nop
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000008 	.word	0x20000008
 8004ebc:	20000090 	.word	0x20000090
 8004ec0:	20000094 	.word	0x20000094
 8004ec4:	2000008e 	.word	0x2000008e

08004ec8 <Car_Velocity>:
}


// Useful functions
unsigned char Car_Velocity(void)
{
 8004ec8:	b598      	push	{r3, r4, r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	return (dutycycle*50/10000.0);
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <Car_Velocity+0x40>)
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2332      	movs	r3, #50	; 0x32
 8004ed4:	fb03 f302 	mul.w	r3, r3, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fa9b 	bl	8000414 <__aeabi_i2d>
 8004ede:	a308      	add	r3, pc, #32	; (adr r3, 8004f00 <Car_Velocity+0x38>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f7fb fc2a 	bl	800073c <__aeabi_ddiv>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	460c      	mov	r4, r1
 8004eec:	4618      	mov	r0, r3
 8004eee:	4621      	mov	r1, r4
 8004ef0:	f7fb fd0c 	bl	800090c <__aeabi_d2uiz>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	b2db      	uxtb	r3, r3
	/*
	 * Direct Linear Relation Between Duty Cycle && RPM
	 * V = 2 * PI * N / 60  (N --> RPM)
	 */
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd98      	pop	{r3, r4, r7, pc}
 8004efc:	f3af 8000 	nop.w
 8004f00:	00000000 	.word	0x00000000
 8004f04:	40c38800 	.word	0x40c38800
 8004f08:	20000094 	.word	0x20000094

08004f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f0c:	480d      	ldr	r0, [pc, #52]	; (8004f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004f10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f14:	480c      	ldr	r0, [pc, #48]	; (8004f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f18:	4a0d      	ldr	r2, [pc, #52]	; (8004f50 <LoopForever+0xe>)
  movs r3, #0
 8004f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f1c:	e002      	b.n	8004f24 <LoopCopyDataInit>

08004f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f22:	3304      	adds	r3, #4

08004f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f28:	d3f9      	bcc.n	8004f1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f2c:	4c0a      	ldr	r4, [pc, #40]	; (8004f58 <LoopForever+0x16>)
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f30:	e001      	b.n	8004f36 <LoopFillZerobss>

08004f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f34:	3204      	adds	r2, #4

08004f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f38:	d3fb      	bcc.n	8004f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f3a:	f000 f811 	bl	8004f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f3e:	f7ff fdff 	bl	8004b40 <main>

08004f42 <LoopForever>:

LoopForever:
    b LoopForever
 8004f42:	e7fe      	b.n	8004f42 <LoopForever>
  ldr   r0, =_estack
 8004f44:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004f50:	08004fc8 	.word	0x08004fc8
  ldr r2, =_sbss
 8004f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004f58:	20000098 	.word	0x20000098

08004f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f5c:	e7fe      	b.n	8004f5c <ADC1_2_IRQHandler>
	...

08004f60 <__libc_init_array>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	2500      	movs	r5, #0
 8004f64:	4e0c      	ldr	r6, [pc, #48]	; (8004f98 <__libc_init_array+0x38>)
 8004f66:	4c0d      	ldr	r4, [pc, #52]	; (8004f9c <__libc_init_array+0x3c>)
 8004f68:	1ba4      	subs	r4, r4, r6
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	42a5      	cmp	r5, r4
 8004f6e:	d109      	bne.n	8004f84 <__libc_init_array+0x24>
 8004f70:	f000 f81a 	bl	8004fa8 <_init>
 8004f74:	2500      	movs	r5, #0
 8004f76:	4e0a      	ldr	r6, [pc, #40]	; (8004fa0 <__libc_init_array+0x40>)
 8004f78:	4c0a      	ldr	r4, [pc, #40]	; (8004fa4 <__libc_init_array+0x44>)
 8004f7a:	1ba4      	subs	r4, r4, r6
 8004f7c:	10a4      	asrs	r4, r4, #2
 8004f7e:	42a5      	cmp	r5, r4
 8004f80:	d105      	bne.n	8004f8e <__libc_init_array+0x2e>
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f88:	4798      	blx	r3
 8004f8a:	3501      	adds	r5, #1
 8004f8c:	e7ee      	b.n	8004f6c <__libc_init_array+0xc>
 8004f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f92:	4798      	blx	r3
 8004f94:	3501      	adds	r5, #1
 8004f96:	e7f2      	b.n	8004f7e <__libc_init_array+0x1e>
 8004f98:	08004fc0 	.word	0x08004fc0
 8004f9c:	08004fc0 	.word	0x08004fc0
 8004fa0:	08004fc0 	.word	0x08004fc0
 8004fa4:	08004fc4 	.word	0x08004fc4

08004fa8 <_init>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr

08004fb4 <_fini>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr
